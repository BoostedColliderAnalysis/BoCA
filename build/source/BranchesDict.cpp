//
// File generated by /usr/bin/rootcint at Sun Jun 21 16:31:43 2015

// Do NOT change. Changes will be lost next time file is generated
//

#define R__DICTIONARY_FILENAME BranchesDict
#include "RConfig.h" //rootcint 4834
#if !defined(R__ACCESS_IN_SYMBOL)
//Break the privacy of classes -- Disabled for the moment
#define private public
#define protected public
#endif

// Since CINT ignores the std namespace, we need to do so in this file.
namespace std {} using namespace std;
#include "BranchesDict.h"

#include "TClass.h"
#include "TBuffer.h"
#include "TMemberInspector.h"
#include "TError.h"

#ifndef G__ROOT
#define G__ROOT
#endif

#include "RtypesImp.h"
#include "TIsAProxy.h"
#include "TFileMergeInfo.h"

// Direct notice to TROOT of the dictionary's loading.
namespace {
   static struct DictInit {
      DictInit() {
         ROOT::RegisterModule();
      }
   } __TheDictionaryInitializer;
}

// START OF SHADOWS

namespace ROOT {
   namespace Shadow {
   } // of namespace Shadow
} // of namespace ROOT
// END OF SHADOWS

namespace analysis {
   namespace ROOT {
      inline ::ROOT::TGenericClassInfo *GenerateInitInstance();
      static void analysis_Dictionary();

      // Function generating the singleton type initializer
      inline ::ROOT::TGenericClassInfo *GenerateInitInstance()
      {
         static ::ROOT::TGenericClassInfo 
            instance("analysis", 0 /*version*/, "/home/toodles/madness/analysis/include/Branches.hh", 7,
                     ::ROOT::DefineBehavior((void*)0,(void*)0),
                     &analysis_Dictionary, 4);
         return &instance;
      }
      // Insure that the inline function is _not_ optimized away by the compiler
      ::ROOT::TGenericClassInfo *(*_R__UNIQUE_(InitFunctionKeeper))() = &GenerateInitInstance;  
      // Static variable to force the class initialization
      static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstance(); R__UseDummy(_R__UNIQUE_(Init));

      // Dictionary for non-ClassDef classes
      static void analysis_Dictionary() {
         GenerateInitInstance()->GetClass();
      }

   }
}

namespace ROOT {
   void analysiscLcLBranch_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_analysiscLcLBranch(void *p = 0);
   static void *newArray_analysiscLcLBranch(Long_t size, void *p);
   static void delete_analysiscLcLBranch(void *p);
   static void deleteArray_analysiscLcLBranch(void *p);
   static void destruct_analysiscLcLBranch(void *p);

   // Function generating the singleton type initializer
   static TGenericClassInfo *GenerateInitInstanceLocal(const ::analysis::Branch*)
   {
      ::analysis::Branch *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::analysis::Branch >(0);
      static ::ROOT::TGenericClassInfo 
         instance("analysis::Branch", ::analysis::Branch::Class_Version(), "/home/toodles/madness/analysis/include/Branches.hh", 19,
                  typeid(::analysis::Branch), DefineBehavior(ptr, ptr),
                  &::analysis::Branch::Dictionary, isa_proxy, 4,
                  sizeof(::analysis::Branch) );
      instance.SetNew(&new_analysiscLcLBranch);
      instance.SetNewArray(&newArray_analysiscLcLBranch);
      instance.SetDelete(&delete_analysiscLcLBranch);
      instance.SetDeleteArray(&deleteArray_analysiscLcLBranch);
      instance.SetDestructor(&destruct_analysiscLcLBranch);
      return &instance;
   }
   TGenericClassInfo *GenerateInitInstance(const ::analysis::Branch*)
   {
      return GenerateInitInstanceLocal((::analysis::Branch*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::analysis::Branch*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOT

namespace ROOT {
   void analysiscLcLInfoBranch_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_analysiscLcLInfoBranch(void *p = 0);
   static void *newArray_analysiscLcLInfoBranch(Long_t size, void *p);
   static void delete_analysiscLcLInfoBranch(void *p);
   static void deleteArray_analysiscLcLInfoBranch(void *p);
   static void destruct_analysiscLcLInfoBranch(void *p);

   // Function generating the singleton type initializer
   static TGenericClassInfo *GenerateInitInstanceLocal(const ::analysis::InfoBranch*)
   {
      ::analysis::InfoBranch *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::analysis::InfoBranch >(0);
      static ::ROOT::TGenericClassInfo 
         instance("analysis::InfoBranch", ::analysis::InfoBranch::Class_Version(), "/home/toodles/madness/analysis/include/Branches.hh", 52,
                  typeid(::analysis::InfoBranch), DefineBehavior(ptr, ptr),
                  &::analysis::InfoBranch::Dictionary, isa_proxy, 4,
                  sizeof(::analysis::InfoBranch) );
      instance.SetNew(&new_analysiscLcLInfoBranch);
      instance.SetNewArray(&newArray_analysiscLcLInfoBranch);
      instance.SetDelete(&delete_analysiscLcLInfoBranch);
      instance.SetDeleteArray(&deleteArray_analysiscLcLInfoBranch);
      instance.SetDestructor(&destruct_analysiscLcLInfoBranch);
      return &instance;
   }
   TGenericClassInfo *GenerateInitInstance(const ::analysis::InfoBranch*)
   {
      return GenerateInitInstanceLocal((::analysis::InfoBranch*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::analysis::InfoBranch*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOT

namespace ROOT {
   void analysiscLcLHResultBranch_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_analysiscLcLHResultBranch(void *p = 0);
   static void *newArray_analysiscLcLHResultBranch(Long_t size, void *p);
   static void delete_analysiscLcLHResultBranch(void *p);
   static void deleteArray_analysiscLcLHResultBranch(void *p);
   static void destruct_analysiscLcLHResultBranch(void *p);

   // Function generating the singleton type initializer
   static TGenericClassInfo *GenerateInitInstanceLocal(const ::analysis::HResultBranch*)
   {
      ::analysis::HResultBranch *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::analysis::HResultBranch >(0);
      static ::ROOT::TGenericClassInfo 
         instance("analysis::HResultBranch", ::analysis::HResultBranch::Class_Version(), "/home/toodles/madness/analysis/include/Branches.hh", 66,
                  typeid(::analysis::HResultBranch), DefineBehavior(ptr, ptr),
                  &::analysis::HResultBranch::Dictionary, isa_proxy, 4,
                  sizeof(::analysis::HResultBranch) );
      instance.SetNew(&new_analysiscLcLHResultBranch);
      instance.SetNewArray(&newArray_analysiscLcLHResultBranch);
      instance.SetDelete(&delete_analysiscLcLHResultBranch);
      instance.SetDeleteArray(&deleteArray_analysiscLcLHResultBranch);
      instance.SetDestructor(&destruct_analysiscLcLHResultBranch);
      return &instance;
   }
   TGenericClassInfo *GenerateInitInstance(const ::analysis::HResultBranch*)
   {
      return GenerateInitInstanceLocal((::analysis::HResultBranch*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::analysis::HResultBranch*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOT

namespace ROOT {
   void analysiscLcLParticleBranch_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_analysiscLcLParticleBranch(void *p = 0);
   static void *newArray_analysiscLcLParticleBranch(Long_t size, void *p);
   static void delete_analysiscLcLParticleBranch(void *p);
   static void deleteArray_analysiscLcLParticleBranch(void *p);
   static void destruct_analysiscLcLParticleBranch(void *p);

   // Function generating the singleton type initializer
   static TGenericClassInfo *GenerateInitInstanceLocal(const ::analysis::ParticleBranch*)
   {
      ::analysis::ParticleBranch *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::analysis::ParticleBranch >(0);
      static ::ROOT::TGenericClassInfo 
         instance("analysis::ParticleBranch", ::analysis::ParticleBranch::Class_Version(), "/home/toodles/madness/analysis/include/Branches.hh", 80,
                  typeid(::analysis::ParticleBranch), DefineBehavior(ptr, ptr),
                  &::analysis::ParticleBranch::Dictionary, isa_proxy, 4,
                  sizeof(::analysis::ParticleBranch) );
      instance.SetNew(&new_analysiscLcLParticleBranch);
      instance.SetNewArray(&newArray_analysiscLcLParticleBranch);
      instance.SetDelete(&delete_analysiscLcLParticleBranch);
      instance.SetDeleteArray(&deleteArray_analysiscLcLParticleBranch);
      instance.SetDestructor(&destruct_analysiscLcLParticleBranch);
      return &instance;
   }
   TGenericClassInfo *GenerateInitInstance(const ::analysis::ParticleBranch*)
   {
      return GenerateInitInstanceLocal((::analysis::ParticleBranch*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::analysis::ParticleBranch*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOT

namespace ROOT {
   void analysiscLcLBottomBranch_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_analysiscLcLBottomBranch(void *p = 0);
   static void *newArray_analysiscLcLBottomBranch(Long_t size, void *p);
   static void delete_analysiscLcLBottomBranch(void *p);
   static void deleteArray_analysiscLcLBottomBranch(void *p);
   static void destruct_analysiscLcLBottomBranch(void *p);

   // Function generating the singleton type initializer
   static TGenericClassInfo *GenerateInitInstanceLocal(const ::analysis::BottomBranch*)
   {
      ::analysis::BottomBranch *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::analysis::BottomBranch >(0);
      static ::ROOT::TGenericClassInfo 
         instance("analysis::BottomBranch", ::analysis::BottomBranch::Class_Version(), "/home/toodles/madness/analysis/include/Branches.hh", 113,
                  typeid(::analysis::BottomBranch), DefineBehavior(ptr, ptr),
                  &::analysis::BottomBranch::Dictionary, isa_proxy, 4,
                  sizeof(::analysis::BottomBranch) );
      instance.SetNew(&new_analysiscLcLBottomBranch);
      instance.SetNewArray(&newArray_analysiscLcLBottomBranch);
      instance.SetDelete(&delete_analysiscLcLBottomBranch);
      instance.SetDeleteArray(&deleteArray_analysiscLcLBottomBranch);
      instance.SetDestructor(&destruct_analysiscLcLBottomBranch);
      return &instance;
   }
   TGenericClassInfo *GenerateInitInstance(const ::analysis::BottomBranch*)
   {
      return GenerateInitInstanceLocal((::analysis::BottomBranch*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::analysis::BottomBranch*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOT

namespace ROOT {
   void analysiscLcLTauBranch_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_analysiscLcLTauBranch(void *p = 0);
   static void *newArray_analysiscLcLTauBranch(Long_t size, void *p);
   static void delete_analysiscLcLTauBranch(void *p);
   static void deleteArray_analysiscLcLTauBranch(void *p);
   static void destruct_analysiscLcLTauBranch(void *p);

   // Function generating the singleton type initializer
   static TGenericClassInfo *GenerateInitInstanceLocal(const ::analysis::TauBranch*)
   {
      ::analysis::TauBranch *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::analysis::TauBranch >(0);
      static ::ROOT::TGenericClassInfo 
         instance("analysis::TauBranch", ::analysis::TauBranch::Class_Version(), "/home/toodles/madness/analysis/include/Branches.hh", 160,
                  typeid(::analysis::TauBranch), DefineBehavior(ptr, ptr),
                  &::analysis::TauBranch::Dictionary, isa_proxy, 4,
                  sizeof(::analysis::TauBranch) );
      instance.SetNew(&new_analysiscLcLTauBranch);
      instance.SetNewArray(&newArray_analysiscLcLTauBranch);
      instance.SetDelete(&delete_analysiscLcLTauBranch);
      instance.SetDeleteArray(&deleteArray_analysiscLcLTauBranch);
      instance.SetDestructor(&destruct_analysiscLcLTauBranch);
      return &instance;
   }
   TGenericClassInfo *GenerateInitInstance(const ::analysis::TauBranch*)
   {
      return GenerateInitInstanceLocal((::analysis::TauBranch*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::analysis::TauBranch*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOT

namespace ROOT {
   void analysiscLcLPairBranch_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_analysiscLcLPairBranch(void *p = 0);
   static void *newArray_analysiscLcLPairBranch(Long_t size, void *p);
   static void delete_analysiscLcLPairBranch(void *p);
   static void deleteArray_analysiscLcLPairBranch(void *p);
   static void destruct_analysiscLcLPairBranch(void *p);

   // Function generating the singleton type initializer
   static TGenericClassInfo *GenerateInitInstanceLocal(const ::analysis::PairBranch*)
   {
      ::analysis::PairBranch *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::analysis::PairBranch >(0);
      static ::ROOT::TGenericClassInfo 
         instance("analysis::PairBranch", ::analysis::PairBranch::Class_Version(), "/home/toodles/madness/analysis/include/Branches.hh", 195,
                  typeid(::analysis::PairBranch), DefineBehavior(ptr, ptr),
                  &::analysis::PairBranch::Dictionary, isa_proxy, 4,
                  sizeof(::analysis::PairBranch) );
      instance.SetNew(&new_analysiscLcLPairBranch);
      instance.SetNewArray(&newArray_analysiscLcLPairBranch);
      instance.SetDelete(&delete_analysiscLcLPairBranch);
      instance.SetDeleteArray(&deleteArray_analysiscLcLPairBranch);
      instance.SetDestructor(&destruct_analysiscLcLPairBranch);
      return &instance;
   }
   TGenericClassInfo *GenerateInitInstance(const ::analysis::PairBranch*)
   {
      return GenerateInitInstanceLocal((::analysis::PairBranch*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::analysis::PairBranch*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOT

namespace ROOT {
   void analysiscLcLMultiBranch_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_analysiscLcLMultiBranch(void *p = 0);
   static void *newArray_analysiscLcLMultiBranch(Long_t size, void *p);
   static void delete_analysiscLcLMultiBranch(void *p);
   static void deleteArray_analysiscLcLMultiBranch(void *p);
   static void destruct_analysiscLcLMultiBranch(void *p);

   // Function generating the singleton type initializer
   static TGenericClassInfo *GenerateInitInstanceLocal(const ::analysis::MultiBranch*)
   {
      ::analysis::MultiBranch *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::analysis::MultiBranch >(0);
      static ::ROOT::TGenericClassInfo 
         instance("analysis::MultiBranch", ::analysis::MultiBranch::Class_Version(), "/home/toodles/madness/analysis/include/Branches.hh", 236,
                  typeid(::analysis::MultiBranch), DefineBehavior(ptr, ptr),
                  &::analysis::MultiBranch::Dictionary, isa_proxy, 4,
                  sizeof(::analysis::MultiBranch) );
      instance.SetNew(&new_analysiscLcLMultiBranch);
      instance.SetNewArray(&newArray_analysiscLcLMultiBranch);
      instance.SetDelete(&delete_analysiscLcLMultiBranch);
      instance.SetDeleteArray(&deleteArray_analysiscLcLMultiBranch);
      instance.SetDestructor(&destruct_analysiscLcLMultiBranch);
      return &instance;
   }
   TGenericClassInfo *GenerateInitInstance(const ::analysis::MultiBranch*)
   {
      return GenerateInitInstanceLocal((::analysis::MultiBranch*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::analysis::MultiBranch*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOT

namespace ROOT {
   void analysiscLcLWHadronicBranch_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_analysiscLcLWHadronicBranch(void *p = 0);
   static void *newArray_analysiscLcLWHadronicBranch(Long_t size, void *p);
   static void delete_analysiscLcLWHadronicBranch(void *p);
   static void deleteArray_analysiscLcLWHadronicBranch(void *p);
   static void destruct_analysiscLcLWHadronicBranch(void *p);

   // Function generating the singleton type initializer
   static TGenericClassInfo *GenerateInitInstanceLocal(const ::analysis::WHadronicBranch*)
   {
      ::analysis::WHadronicBranch *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::analysis::WHadronicBranch >(0);
      static ::ROOT::TGenericClassInfo 
         instance("analysis::WHadronicBranch", ::analysis::WHadronicBranch::Class_Version(), "/home/toodles/madness/analysis/include/Branches.hh", 258,
                  typeid(::analysis::WHadronicBranch), DefineBehavior(ptr, ptr),
                  &::analysis::WHadronicBranch::Dictionary, isa_proxy, 4,
                  sizeof(::analysis::WHadronicBranch) );
      instance.SetNew(&new_analysiscLcLWHadronicBranch);
      instance.SetNewArray(&newArray_analysiscLcLWHadronicBranch);
      instance.SetDelete(&delete_analysiscLcLWHadronicBranch);
      instance.SetDeleteArray(&deleteArray_analysiscLcLWHadronicBranch);
      instance.SetDestructor(&destruct_analysiscLcLWHadronicBranch);
      return &instance;
   }
   TGenericClassInfo *GenerateInitInstance(const ::analysis::WHadronicBranch*)
   {
      return GenerateInitInstanceLocal((::analysis::WHadronicBranch*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::analysis::WHadronicBranch*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOT

namespace ROOT {
   void analysiscLcLZHadronicBranch_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_analysiscLcLZHadronicBranch(void *p = 0);
   static void *newArray_analysiscLcLZHadronicBranch(Long_t size, void *p);
   static void delete_analysiscLcLZHadronicBranch(void *p);
   static void deleteArray_analysiscLcLZHadronicBranch(void *p);
   static void destruct_analysiscLcLZHadronicBranch(void *p);

   // Function generating the singleton type initializer
   static TGenericClassInfo *GenerateInitInstanceLocal(const ::analysis::ZHadronicBranch*)
   {
      ::analysis::ZHadronicBranch *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::analysis::ZHadronicBranch >(0);
      static ::ROOT::TGenericClassInfo 
         instance("analysis::ZHadronicBranch", ::analysis::ZHadronicBranch::Class_Version(), "/home/toodles/madness/analysis/include/Branches.hh", 275,
                  typeid(::analysis::ZHadronicBranch), DefineBehavior(ptr, ptr),
                  &::analysis::ZHadronicBranch::Dictionary, isa_proxy, 4,
                  sizeof(::analysis::ZHadronicBranch) );
      instance.SetNew(&new_analysiscLcLZHadronicBranch);
      instance.SetNewArray(&newArray_analysiscLcLZHadronicBranch);
      instance.SetDelete(&delete_analysiscLcLZHadronicBranch);
      instance.SetDeleteArray(&deleteArray_analysiscLcLZHadronicBranch);
      instance.SetDestructor(&destruct_analysiscLcLZHadronicBranch);
      return &instance;
   }
   TGenericClassInfo *GenerateInitInstance(const ::analysis::ZHadronicBranch*)
   {
      return GenerateInitInstanceLocal((::analysis::ZHadronicBranch*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::analysis::ZHadronicBranch*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOT

namespace ROOT {
   void analysiscLcLJetPairBranch_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_analysiscLcLJetPairBranch(void *p = 0);
   static void *newArray_analysiscLcLJetPairBranch(Long_t size, void *p);
   static void delete_analysiscLcLJetPairBranch(void *p);
   static void deleteArray_analysiscLcLJetPairBranch(void *p);
   static void destruct_analysiscLcLJetPairBranch(void *p);

   // Function generating the singleton type initializer
   static TGenericClassInfo *GenerateInitInstanceLocal(const ::analysis::JetPairBranch*)
   {
      ::analysis::JetPairBranch *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::analysis::JetPairBranch >(0);
      static ::ROOT::TGenericClassInfo 
         instance("analysis::JetPairBranch", ::analysis::JetPairBranch::Class_Version(), "/home/toodles/madness/analysis/include/Branches.hh", 292,
                  typeid(::analysis::JetPairBranch), DefineBehavior(ptr, ptr),
                  &::analysis::JetPairBranch::Dictionary, isa_proxy, 4,
                  sizeof(::analysis::JetPairBranch) );
      instance.SetNew(&new_analysiscLcLJetPairBranch);
      instance.SetNewArray(&newArray_analysiscLcLJetPairBranch);
      instance.SetDelete(&delete_analysiscLcLJetPairBranch);
      instance.SetDeleteArray(&deleteArray_analysiscLcLJetPairBranch);
      instance.SetDestructor(&destruct_analysiscLcLJetPairBranch);
      return &instance;
   }
   TGenericClassInfo *GenerateInitInstance(const ::analysis::JetPairBranch*)
   {
      return GenerateInitInstanceLocal((::analysis::JetPairBranch*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::analysis::JetPairBranch*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOT

namespace ROOT {
   void analysiscLcLTripletJetPairBranch_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_analysiscLcLTripletJetPairBranch(void *p = 0);
   static void *newArray_analysiscLcLTripletJetPairBranch(Long_t size, void *p);
   static void delete_analysiscLcLTripletJetPairBranch(void *p);
   static void deleteArray_analysiscLcLTripletJetPairBranch(void *p);
   static void destruct_analysiscLcLTripletJetPairBranch(void *p);

   // Function generating the singleton type initializer
   static TGenericClassInfo *GenerateInitInstanceLocal(const ::analysis::TripletJetPairBranch*)
   {
      ::analysis::TripletJetPairBranch *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::analysis::TripletJetPairBranch >(0);
      static ::ROOT::TGenericClassInfo 
         instance("analysis::TripletJetPairBranch", ::analysis::TripletJetPairBranch::Class_Version(), "/home/toodles/madness/analysis/include/Branches.hh", 342,
                  typeid(::analysis::TripletJetPairBranch), DefineBehavior(ptr, ptr),
                  &::analysis::TripletJetPairBranch::Dictionary, isa_proxy, 4,
                  sizeof(::analysis::TripletJetPairBranch) );
      instance.SetNew(&new_analysiscLcLTripletJetPairBranch);
      instance.SetNewArray(&newArray_analysiscLcLTripletJetPairBranch);
      instance.SetDelete(&delete_analysiscLcLTripletJetPairBranch);
      instance.SetDeleteArray(&deleteArray_analysiscLcLTripletJetPairBranch);
      instance.SetDestructor(&destruct_analysiscLcLTripletJetPairBranch);
      return &instance;
   }
   TGenericClassInfo *GenerateInitInstance(const ::analysis::TripletJetPairBranch*)
   {
      return GenerateInitInstanceLocal((::analysis::TripletJetPairBranch*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::analysis::TripletJetPairBranch*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOT

namespace ROOT {
   void analysiscLcLWSemiBranch_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_analysiscLcLWSemiBranch(void *p = 0);
   static void *newArray_analysiscLcLWSemiBranch(Long_t size, void *p);
   static void delete_analysiscLcLWSemiBranch(void *p);
   static void deleteArray_analysiscLcLWSemiBranch(void *p);
   static void destruct_analysiscLcLWSemiBranch(void *p);

   // Function generating the singleton type initializer
   static TGenericClassInfo *GenerateInitInstanceLocal(const ::analysis::WSemiBranch*)
   {
      ::analysis::WSemiBranch *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::analysis::WSemiBranch >(0);
      static ::ROOT::TGenericClassInfo 
         instance("analysis::WSemiBranch", ::analysis::WSemiBranch::Class_Version(), "/home/toodles/madness/analysis/include/Branches.hh", 386,
                  typeid(::analysis::WSemiBranch), DefineBehavior(ptr, ptr),
                  &::analysis::WSemiBranch::Dictionary, isa_proxy, 4,
                  sizeof(::analysis::WSemiBranch) );
      instance.SetNew(&new_analysiscLcLWSemiBranch);
      instance.SetNewArray(&newArray_analysiscLcLWSemiBranch);
      instance.SetDelete(&delete_analysiscLcLWSemiBranch);
      instance.SetDeleteArray(&deleteArray_analysiscLcLWSemiBranch);
      instance.SetDestructor(&destruct_analysiscLcLWSemiBranch);
      return &instance;
   }
   TGenericClassInfo *GenerateInitInstance(const ::analysis::WSemiBranch*)
   {
      return GenerateInitInstanceLocal((::analysis::WSemiBranch*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::analysis::WSemiBranch*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOT

namespace ROOT {
   void analysiscLcLTopHadronicBranch_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_analysiscLcLTopHadronicBranch(void *p = 0);
   static void *newArray_analysiscLcLTopHadronicBranch(Long_t size, void *p);
   static void delete_analysiscLcLTopHadronicBranch(void *p);
   static void deleteArray_analysiscLcLTopHadronicBranch(void *p);
   static void destruct_analysiscLcLTopHadronicBranch(void *p);

   // Function generating the singleton type initializer
   static TGenericClassInfo *GenerateInitInstanceLocal(const ::analysis::TopHadronicBranch*)
   {
      ::analysis::TopHadronicBranch *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::analysis::TopHadronicBranch >(0);
      static ::ROOT::TGenericClassInfo 
         instance("analysis::TopHadronicBranch", ::analysis::TopHadronicBranch::Class_Version(), "/home/toodles/madness/analysis/include/Branches.hh", 411,
                  typeid(::analysis::TopHadronicBranch), DefineBehavior(ptr, ptr),
                  &::analysis::TopHadronicBranch::Dictionary, isa_proxy, 4,
                  sizeof(::analysis::TopHadronicBranch) );
      instance.SetNew(&new_analysiscLcLTopHadronicBranch);
      instance.SetNewArray(&newArray_analysiscLcLTopHadronicBranch);
      instance.SetDelete(&delete_analysiscLcLTopHadronicBranch);
      instance.SetDeleteArray(&deleteArray_analysiscLcLTopHadronicBranch);
      instance.SetDestructor(&destruct_analysiscLcLTopHadronicBranch);
      return &instance;
   }
   TGenericClassInfo *GenerateInitInstance(const ::analysis::TopHadronicBranch*)
   {
      return GenerateInitInstanceLocal((::analysis::TopHadronicBranch*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::analysis::TopHadronicBranch*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOT

namespace ROOT {
   void analysiscLcLTopLeptonicBranch_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_analysiscLcLTopLeptonicBranch(void *p = 0);
   static void *newArray_analysiscLcLTopLeptonicBranch(Long_t size, void *p);
   static void delete_analysiscLcLTopLeptonicBranch(void *p);
   static void deleteArray_analysiscLcLTopLeptonicBranch(void *p);
   static void destruct_analysiscLcLTopLeptonicBranch(void *p);

   // Function generating the singleton type initializer
   static TGenericClassInfo *GenerateInitInstanceLocal(const ::analysis::TopLeptonicBranch*)
   {
      ::analysis::TopLeptonicBranch *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::analysis::TopLeptonicBranch >(0);
      static ::ROOT::TGenericClassInfo 
         instance("analysis::TopLeptonicBranch", ::analysis::TopLeptonicBranch::Class_Version(), "/home/toodles/madness/analysis/include/Branches.hh", 456,
                  typeid(::analysis::TopLeptonicBranch), DefineBehavior(ptr, ptr),
                  &::analysis::TopLeptonicBranch::Dictionary, isa_proxy, 4,
                  sizeof(::analysis::TopLeptonicBranch) );
      instance.SetNew(&new_analysiscLcLTopLeptonicBranch);
      instance.SetNewArray(&newArray_analysiscLcLTopLeptonicBranch);
      instance.SetDelete(&delete_analysiscLcLTopLeptonicBranch);
      instance.SetDeleteArray(&deleteArray_analysiscLcLTopLeptonicBranch);
      instance.SetDestructor(&destruct_analysiscLcLTopLeptonicBranch);
      return &instance;
   }
   TGenericClassInfo *GenerateInitInstance(const ::analysis::TopLeptonicBranch*)
   {
      return GenerateInitInstanceLocal((::analysis::TopLeptonicBranch*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::analysis::TopLeptonicBranch*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOT

namespace ROOT {
   void analysiscLcLTopSemiBranch_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_analysiscLcLTopSemiBranch(void *p = 0);
   static void *newArray_analysiscLcLTopSemiBranch(Long_t size, void *p);
   static void delete_analysiscLcLTopSemiBranch(void *p);
   static void deleteArray_analysiscLcLTopSemiBranch(void *p);
   static void destruct_analysiscLcLTopSemiBranch(void *p);

   // Function generating the singleton type initializer
   static TGenericClassInfo *GenerateInitInstanceLocal(const ::analysis::TopSemiBranch*)
   {
      ::analysis::TopSemiBranch *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::analysis::TopSemiBranch >(0);
      static ::ROOT::TGenericClassInfo 
         instance("analysis::TopSemiBranch", ::analysis::TopSemiBranch::Class_Version(), "/home/toodles/madness/analysis/include/Branches.hh", 480,
                  typeid(::analysis::TopSemiBranch), DefineBehavior(ptr, ptr),
                  &::analysis::TopSemiBranch::Dictionary, isa_proxy, 4,
                  sizeof(::analysis::TopSemiBranch) );
      instance.SetNew(&new_analysiscLcLTopSemiBranch);
      instance.SetNewArray(&newArray_analysiscLcLTopSemiBranch);
      instance.SetDelete(&delete_analysiscLcLTopSemiBranch);
      instance.SetDeleteArray(&deleteArray_analysiscLcLTopSemiBranch);
      instance.SetDestructor(&destruct_analysiscLcLTopSemiBranch);
      return &instance;
   }
   TGenericClassInfo *GenerateInitInstance(const ::analysis::TopSemiBranch*)
   {
      return GenerateInitInstanceLocal((::analysis::TopSemiBranch*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::analysis::TopSemiBranch*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOT

namespace ROOT {
   void analysiscLcLHiggsBranch_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_analysiscLcLHiggsBranch(void *p = 0);
   static void *newArray_analysiscLcLHiggsBranch(Long_t size, void *p);
   static void delete_analysiscLcLHiggsBranch(void *p);
   static void deleteArray_analysiscLcLHiggsBranch(void *p);
   static void destruct_analysiscLcLHiggsBranch(void *p);

   // Function generating the singleton type initializer
   static TGenericClassInfo *GenerateInitInstanceLocal(const ::analysis::HiggsBranch*)
   {
      ::analysis::HiggsBranch *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::analysis::HiggsBranch >(0);
      static ::ROOT::TGenericClassInfo 
         instance("analysis::HiggsBranch", ::analysis::HiggsBranch::Class_Version(), "/home/toodles/madness/analysis/include/Branches.hh", 504,
                  typeid(::analysis::HiggsBranch), DefineBehavior(ptr, ptr),
                  &::analysis::HiggsBranch::Dictionary, isa_proxy, 4,
                  sizeof(::analysis::HiggsBranch) );
      instance.SetNew(&new_analysiscLcLHiggsBranch);
      instance.SetNewArray(&newArray_analysiscLcLHiggsBranch);
      instance.SetDelete(&delete_analysiscLcLHiggsBranch);
      instance.SetDeleteArray(&deleteArray_analysiscLcLHiggsBranch);
      instance.SetDestructor(&destruct_analysiscLcLHiggsBranch);
      return &instance;
   }
   TGenericClassInfo *GenerateInitInstance(const ::analysis::HiggsBranch*)
   {
      return GenerateInitInstanceLocal((::analysis::HiggsBranch*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::analysis::HiggsBranch*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOT

namespace ROOT {
   void analysiscLcLEventBottomTaggerBranch_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_analysiscLcLEventBottomTaggerBranch(void *p = 0);
   static void *newArray_analysiscLcLEventBottomTaggerBranch(Long_t size, void *p);
   static void delete_analysiscLcLEventBottomTaggerBranch(void *p);
   static void deleteArray_analysiscLcLEventBottomTaggerBranch(void *p);
   static void destruct_analysiscLcLEventBottomTaggerBranch(void *p);

   // Function generating the singleton type initializer
   static TGenericClassInfo *GenerateInitInstanceLocal(const ::analysis::EventBottomTaggerBranch*)
   {
      ::analysis::EventBottomTaggerBranch *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::analysis::EventBottomTaggerBranch >(0);
      static ::ROOT::TGenericClassInfo 
         instance("analysis::EventBottomTaggerBranch", ::analysis::EventBottomTaggerBranch::Class_Version(), "/home/toodles/madness/analysis/include/Branches.hh", 521,
                  typeid(::analysis::EventBottomTaggerBranch), DefineBehavior(ptr, ptr),
                  &::analysis::EventBottomTaggerBranch::Dictionary, isa_proxy, 4,
                  sizeof(::analysis::EventBottomTaggerBranch) );
      instance.SetNew(&new_analysiscLcLEventBottomTaggerBranch);
      instance.SetNewArray(&newArray_analysiscLcLEventBottomTaggerBranch);
      instance.SetDelete(&delete_analysiscLcLEventBottomTaggerBranch);
      instance.SetDeleteArray(&deleteArray_analysiscLcLEventBottomTaggerBranch);
      instance.SetDestructor(&destruct_analysiscLcLEventBottomTaggerBranch);
      return &instance;
   }
   TGenericClassInfo *GenerateInitInstance(const ::analysis::EventBottomTaggerBranch*)
   {
      return GenerateInitInstanceLocal((::analysis::EventBottomTaggerBranch*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::analysis::EventBottomTaggerBranch*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOT

namespace ROOT {
   void analysiscLcLHTopLeptonBranch_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_analysiscLcLHTopLeptonBranch(void *p = 0);
   static void *newArray_analysiscLcLHTopLeptonBranch(Long_t size, void *p);
   static void delete_analysiscLcLHTopLeptonBranch(void *p);
   static void deleteArray_analysiscLcLHTopLeptonBranch(void *p);
   static void destruct_analysiscLcLHTopLeptonBranch(void *p);

   // Function generating the singleton type initializer
   static TGenericClassInfo *GenerateInitInstanceLocal(const ::analysis::HTopLeptonBranch*)
   {
      ::analysis::HTopLeptonBranch *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::analysis::HTopLeptonBranch >(0);
      static ::ROOT::TGenericClassInfo 
         instance("analysis::HTopLeptonBranch", ::analysis::HTopLeptonBranch::Class_Version(), "/home/toodles/madness/analysis/include/Branches.hh", 558,
                  typeid(::analysis::HTopLeptonBranch), DefineBehavior(ptr, ptr),
                  &::analysis::HTopLeptonBranch::Dictionary, isa_proxy, 4,
                  sizeof(::analysis::HTopLeptonBranch) );
      instance.SetNew(&new_analysiscLcLHTopLeptonBranch);
      instance.SetNewArray(&newArray_analysiscLcLHTopLeptonBranch);
      instance.SetDelete(&delete_analysiscLcLHTopLeptonBranch);
      instance.SetDeleteArray(&deleteArray_analysiscLcLHTopLeptonBranch);
      instance.SetDestructor(&destruct_analysiscLcLHTopLeptonBranch);
      return &instance;
   }
   TGenericClassInfo *GenerateInitInstance(const ::analysis::HTopLeptonBranch*)
   {
      return GenerateInitInstanceLocal((::analysis::HTopLeptonBranch*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::analysis::HTopLeptonBranch*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOT

namespace ROOT {
   void analysiscLcLEventBranch_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_analysiscLcLEventBranch(void *p = 0);
   static void *newArray_analysiscLcLEventBranch(Long_t size, void *p);
   static void delete_analysiscLcLEventBranch(void *p);
   static void deleteArray_analysiscLcLEventBranch(void *p);
   static void destruct_analysiscLcLEventBranch(void *p);

   // Function generating the singleton type initializer
   static TGenericClassInfo *GenerateInitInstanceLocal(const ::analysis::EventBranch*)
   {
      ::analysis::EventBranch *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::analysis::EventBranch >(0);
      static ::ROOT::TGenericClassInfo 
         instance("analysis::EventBranch", ::analysis::EventBranch::Class_Version(), "/home/toodles/madness/analysis/include/Branches.hh", 591,
                  typeid(::analysis::EventBranch), DefineBehavior(ptr, ptr),
                  &::analysis::EventBranch::Dictionary, isa_proxy, 4,
                  sizeof(::analysis::EventBranch) );
      instance.SetNew(&new_analysiscLcLEventBranch);
      instance.SetNewArray(&newArray_analysiscLcLEventBranch);
      instance.SetDelete(&delete_analysiscLcLEventBranch);
      instance.SetDeleteArray(&deleteArray_analysiscLcLEventBranch);
      instance.SetDestructor(&destruct_analysiscLcLEventBranch);
      return &instance;
   }
   TGenericClassInfo *GenerateInitInstance(const ::analysis::EventBranch*)
   {
      return GenerateInitInstanceLocal((::analysis::EventBranch*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::analysis::EventBranch*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOT

      namespace analysis {
//______________________________________________________________________________
TClass *Branch::fgIsA = 0;  // static to hold class pointer

//______________________________________________________________________________
const char *Branch::Class_Name()
{
   return "analysis::Branch";
}

//______________________________________________________________________________
const char *Branch::ImplFileName()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::analysis::Branch*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int Branch::ImplFileLine()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::analysis::Branch*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void Branch::Dictionary()
{
   fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::analysis::Branch*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *Branch::Class()
{
   if (!fgIsA) fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::analysis::Branch*)0x0)->GetClass();
   return fgIsA;
}

} // namespace analysis
      namespace analysis {
//______________________________________________________________________________
TClass *InfoBranch::fgIsA = 0;  // static to hold class pointer

//______________________________________________________________________________
const char *InfoBranch::Class_Name()
{
   return "analysis::InfoBranch";
}

//______________________________________________________________________________
const char *InfoBranch::ImplFileName()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::analysis::InfoBranch*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int InfoBranch::ImplFileLine()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::analysis::InfoBranch*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void InfoBranch::Dictionary()
{
   fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::analysis::InfoBranch*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *InfoBranch::Class()
{
   if (!fgIsA) fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::analysis::InfoBranch*)0x0)->GetClass();
   return fgIsA;
}

} // namespace analysis
      namespace analysis {
//______________________________________________________________________________
TClass *HResultBranch::fgIsA = 0;  // static to hold class pointer

//______________________________________________________________________________
const char *HResultBranch::Class_Name()
{
   return "analysis::HResultBranch";
}

//______________________________________________________________________________
const char *HResultBranch::ImplFileName()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::analysis::HResultBranch*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int HResultBranch::ImplFileLine()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::analysis::HResultBranch*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void HResultBranch::Dictionary()
{
   fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::analysis::HResultBranch*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *HResultBranch::Class()
{
   if (!fgIsA) fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::analysis::HResultBranch*)0x0)->GetClass();
   return fgIsA;
}

} // namespace analysis
      namespace analysis {
//______________________________________________________________________________
TClass *ParticleBranch::fgIsA = 0;  // static to hold class pointer

//______________________________________________________________________________
const char *ParticleBranch::Class_Name()
{
   return "analysis::ParticleBranch";
}

//______________________________________________________________________________
const char *ParticleBranch::ImplFileName()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::analysis::ParticleBranch*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int ParticleBranch::ImplFileLine()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::analysis::ParticleBranch*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void ParticleBranch::Dictionary()
{
   fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::analysis::ParticleBranch*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *ParticleBranch::Class()
{
   if (!fgIsA) fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::analysis::ParticleBranch*)0x0)->GetClass();
   return fgIsA;
}

} // namespace analysis
      namespace analysis {
//______________________________________________________________________________
TClass *BottomBranch::fgIsA = 0;  // static to hold class pointer

//______________________________________________________________________________
const char *BottomBranch::Class_Name()
{
   return "analysis::BottomBranch";
}

//______________________________________________________________________________
const char *BottomBranch::ImplFileName()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::analysis::BottomBranch*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int BottomBranch::ImplFileLine()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::analysis::BottomBranch*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void BottomBranch::Dictionary()
{
   fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::analysis::BottomBranch*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *BottomBranch::Class()
{
   if (!fgIsA) fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::analysis::BottomBranch*)0x0)->GetClass();
   return fgIsA;
}

} // namespace analysis
      namespace analysis {
//______________________________________________________________________________
TClass *TauBranch::fgIsA = 0;  // static to hold class pointer

//______________________________________________________________________________
const char *TauBranch::Class_Name()
{
   return "analysis::TauBranch";
}

//______________________________________________________________________________
const char *TauBranch::ImplFileName()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::analysis::TauBranch*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int TauBranch::ImplFileLine()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::analysis::TauBranch*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void TauBranch::Dictionary()
{
   fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::analysis::TauBranch*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *TauBranch::Class()
{
   if (!fgIsA) fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::analysis::TauBranch*)0x0)->GetClass();
   return fgIsA;
}

} // namespace analysis
      namespace analysis {
//______________________________________________________________________________
TClass *PairBranch::fgIsA = 0;  // static to hold class pointer

//______________________________________________________________________________
const char *PairBranch::Class_Name()
{
   return "analysis::PairBranch";
}

//______________________________________________________________________________
const char *PairBranch::ImplFileName()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::analysis::PairBranch*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int PairBranch::ImplFileLine()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::analysis::PairBranch*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void PairBranch::Dictionary()
{
   fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::analysis::PairBranch*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *PairBranch::Class()
{
   if (!fgIsA) fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::analysis::PairBranch*)0x0)->GetClass();
   return fgIsA;
}

} // namespace analysis
      namespace analysis {
//______________________________________________________________________________
TClass *MultiBranch::fgIsA = 0;  // static to hold class pointer

//______________________________________________________________________________
const char *MultiBranch::Class_Name()
{
   return "analysis::MultiBranch";
}

//______________________________________________________________________________
const char *MultiBranch::ImplFileName()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::analysis::MultiBranch*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int MultiBranch::ImplFileLine()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::analysis::MultiBranch*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void MultiBranch::Dictionary()
{
   fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::analysis::MultiBranch*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *MultiBranch::Class()
{
   if (!fgIsA) fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::analysis::MultiBranch*)0x0)->GetClass();
   return fgIsA;
}

} // namespace analysis
      namespace analysis {
//______________________________________________________________________________
TClass *WHadronicBranch::fgIsA = 0;  // static to hold class pointer

//______________________________________________________________________________
const char *WHadronicBranch::Class_Name()
{
   return "analysis::WHadronicBranch";
}

//______________________________________________________________________________
const char *WHadronicBranch::ImplFileName()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::analysis::WHadronicBranch*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int WHadronicBranch::ImplFileLine()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::analysis::WHadronicBranch*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void WHadronicBranch::Dictionary()
{
   fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::analysis::WHadronicBranch*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *WHadronicBranch::Class()
{
   if (!fgIsA) fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::analysis::WHadronicBranch*)0x0)->GetClass();
   return fgIsA;
}

} // namespace analysis
      namespace analysis {
//______________________________________________________________________________
TClass *ZHadronicBranch::fgIsA = 0;  // static to hold class pointer

//______________________________________________________________________________
const char *ZHadronicBranch::Class_Name()
{
   return "analysis::ZHadronicBranch";
}

//______________________________________________________________________________
const char *ZHadronicBranch::ImplFileName()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::analysis::ZHadronicBranch*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int ZHadronicBranch::ImplFileLine()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::analysis::ZHadronicBranch*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void ZHadronicBranch::Dictionary()
{
   fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::analysis::ZHadronicBranch*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *ZHadronicBranch::Class()
{
   if (!fgIsA) fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::analysis::ZHadronicBranch*)0x0)->GetClass();
   return fgIsA;
}

} // namespace analysis
      namespace analysis {
//______________________________________________________________________________
TClass *JetPairBranch::fgIsA = 0;  // static to hold class pointer

//______________________________________________________________________________
const char *JetPairBranch::Class_Name()
{
   return "analysis::JetPairBranch";
}

//______________________________________________________________________________
const char *JetPairBranch::ImplFileName()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::analysis::JetPairBranch*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int JetPairBranch::ImplFileLine()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::analysis::JetPairBranch*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void JetPairBranch::Dictionary()
{
   fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::analysis::JetPairBranch*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *JetPairBranch::Class()
{
   if (!fgIsA) fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::analysis::JetPairBranch*)0x0)->GetClass();
   return fgIsA;
}

} // namespace analysis
      namespace analysis {
//______________________________________________________________________________
TClass *TripletJetPairBranch::fgIsA = 0;  // static to hold class pointer

//______________________________________________________________________________
const char *TripletJetPairBranch::Class_Name()
{
   return "analysis::TripletJetPairBranch";
}

//______________________________________________________________________________
const char *TripletJetPairBranch::ImplFileName()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::analysis::TripletJetPairBranch*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int TripletJetPairBranch::ImplFileLine()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::analysis::TripletJetPairBranch*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void TripletJetPairBranch::Dictionary()
{
   fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::analysis::TripletJetPairBranch*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *TripletJetPairBranch::Class()
{
   if (!fgIsA) fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::analysis::TripletJetPairBranch*)0x0)->GetClass();
   return fgIsA;
}

} // namespace analysis
      namespace analysis {
//______________________________________________________________________________
TClass *WSemiBranch::fgIsA = 0;  // static to hold class pointer

//______________________________________________________________________________
const char *WSemiBranch::Class_Name()
{
   return "analysis::WSemiBranch";
}

//______________________________________________________________________________
const char *WSemiBranch::ImplFileName()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::analysis::WSemiBranch*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int WSemiBranch::ImplFileLine()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::analysis::WSemiBranch*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void WSemiBranch::Dictionary()
{
   fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::analysis::WSemiBranch*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *WSemiBranch::Class()
{
   if (!fgIsA) fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::analysis::WSemiBranch*)0x0)->GetClass();
   return fgIsA;
}

} // namespace analysis
      namespace analysis {
//______________________________________________________________________________
TClass *TopHadronicBranch::fgIsA = 0;  // static to hold class pointer

//______________________________________________________________________________
const char *TopHadronicBranch::Class_Name()
{
   return "analysis::TopHadronicBranch";
}

//______________________________________________________________________________
const char *TopHadronicBranch::ImplFileName()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::analysis::TopHadronicBranch*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int TopHadronicBranch::ImplFileLine()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::analysis::TopHadronicBranch*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void TopHadronicBranch::Dictionary()
{
   fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::analysis::TopHadronicBranch*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *TopHadronicBranch::Class()
{
   if (!fgIsA) fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::analysis::TopHadronicBranch*)0x0)->GetClass();
   return fgIsA;
}

} // namespace analysis
      namespace analysis {
//______________________________________________________________________________
TClass *TopLeptonicBranch::fgIsA = 0;  // static to hold class pointer

//______________________________________________________________________________
const char *TopLeptonicBranch::Class_Name()
{
   return "analysis::TopLeptonicBranch";
}

//______________________________________________________________________________
const char *TopLeptonicBranch::ImplFileName()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::analysis::TopLeptonicBranch*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int TopLeptonicBranch::ImplFileLine()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::analysis::TopLeptonicBranch*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void TopLeptonicBranch::Dictionary()
{
   fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::analysis::TopLeptonicBranch*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *TopLeptonicBranch::Class()
{
   if (!fgIsA) fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::analysis::TopLeptonicBranch*)0x0)->GetClass();
   return fgIsA;
}

} // namespace analysis
      namespace analysis {
//______________________________________________________________________________
TClass *TopSemiBranch::fgIsA = 0;  // static to hold class pointer

//______________________________________________________________________________
const char *TopSemiBranch::Class_Name()
{
   return "analysis::TopSemiBranch";
}

//______________________________________________________________________________
const char *TopSemiBranch::ImplFileName()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::analysis::TopSemiBranch*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int TopSemiBranch::ImplFileLine()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::analysis::TopSemiBranch*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void TopSemiBranch::Dictionary()
{
   fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::analysis::TopSemiBranch*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *TopSemiBranch::Class()
{
   if (!fgIsA) fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::analysis::TopSemiBranch*)0x0)->GetClass();
   return fgIsA;
}

} // namespace analysis
      namespace analysis {
//______________________________________________________________________________
TClass *HiggsBranch::fgIsA = 0;  // static to hold class pointer

//______________________________________________________________________________
const char *HiggsBranch::Class_Name()
{
   return "analysis::HiggsBranch";
}

//______________________________________________________________________________
const char *HiggsBranch::ImplFileName()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::analysis::HiggsBranch*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int HiggsBranch::ImplFileLine()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::analysis::HiggsBranch*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void HiggsBranch::Dictionary()
{
   fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::analysis::HiggsBranch*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *HiggsBranch::Class()
{
   if (!fgIsA) fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::analysis::HiggsBranch*)0x0)->GetClass();
   return fgIsA;
}

} // namespace analysis
      namespace analysis {
//______________________________________________________________________________
TClass *EventBottomTaggerBranch::fgIsA = 0;  // static to hold class pointer

//______________________________________________________________________________
const char *EventBottomTaggerBranch::Class_Name()
{
   return "analysis::EventBottomTaggerBranch";
}

//______________________________________________________________________________
const char *EventBottomTaggerBranch::ImplFileName()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::analysis::EventBottomTaggerBranch*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int EventBottomTaggerBranch::ImplFileLine()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::analysis::EventBottomTaggerBranch*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void EventBottomTaggerBranch::Dictionary()
{
   fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::analysis::EventBottomTaggerBranch*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *EventBottomTaggerBranch::Class()
{
   if (!fgIsA) fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::analysis::EventBottomTaggerBranch*)0x0)->GetClass();
   return fgIsA;
}

} // namespace analysis
      namespace analysis {
//______________________________________________________________________________
TClass *HTopLeptonBranch::fgIsA = 0;  // static to hold class pointer

//______________________________________________________________________________
const char *HTopLeptonBranch::Class_Name()
{
   return "analysis::HTopLeptonBranch";
}

//______________________________________________________________________________
const char *HTopLeptonBranch::ImplFileName()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::analysis::HTopLeptonBranch*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int HTopLeptonBranch::ImplFileLine()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::analysis::HTopLeptonBranch*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void HTopLeptonBranch::Dictionary()
{
   fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::analysis::HTopLeptonBranch*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *HTopLeptonBranch::Class()
{
   if (!fgIsA) fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::analysis::HTopLeptonBranch*)0x0)->GetClass();
   return fgIsA;
}

} // namespace analysis
      namespace analysis {
//______________________________________________________________________________
TClass *EventBranch::fgIsA = 0;  // static to hold class pointer

//______________________________________________________________________________
const char *EventBranch::Class_Name()
{
   return "analysis::EventBranch";
}

//______________________________________________________________________________
const char *EventBranch::ImplFileName()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::analysis::EventBranch*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int EventBranch::ImplFileLine()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::analysis::EventBranch*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void EventBranch::Dictionary()
{
   fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::analysis::EventBranch*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *EventBranch::Class()
{
   if (!fgIsA) fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::analysis::EventBranch*)0x0)->GetClass();
   return fgIsA;
}

} // namespace analysis
      namespace analysis {
//______________________________________________________________________________
void Branch::Streamer(TBuffer &R__b)
{
   // Stream an object of class analysis::Branch.

   if (R__b.IsReading()) {
      R__b.ReadClassBuffer(analysis::Branch::Class(),this);
   } else {
      R__b.WriteClassBuffer(analysis::Branch::Class(),this);
   }
}

} // namespace analysis
//______________________________________________________________________________
      namespace analysis {
void Branch::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class analysis::Branch.
      TClass *R__cl = ::analysis::Branch::IsA();
      if (R__cl || R__insp.IsA()) { }
      TObject::ShowMembers(R__insp);
}

} // namespace analysis
namespace ROOT {
   // Wrappers around operator new
   static void *new_analysiscLcLBranch(void *p) {
      return  p ? new(p) ::analysis::Branch : new ::analysis::Branch;
   }
   static void *newArray_analysiscLcLBranch(Long_t nElements, void *p) {
      return p ? new(p) ::analysis::Branch[nElements] : new ::analysis::Branch[nElements];
   }
   // Wrapper around operator delete
   static void delete_analysiscLcLBranch(void *p) {
      delete ((::analysis::Branch*)p);
   }
   static void deleteArray_analysiscLcLBranch(void *p) {
      delete [] ((::analysis::Branch*)p);
   }
   static void destruct_analysiscLcLBranch(void *p) {
      typedef ::analysis::Branch current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOT for class ::analysis::Branch

      namespace analysis {
//______________________________________________________________________________
void InfoBranch::Streamer(TBuffer &R__b)
{
   // Stream an object of class analysis::InfoBranch.

   if (R__b.IsReading()) {
      R__b.ReadClassBuffer(analysis::InfoBranch::Class(),this);
   } else {
      R__b.WriteClassBuffer(analysis::InfoBranch::Class(),this);
   }
}

} // namespace analysis
//______________________________________________________________________________
      namespace analysis {
void InfoBranch::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class analysis::InfoBranch.
      TClass *R__cl = ::analysis::InfoBranch::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "Crosssection", &Crosssection);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "CrosssectionError", &CrosssectionError);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "Mass", &Mass);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "EventNumber", &EventNumber);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "PreCutNumber", &PreCutNumber);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "Name", (void*)&Name);
      R__insp.InspectMember("string", (void*)&Name, "Name.", false);
      //This works around a msvc bug and should be harmless on other platforms
      typedef analysis::Branch baseClass1;
      baseClass1::ShowMembers(R__insp);
}

} // namespace analysis
namespace ROOT {
   // Wrappers around operator new
   static void *new_analysiscLcLInfoBranch(void *p) {
      return  p ? new(p) ::analysis::InfoBranch : new ::analysis::InfoBranch;
   }
   static void *newArray_analysiscLcLInfoBranch(Long_t nElements, void *p) {
      return p ? new(p) ::analysis::InfoBranch[nElements] : new ::analysis::InfoBranch[nElements];
   }
   // Wrapper around operator delete
   static void delete_analysiscLcLInfoBranch(void *p) {
      delete ((::analysis::InfoBranch*)p);
   }
   static void deleteArray_analysiscLcLInfoBranch(void *p) {
      delete [] ((::analysis::InfoBranch*)p);
   }
   static void destruct_analysiscLcLInfoBranch(void *p) {
      typedef ::analysis::InfoBranch current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOT for class ::analysis::InfoBranch

      namespace analysis {
//______________________________________________________________________________
void HResultBranch::Streamer(TBuffer &R__b)
{
   // Stream an object of class analysis::HResultBranch.

   if (R__b.IsReading()) {
      R__b.ReadClassBuffer(analysis::HResultBranch::Class(),this);
   } else {
      R__b.WriteClassBuffer(analysis::HResultBranch::Class(),this);
   }
}

} // namespace analysis
//______________________________________________________________________________
      namespace analysis {
void HResultBranch::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class analysis::HResultBranch.
      TClass *R__cl = ::analysis::HResultBranch::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "Bdt", &Bdt);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "Tag", &Tag);
      //This works around a msvc bug and should be harmless on other platforms
      typedef analysis::Branch baseClass1;
      baseClass1::ShowMembers(R__insp);
}

} // namespace analysis
namespace ROOT {
   // Wrappers around operator new
   static void *new_analysiscLcLHResultBranch(void *p) {
      return  p ? new(p) ::analysis::HResultBranch : new ::analysis::HResultBranch;
   }
   static void *newArray_analysiscLcLHResultBranch(Long_t nElements, void *p) {
      return p ? new(p) ::analysis::HResultBranch[nElements] : new ::analysis::HResultBranch[nElements];
   }
   // Wrapper around operator delete
   static void delete_analysiscLcLHResultBranch(void *p) {
      delete ((::analysis::HResultBranch*)p);
   }
   static void deleteArray_analysiscLcLHResultBranch(void *p) {
      delete [] ((::analysis::HResultBranch*)p);
   }
   static void destruct_analysiscLcLHResultBranch(void *p) {
      typedef ::analysis::HResultBranch current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOT for class ::analysis::HResultBranch

      namespace analysis {
//______________________________________________________________________________
void ParticleBranch::Streamer(TBuffer &R__b)
{
   // Stream an object of class analysis::ParticleBranch.

   if (R__b.IsReading()) {
      R__b.ReadClassBuffer(analysis::ParticleBranch::Class(),this);
   } else {
      R__b.WriteClassBuffer(analysis::ParticleBranch::Class(),this);
   }
}

} // namespace analysis
//______________________________________________________________________________
      namespace analysis {
void ParticleBranch::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class analysis::ParticleBranch.
      TClass *R__cl = ::analysis::ParticleBranch::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "Mass", &Mass);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "Pt", &Pt);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "Rap", &Rap);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "Phi", &Phi);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "Charge", &Charge);
      //This works around a msvc bug and should be harmless on other platforms
      typedef analysis::Branch baseClass1;
      baseClass1::ShowMembers(R__insp);
}

} // namespace analysis
namespace ROOT {
   // Wrappers around operator new
   static void *new_analysiscLcLParticleBranch(void *p) {
      return  p ? new(p) ::analysis::ParticleBranch : new ::analysis::ParticleBranch;
   }
   static void *newArray_analysiscLcLParticleBranch(Long_t nElements, void *p) {
      return p ? new(p) ::analysis::ParticleBranch[nElements] : new ::analysis::ParticleBranch[nElements];
   }
   // Wrapper around operator delete
   static void delete_analysiscLcLParticleBranch(void *p) {
      delete ((::analysis::ParticleBranch*)p);
   }
   static void deleteArray_analysiscLcLParticleBranch(void *p) {
      delete [] ((::analysis::ParticleBranch*)p);
   }
   static void destruct_analysiscLcLParticleBranch(void *p) {
      typedef ::analysis::ParticleBranch current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOT for class ::analysis::ParticleBranch

      namespace analysis {
//______________________________________________________________________________
void BottomBranch::Streamer(TBuffer &R__b)
{
   // Stream an object of class analysis::BottomBranch.

   if (R__b.IsReading()) {
      R__b.ReadClassBuffer(analysis::BottomBranch::Class(),this);
   } else {
      R__b.WriteClassBuffer(analysis::BottomBranch::Class(),this);
   }
}

} // namespace analysis
//______________________________________________________________________________
      namespace analysis {
void BottomBranch::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class analysis::BottomBranch.
      TClass *R__cl = ::analysis::BottomBranch::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "VertexMass", &VertexMass);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "MaxDisplacement", &MaxDisplacement);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "MeanDisplacement", &MeanDisplacement);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "SumDisplacement", &SumDisplacement);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "Multipliticity", &Multipliticity);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "DeltaR", &DeltaR);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "Spread", &Spread);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "VertexDeltaR", &VertexDeltaR);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "VertexSpread", &VertexSpread);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "EnergyFraction", &EnergyFraction);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "Tag", &Tag);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "Bdt", &Bdt);
      //This works around a msvc bug and should be harmless on other platforms
      typedef analysis::ParticleBranch baseClass1;
      baseClass1::ShowMembers(R__insp);
}

} // namespace analysis
namespace ROOT {
   // Wrappers around operator new
   static void *new_analysiscLcLBottomBranch(void *p) {
      return  p ? new(p) ::analysis::BottomBranch : new ::analysis::BottomBranch;
   }
   static void *newArray_analysiscLcLBottomBranch(Long_t nElements, void *p) {
      return p ? new(p) ::analysis::BottomBranch[nElements] : new ::analysis::BottomBranch[nElements];
   }
   // Wrapper around operator delete
   static void delete_analysiscLcLBottomBranch(void *p) {
      delete ((::analysis::BottomBranch*)p);
   }
   static void deleteArray_analysiscLcLBottomBranch(void *p) {
      delete [] ((::analysis::BottomBranch*)p);
   }
   static void destruct_analysiscLcLBottomBranch(void *p) {
      typedef ::analysis::BottomBranch current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOT for class ::analysis::BottomBranch

      namespace analysis {
//______________________________________________________________________________
void TauBranch::Streamer(TBuffer &R__b)
{
   // Stream an object of class analysis::TauBranch.

   if (R__b.IsReading()) {
      R__b.ReadClassBuffer(analysis::TauBranch::Class(),this);
   } else {
      R__b.WriteClassBuffer(analysis::TauBranch::Class(),this);
   }
}

} // namespace analysis
//______________________________________________________________________________
      namespace analysis {
void TauBranch::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class analysis::TauBranch.
      TClass *R__cl = ::analysis::TauBranch::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "EmRadius", &EmRadius);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "TrackRadius", &TrackRadius);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "MomentumFraction", &MomentumFraction);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "CoreEnergyFraction", &CoreEnergyFraction);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "EmFraction", &EmFraction);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "ClusterMass", &ClusterMass);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "TrackMass", &TrackMass);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "FlightPath", &FlightPath);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "TrtHtFraction", &TrtHtFraction);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "Tag", &Tag);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "Bdt", &Bdt);
      //This works around a msvc bug and should be harmless on other platforms
      typedef analysis::ParticleBranch baseClass1;
      baseClass1::ShowMembers(R__insp);
}

} // namespace analysis
namespace ROOT {
   // Wrappers around operator new
   static void *new_analysiscLcLTauBranch(void *p) {
      return  p ? new(p) ::analysis::TauBranch : new ::analysis::TauBranch;
   }
   static void *newArray_analysiscLcLTauBranch(Long_t nElements, void *p) {
      return p ? new(p) ::analysis::TauBranch[nElements] : new ::analysis::TauBranch[nElements];
   }
   // Wrapper around operator delete
   static void delete_analysiscLcLTauBranch(void *p) {
      delete ((::analysis::TauBranch*)p);
   }
   static void deleteArray_analysiscLcLTauBranch(void *p) {
      delete [] ((::analysis::TauBranch*)p);
   }
   static void destruct_analysiscLcLTauBranch(void *p) {
      typedef ::analysis::TauBranch current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOT for class ::analysis::TauBranch

      namespace analysis {
//______________________________________________________________________________
void PairBranch::Streamer(TBuffer &R__b)
{
   // Stream an object of class analysis::PairBranch.

   if (R__b.IsReading()) {
      R__b.ReadClassBuffer(analysis::PairBranch::Class(),this);
   } else {
      R__b.WriteClassBuffer(analysis::PairBranch::Class(),this);
   }
}

} // namespace analysis
//______________________________________________________________________________
      namespace analysis {
void PairBranch::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class analysis::PairBranch.
      TClass *R__cl = ::analysis::PairBranch::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "Ht", &Ht);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "DeltaPt", &DeltaPt);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "DeltaM", &DeltaM);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "DeltaRap", &DeltaRap);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "DeltaPhi", &DeltaPhi);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "DeltaR", &DeltaR);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "Rho", &Rho);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "Bdt1", &Bdt1);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "Bdt2", &Bdt2);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "Bdt", &Bdt);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "Tag", &Tag);
      //This works around a msvc bug and should be harmless on other platforms
      typedef analysis::ParticleBranch baseClass1;
      baseClass1::ShowMembers(R__insp);
}

} // namespace analysis
namespace ROOT {
   // Wrappers around operator new
   static void *new_analysiscLcLPairBranch(void *p) {
      return  p ? new(p) ::analysis::PairBranch : new ::analysis::PairBranch;
   }
   static void *newArray_analysiscLcLPairBranch(Long_t nElements, void *p) {
      return p ? new(p) ::analysis::PairBranch[nElements] : new ::analysis::PairBranch[nElements];
   }
   // Wrapper around operator delete
   static void delete_analysiscLcLPairBranch(void *p) {
      delete ((::analysis::PairBranch*)p);
   }
   static void deleteArray_analysiscLcLPairBranch(void *p) {
      delete [] ((::analysis::PairBranch*)p);
   }
   static void destruct_analysiscLcLPairBranch(void *p) {
      typedef ::analysis::PairBranch current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOT for class ::analysis::PairBranch

      namespace analysis {
//______________________________________________________________________________
void MultiBranch::Streamer(TBuffer &R__b)
{
   // Stream an object of class analysis::MultiBranch.

   if (R__b.IsReading()) {
      R__b.ReadClassBuffer(analysis::MultiBranch::Class(),this);
   } else {
      R__b.WriteClassBuffer(analysis::MultiBranch::Class(),this);
   }
}

} // namespace analysis
//______________________________________________________________________________
      namespace analysis {
void MultiBranch::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class analysis::MultiBranch.
      TClass *R__cl = ::analysis::MultiBranch::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "DeltaHt", &DeltaHt);
      //This works around a msvc bug and should be harmless on other platforms
      typedef analysis::PairBranch baseClass1;
      baseClass1::ShowMembers(R__insp);
}

} // namespace analysis
namespace ROOT {
   // Wrappers around operator new
   static void *new_analysiscLcLMultiBranch(void *p) {
      return  p ? new(p) ::analysis::MultiBranch : new ::analysis::MultiBranch;
   }
   static void *newArray_analysiscLcLMultiBranch(Long_t nElements, void *p) {
      return p ? new(p) ::analysis::MultiBranch[nElements] : new ::analysis::MultiBranch[nElements];
   }
   // Wrapper around operator delete
   static void delete_analysiscLcLMultiBranch(void *p) {
      delete ((::analysis::MultiBranch*)p);
   }
   static void deleteArray_analysiscLcLMultiBranch(void *p) {
      delete [] ((::analysis::MultiBranch*)p);
   }
   static void destruct_analysiscLcLMultiBranch(void *p) {
      typedef ::analysis::MultiBranch current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOT for class ::analysis::MultiBranch

      namespace analysis {
//______________________________________________________________________________
void WHadronicBranch::Streamer(TBuffer &R__b)
{
   // Stream an object of class analysis::WHadronicBranch.

   if (R__b.IsReading()) {
      R__b.ReadClassBuffer(analysis::WHadronicBranch::Class(),this);
   } else {
      R__b.WriteClassBuffer(analysis::WHadronicBranch::Class(),this);
   }
}

} // namespace analysis
//______________________________________________________________________________
      namespace analysis {
void WHadronicBranch::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class analysis::WHadronicBranch.
      TClass *R__cl = ::analysis::WHadronicBranch::IsA();
      if (R__cl || R__insp.IsA()) { }
      //This works around a msvc bug and should be harmless on other platforms
      typedef analysis::PairBranch baseClass1;
      baseClass1::ShowMembers(R__insp);
}

} // namespace analysis
namespace ROOT {
   // Wrappers around operator new
   static void *new_analysiscLcLWHadronicBranch(void *p) {
      return  p ? new(p) ::analysis::WHadronicBranch : new ::analysis::WHadronicBranch;
   }
   static void *newArray_analysiscLcLWHadronicBranch(Long_t nElements, void *p) {
      return p ? new(p) ::analysis::WHadronicBranch[nElements] : new ::analysis::WHadronicBranch[nElements];
   }
   // Wrapper around operator delete
   static void delete_analysiscLcLWHadronicBranch(void *p) {
      delete ((::analysis::WHadronicBranch*)p);
   }
   static void deleteArray_analysiscLcLWHadronicBranch(void *p) {
      delete [] ((::analysis::WHadronicBranch*)p);
   }
   static void destruct_analysiscLcLWHadronicBranch(void *p) {
      typedef ::analysis::WHadronicBranch current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOT for class ::analysis::WHadronicBranch

      namespace analysis {
//______________________________________________________________________________
void ZHadronicBranch::Streamer(TBuffer &R__b)
{
   // Stream an object of class analysis::ZHadronicBranch.

   if (R__b.IsReading()) {
      R__b.ReadClassBuffer(analysis::ZHadronicBranch::Class(),this);
   } else {
      R__b.WriteClassBuffer(analysis::ZHadronicBranch::Class(),this);
   }
}

} // namespace analysis
//______________________________________________________________________________
      namespace analysis {
void ZHadronicBranch::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class analysis::ZHadronicBranch.
      TClass *R__cl = ::analysis::ZHadronicBranch::IsA();
      if (R__cl || R__insp.IsA()) { }
      //This works around a msvc bug and should be harmless on other platforms
      typedef analysis::PairBranch baseClass1;
      baseClass1::ShowMembers(R__insp);
}

} // namespace analysis
namespace ROOT {
   // Wrappers around operator new
   static void *new_analysiscLcLZHadronicBranch(void *p) {
      return  p ? new(p) ::analysis::ZHadronicBranch : new ::analysis::ZHadronicBranch;
   }
   static void *newArray_analysiscLcLZHadronicBranch(Long_t nElements, void *p) {
      return p ? new(p) ::analysis::ZHadronicBranch[nElements] : new ::analysis::ZHadronicBranch[nElements];
   }
   // Wrapper around operator delete
   static void delete_analysiscLcLZHadronicBranch(void *p) {
      delete ((::analysis::ZHadronicBranch*)p);
   }
   static void deleteArray_analysiscLcLZHadronicBranch(void *p) {
      delete [] ((::analysis::ZHadronicBranch*)p);
   }
   static void destruct_analysiscLcLZHadronicBranch(void *p) {
      typedef ::analysis::ZHadronicBranch current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOT for class ::analysis::ZHadronicBranch

      namespace analysis {
//______________________________________________________________________________
void JetPairBranch::Streamer(TBuffer &R__b)
{
   // Stream an object of class analysis::JetPairBranch.

   if (R__b.IsReading()) {
      R__b.ReadClassBuffer(analysis::JetPairBranch::Class(),this);
   } else {
      R__b.WriteClassBuffer(analysis::JetPairBranch::Class(),this);
   }
}

} // namespace analysis
//______________________________________________________________________________
      namespace analysis {
void JetPairBranch::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class analysis::JetPairBranch.
      TClass *R__cl = ::analysis::JetPairBranch::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "DeltaM", &DeltaM);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "Jet1Mass", &Jet1Mass);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "Jet1Pt", &Jet1Pt);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "Jet1Rap", &Jet1Rap);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "Jet1Phi", &Jet1Phi);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "Jet1Bdt", &Jet1Bdt);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "Jet1BTag", &Jet1BTag);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "Jet2Mass", &Jet2Mass);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "Jet2Pt", &Jet2Pt);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "Jet2Rap", &Jet2Rap);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "Jet2Phi", &Jet2Phi);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "Jet2Bdt", &Jet2Bdt);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "Jet2BTag", &Jet2BTag);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "BdtRatio11", &BdtRatio11);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "BdtRatio12", &BdtRatio12);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "BdtRatio13", &BdtRatio13);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "BdtRatio14", &BdtRatio14);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "BdtRatio21", &BdtRatio21);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "BdtRatio22", &BdtRatio22);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "BdtRatio23", &BdtRatio23);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "BdtRatio24", &BdtRatio24);
      //This works around a msvc bug and should be harmless on other platforms
      typedef analysis::PairBranch baseClass1;
      baseClass1::ShowMembers(R__insp);
}

} // namespace analysis
namespace ROOT {
   // Wrappers around operator new
   static void *new_analysiscLcLJetPairBranch(void *p) {
      return  p ? new(p) ::analysis::JetPairBranch : new ::analysis::JetPairBranch;
   }
   static void *newArray_analysiscLcLJetPairBranch(Long_t nElements, void *p) {
      return p ? new(p) ::analysis::JetPairBranch[nElements] : new ::analysis::JetPairBranch[nElements];
   }
   // Wrapper around operator delete
   static void delete_analysiscLcLJetPairBranch(void *p) {
      delete ((::analysis::JetPairBranch*)p);
   }
   static void deleteArray_analysiscLcLJetPairBranch(void *p) {
      delete [] ((::analysis::JetPairBranch*)p);
   }
   static void destruct_analysiscLcLJetPairBranch(void *p) {
      typedef ::analysis::JetPairBranch current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOT for class ::analysis::JetPairBranch

      namespace analysis {
//______________________________________________________________________________
void TripletJetPairBranch::Streamer(TBuffer &R__b)
{
   // Stream an object of class analysis::TripletJetPairBranch.

   if (R__b.IsReading()) {
      R__b.ReadClassBuffer(analysis::TripletJetPairBranch::Class(),this);
   } else {
      R__b.WriteClassBuffer(analysis::TripletJetPairBranch::Class(),this);
   }
}

} // namespace analysis
//______________________________________________________________________________
      namespace analysis {
void TripletJetPairBranch::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class analysis::TripletJetPairBranch.
      TClass *R__cl = ::analysis::TripletJetPairBranch::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "BottomMass", &BottomMass);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "BottomPt", &BottomPt);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "BottomRap", &BottomRap);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "BottomPhi", &BottomPhi);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "BottomBdt", &BottomBdt);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "BottomBTag", &BottomBTag);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "TopMass", &TopMass);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "TopPt", &TopPt);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "TopRap", &TopRap);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "TopPhi", &TopPhi);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "TopBdt", &TopBdt);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "TopBTag", &TopBTag);
      //This works around a msvc bug and should be harmless on other platforms
      typedef analysis::PairBranch baseClass1;
      baseClass1::ShowMembers(R__insp);
}

} // namespace analysis
namespace ROOT {
   // Wrappers around operator new
   static void *new_analysiscLcLTripletJetPairBranch(void *p) {
      return  p ? new(p) ::analysis::TripletJetPairBranch : new ::analysis::TripletJetPairBranch;
   }
   static void *newArray_analysiscLcLTripletJetPairBranch(Long_t nElements, void *p) {
      return p ? new(p) ::analysis::TripletJetPairBranch[nElements] : new ::analysis::TripletJetPairBranch[nElements];
   }
   // Wrapper around operator delete
   static void delete_analysiscLcLTripletJetPairBranch(void *p) {
      delete ((::analysis::TripletJetPairBranch*)p);
   }
   static void deleteArray_analysiscLcLTripletJetPairBranch(void *p) {
      delete [] ((::analysis::TripletJetPairBranch*)p);
   }
   static void destruct_analysiscLcLTripletJetPairBranch(void *p) {
      typedef ::analysis::TripletJetPairBranch current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOT for class ::analysis::TripletJetPairBranch

      namespace analysis {
//______________________________________________________________________________
void WSemiBranch::Streamer(TBuffer &R__b)
{
   // Stream an object of class analysis::WSemiBranch.

   if (R__b.IsReading()) {
      R__b.ReadClassBuffer(analysis::WSemiBranch::Class(),this);
   } else {
      R__b.WriteClassBuffer(analysis::WSemiBranch::Class(),this);
   }
}

} // namespace analysis
//______________________________________________________________________________
      namespace analysis {
void WSemiBranch::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class analysis::WSemiBranch.
      TClass *R__cl = ::analysis::WSemiBranch::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "LeptonPt", &LeptonPt);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "NeutrinoPt", &NeutrinoPt);
      //This works around a msvc bug and should be harmless on other platforms
      typedef analysis::PairBranch baseClass1;
      baseClass1::ShowMembers(R__insp);
}

} // namespace analysis
namespace ROOT {
   // Wrappers around operator new
   static void *new_analysiscLcLWSemiBranch(void *p) {
      return  p ? new(p) ::analysis::WSemiBranch : new ::analysis::WSemiBranch;
   }
   static void *newArray_analysiscLcLWSemiBranch(Long_t nElements, void *p) {
      return p ? new(p) ::analysis::WSemiBranch[nElements] : new ::analysis::WSemiBranch[nElements];
   }
   // Wrapper around operator delete
   static void delete_analysiscLcLWSemiBranch(void *p) {
      delete ((::analysis::WSemiBranch*)p);
   }
   static void deleteArray_analysiscLcLWSemiBranch(void *p) {
      delete [] ((::analysis::WSemiBranch*)p);
   }
   static void destruct_analysiscLcLWSemiBranch(void *p) {
      typedef ::analysis::WSemiBranch current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOT for class ::analysis::WSemiBranch

      namespace analysis {
//______________________________________________________________________________
void TopHadronicBranch::Streamer(TBuffer &R__b)
{
   // Stream an object of class analysis::TopHadronicBranch.

   if (R__b.IsReading()) {
      R__b.ReadClassBuffer(analysis::TopHadronicBranch::Class(),this);
   } else {
      R__b.WriteClassBuffer(analysis::TopHadronicBranch::Class(),this);
   }
}

} // namespace analysis
//______________________________________________________________________________
      namespace analysis {
void TopHadronicBranch::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class analysis::TopHadronicBranch.
      TClass *R__cl = ::analysis::TopHadronicBranch::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "BottomPt", &BottomPt);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "WPt", &WPt);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "WBdt", &WBdt);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "BBdt", &BBdt);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "Tau1_1", &Tau1_1);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "Tau2_1", &Tau2_1);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "Tau3_1", &Tau3_1);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "Tau21_1", &Tau21_1);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "Tau32_1", &Tau32_1);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "Tau1_2", &Tau1_2);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "Tau2_2", &Tau2_2);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "Tau3_2", &Tau3_2);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "Tau21_2", &Tau21_2);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "Tau32_2", &Tau32_2);
      //This works around a msvc bug and should be harmless on other platforms
      typedef analysis::MultiBranch baseClass1;
      baseClass1::ShowMembers(R__insp);
}

} // namespace analysis
namespace ROOT {
   // Wrappers around operator new
   static void *new_analysiscLcLTopHadronicBranch(void *p) {
      return  p ? new(p) ::analysis::TopHadronicBranch : new ::analysis::TopHadronicBranch;
   }
   static void *newArray_analysiscLcLTopHadronicBranch(Long_t nElements, void *p) {
      return p ? new(p) ::analysis::TopHadronicBranch[nElements] : new ::analysis::TopHadronicBranch[nElements];
   }
   // Wrapper around operator delete
   static void delete_analysiscLcLTopHadronicBranch(void *p) {
      delete ((::analysis::TopHadronicBranch*)p);
   }
   static void deleteArray_analysiscLcLTopHadronicBranch(void *p) {
      delete [] ((::analysis::TopHadronicBranch*)p);
   }
   static void destruct_analysiscLcLTopHadronicBranch(void *p) {
      typedef ::analysis::TopHadronicBranch current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOT for class ::analysis::TopHadronicBranch

      namespace analysis {
//______________________________________________________________________________
void TopLeptonicBranch::Streamer(TBuffer &R__b)
{
   // Stream an object of class analysis::TopLeptonicBranch.

   if (R__b.IsReading()) {
      R__b.ReadClassBuffer(analysis::TopLeptonicBranch::Class(),this);
   } else {
      R__b.WriteClassBuffer(analysis::TopLeptonicBranch::Class(),this);
   }
}

} // namespace analysis
//______________________________________________________________________________
      namespace analysis {
void TopLeptonicBranch::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class analysis::TopLeptonicBranch.
      TClass *R__cl = ::analysis::TopLeptonicBranch::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "BottomPt", &BottomPt);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "LeptonPt", &LeptonPt);
      //This works around a msvc bug and should be harmless on other platforms
      typedef analysis::PairBranch baseClass1;
      baseClass1::ShowMembers(R__insp);
}

} // namespace analysis
namespace ROOT {
   // Wrappers around operator new
   static void *new_analysiscLcLTopLeptonicBranch(void *p) {
      return  p ? new(p) ::analysis::TopLeptonicBranch : new ::analysis::TopLeptonicBranch;
   }
   static void *newArray_analysiscLcLTopLeptonicBranch(Long_t nElements, void *p) {
      return p ? new(p) ::analysis::TopLeptonicBranch[nElements] : new ::analysis::TopLeptonicBranch[nElements];
   }
   // Wrapper around operator delete
   static void delete_analysiscLcLTopLeptonicBranch(void *p) {
      delete ((::analysis::TopLeptonicBranch*)p);
   }
   static void deleteArray_analysiscLcLTopLeptonicBranch(void *p) {
      delete [] ((::analysis::TopLeptonicBranch*)p);
   }
   static void destruct_analysiscLcLTopLeptonicBranch(void *p) {
      typedef ::analysis::TopLeptonicBranch current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOT for class ::analysis::TopLeptonicBranch

      namespace analysis {
//______________________________________________________________________________
void TopSemiBranch::Streamer(TBuffer &R__b)
{
   // Stream an object of class analysis::TopSemiBranch.

   if (R__b.IsReading()) {
      R__b.ReadClassBuffer(analysis::TopSemiBranch::Class(),this);
   } else {
      R__b.WriteClassBuffer(analysis::TopSemiBranch::Class(),this);
   }
}

} // namespace analysis
//______________________________________________________________________________
      namespace analysis {
void TopSemiBranch::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class analysis::TopSemiBranch.
      TClass *R__cl = ::analysis::TopSemiBranch::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "BottomPt", &BottomPt);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "WPt", &WPt);
      //This works around a msvc bug and should be harmless on other platforms
      typedef analysis::MultiBranch baseClass1;
      baseClass1::ShowMembers(R__insp);
}

} // namespace analysis
namespace ROOT {
   // Wrappers around operator new
   static void *new_analysiscLcLTopSemiBranch(void *p) {
      return  p ? new(p) ::analysis::TopSemiBranch : new ::analysis::TopSemiBranch;
   }
   static void *newArray_analysiscLcLTopSemiBranch(Long_t nElements, void *p) {
      return p ? new(p) ::analysis::TopSemiBranch[nElements] : new ::analysis::TopSemiBranch[nElements];
   }
   // Wrapper around operator delete
   static void delete_analysiscLcLTopSemiBranch(void *p) {
      delete ((::analysis::TopSemiBranch*)p);
   }
   static void deleteArray_analysiscLcLTopSemiBranch(void *p) {
      delete [] ((::analysis::TopSemiBranch*)p);
   }
   static void destruct_analysiscLcLTopSemiBranch(void *p) {
      typedef ::analysis::TopSemiBranch current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOT for class ::analysis::TopSemiBranch

      namespace analysis {
//______________________________________________________________________________
void HiggsBranch::Streamer(TBuffer &R__b)
{
   // Stream an object of class analysis::HiggsBranch.

   if (R__b.IsReading()) {
      R__b.ReadClassBuffer(analysis::HiggsBranch::Class(),this);
   } else {
      R__b.WriteClassBuffer(analysis::HiggsBranch::Class(),this);
   }
}

} // namespace analysis
//______________________________________________________________________________
      namespace analysis {
void HiggsBranch::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class analysis::HiggsBranch.
      TClass *R__cl = ::analysis::HiggsBranch::IsA();
      if (R__cl || R__insp.IsA()) { }
      //This works around a msvc bug and should be harmless on other platforms
      typedef analysis::PairBranch baseClass1;
      baseClass1::ShowMembers(R__insp);
}

} // namespace analysis
namespace ROOT {
   // Wrappers around operator new
   static void *new_analysiscLcLHiggsBranch(void *p) {
      return  p ? new(p) ::analysis::HiggsBranch : new ::analysis::HiggsBranch;
   }
   static void *newArray_analysiscLcLHiggsBranch(Long_t nElements, void *p) {
      return p ? new(p) ::analysis::HiggsBranch[nElements] : new ::analysis::HiggsBranch[nElements];
   }
   // Wrapper around operator delete
   static void delete_analysiscLcLHiggsBranch(void *p) {
      delete ((::analysis::HiggsBranch*)p);
   }
   static void deleteArray_analysiscLcLHiggsBranch(void *p) {
      delete [] ((::analysis::HiggsBranch*)p);
   }
   static void destruct_analysiscLcLHiggsBranch(void *p) {
      typedef ::analysis::HiggsBranch current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOT for class ::analysis::HiggsBranch

      namespace analysis {
//______________________________________________________________________________
void EventBottomTaggerBranch::Streamer(TBuffer &R__b)
{
   // Stream an object of class analysis::EventBottomTaggerBranch.

   if (R__b.IsReading()) {
      R__b.ReadClassBuffer(analysis::EventBottomTaggerBranch::Class(),this);
   } else {
      R__b.WriteClassBuffer(analysis::EventBottomTaggerBranch::Class(),this);
   }
}

} // namespace analysis
//______________________________________________________________________________
      namespace analysis {
void EventBottomTaggerBranch::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class analysis::EventBottomTaggerBranch.
      TClass *R__cl = ::analysis::EventBottomTaggerBranch::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "Bdt", &Bdt);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "Tag", &Tag);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "BottomBdt1", &BottomBdt1);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "BottomBdt2", &BottomBdt2);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "BottomBdt3", &BottomBdt3);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "BottomBdt4", &BottomBdt4);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "BottomBdt5", &BottomBdt5);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "BottomBdt6", &BottomBdt6);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "BottomBdt7", &BottomBdt7);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "BottomBdt12", &BottomBdt12);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "BottomBdt34", &BottomBdt34);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "BottomBdt56", &BottomBdt56);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "BottomBdt123", &BottomBdt123);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "BottomBdt1234", &BottomBdt1234);
      //This works around a msvc bug and should be harmless on other platforms
      typedef analysis::Branch baseClass1;
      baseClass1::ShowMembers(R__insp);
}

} // namespace analysis
namespace ROOT {
   // Wrappers around operator new
   static void *new_analysiscLcLEventBottomTaggerBranch(void *p) {
      return  p ? new(p) ::analysis::EventBottomTaggerBranch : new ::analysis::EventBottomTaggerBranch;
   }
   static void *newArray_analysiscLcLEventBottomTaggerBranch(Long_t nElements, void *p) {
      return p ? new(p) ::analysis::EventBottomTaggerBranch[nElements] : new ::analysis::EventBottomTaggerBranch[nElements];
   }
   // Wrapper around operator delete
   static void delete_analysiscLcLEventBottomTaggerBranch(void *p) {
      delete ((::analysis::EventBottomTaggerBranch*)p);
   }
   static void deleteArray_analysiscLcLEventBottomTaggerBranch(void *p) {
      delete [] ((::analysis::EventBottomTaggerBranch*)p);
   }
   static void destruct_analysiscLcLEventBottomTaggerBranch(void *p) {
      typedef ::analysis::EventBottomTaggerBranch current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOT for class ::analysis::EventBottomTaggerBranch

      namespace analysis {
//______________________________________________________________________________
void HTopLeptonBranch::Streamer(TBuffer &R__b)
{
   // Stream an object of class analysis::HTopLeptonBranch.

   if (R__b.IsReading()) {
      R__b.ReadClassBuffer(analysis::HTopLeptonBranch::Class(),this);
   } else {
      R__b.WriteClassBuffer(analysis::HTopLeptonBranch::Class(),this);
   }
}

} // namespace analysis
//______________________________________________________________________________
      namespace analysis {
void HTopLeptonBranch::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class analysis::HTopLeptonBranch.
      TClass *R__cl = ::analysis::HTopLeptonBranch::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "VertexMass", &VertexMass);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "MaxDisplacement", &MaxDisplacement);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "MeanDisplacement", &MeanDisplacement);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "SumDisplacement", &SumDisplacement);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "Multipliticity", &Multipliticity);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "DeltaR", &DeltaR);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "Spread", &Spread);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "VertexDeltaR", &VertexDeltaR);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "VertexSpread", &VertexSpread);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "EnergyFraction", &EnergyFraction);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "JetMass", &JetMass);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "LeptonPt", &LeptonPt);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "WBdt", &WBdt);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "BBdt", &BBdt);
      //This works around a msvc bug and should be harmless on other platforms
      typedef analysis::PairBranch baseClass1;
      baseClass1::ShowMembers(R__insp);
}

} // namespace analysis
namespace ROOT {
   // Wrappers around operator new
   static void *new_analysiscLcLHTopLeptonBranch(void *p) {
      return  p ? new(p) ::analysis::HTopLeptonBranch : new ::analysis::HTopLeptonBranch;
   }
   static void *newArray_analysiscLcLHTopLeptonBranch(Long_t nElements, void *p) {
      return p ? new(p) ::analysis::HTopLeptonBranch[nElements] : new ::analysis::HTopLeptonBranch[nElements];
   }
   // Wrapper around operator delete
   static void delete_analysiscLcLHTopLeptonBranch(void *p) {
      delete ((::analysis::HTopLeptonBranch*)p);
   }
   static void deleteArray_analysiscLcLHTopLeptonBranch(void *p) {
      delete [] ((::analysis::HTopLeptonBranch*)p);
   }
   static void destruct_analysiscLcLHTopLeptonBranch(void *p) {
      typedef ::analysis::HTopLeptonBranch current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOT for class ::analysis::HTopLeptonBranch

      namespace analysis {
//______________________________________________________________________________
void EventBranch::Streamer(TBuffer &R__b)
{
   // Stream an object of class analysis::EventBranch.

   if (R__b.IsReading()) {
      R__b.ReadClassBuffer(analysis::EventBranch::Class(),this);
   } else {
      R__b.WriteClassBuffer(analysis::EventBranch::Class(),this);
   }
}

} // namespace analysis
//______________________________________________________________________________
      namespace analysis {
void EventBranch::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class analysis::EventBranch.
      TClass *R__cl = ::analysis::EventBranch::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "LeptonNumber", &LeptonNumber);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "JetNumber", &JetNumber);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "BottomNumber", &BottomNumber);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "MissingEt", &MissingEt);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "ScalarHt", &ScalarHt);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "LeptonHt", &LeptonHt);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "JetMass", &JetMass);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "JetPt", &JetPt);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "JetHt", &JetHt);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "JetRap", &JetRap);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "JetPhi", &JetPhi);
      //This works around a msvc bug and should be harmless on other platforms
      typedef analysis::MultiBranch baseClass1;
      baseClass1::ShowMembers(R__insp);
}

} // namespace analysis
namespace ROOT {
   // Wrappers around operator new
   static void *new_analysiscLcLEventBranch(void *p) {
      return  p ? new(p) ::analysis::EventBranch : new ::analysis::EventBranch;
   }
   static void *newArray_analysiscLcLEventBranch(Long_t nElements, void *p) {
      return p ? new(p) ::analysis::EventBranch[nElements] : new ::analysis::EventBranch[nElements];
   }
   // Wrapper around operator delete
   static void delete_analysiscLcLEventBranch(void *p) {
      delete ((::analysis::EventBranch*)p);
   }
   static void deleteArray_analysiscLcLEventBranch(void *p) {
      delete [] ((::analysis::EventBranch*)p);
   }
   static void destruct_analysiscLcLEventBranch(void *p) {
      typedef ::analysis::EventBranch current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOT for class ::analysis::EventBranch

/********************************************************
* BranchesDict.cpp
* CAUTION: DON'T CHANGE THIS FILE. THIS FILE IS AUTOMATICALLY GENERATED
*          FROM HEADER FILES LISTED IN G__setup_cpp_environmentXXX().
*          CHANGE THOSE HEADER FILES AND REGENERATE THIS FILE.
********************************************************/

#ifdef G__MEMTEST
#undef malloc
#undef free
#endif

#if defined(__GNUC__) && __GNUC__ >= 4 && ((__GNUC_MINOR__ == 2 && __GNUC_PATCHLEVEL__ >= 1) || (__GNUC_MINOR__ >= 3))
#pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif

extern "C" void G__cpp_reset_tagtableBranchesDict();

extern "C" void G__set_cpp_environmentBranchesDict() {
  G__add_compiledheader("TObject.h");
  G__add_compiledheader("TMemberInspector.h");
  G__add_compiledheader("Branches.cpp");
  G__cpp_reset_tagtableBranchesDict();
}
#include <new>
extern "C" int G__cpp_dllrevBranchesDict() { return(30051515); }

/*********************************************************
* Member function Interface Method
*********************************************************/

/* analysis */

/* analysis::Branch */
static int G__BranchesDict_174_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   analysis::Branch* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new analysis::Branch[n];
     } else {
       p = new((void*) gvp) analysis::Branch[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new analysis::Branch;
     } else {
       p = new((void*) gvp) analysis::Branch;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__BranchesDictLN_analysiscLcLBranch));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__BranchesDict_174_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         analysis::Observables* pobj;
         analysis::Observables xobj = ((analysis::Branch*) G__getstructoffset())->Variables();
         pobj = new analysis::Observables(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__BranchesDict_174_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         analysis::Observables* pobj;
         analysis::Observables xobj = ((analysis::Branch*) G__getstructoffset())->Spectators();
         pobj = new analysis::Observables(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__BranchesDict_174_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) analysis::Branch::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__BranchesDict_174_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) analysis::Branch::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__BranchesDict_174_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) analysis::Branch::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__BranchesDict_174_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      analysis::Branch::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__BranchesDict_174_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((analysis::Branch*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__BranchesDict_174_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) analysis::Branch::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__BranchesDict_174_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) analysis::Branch::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__BranchesDict_174_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) analysis::Branch::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__BranchesDict_174_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) analysis::Branch::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__BranchesDict_174_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   analysis::Branch* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new analysis::Branch(*(analysis::Branch*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__BranchesDictLN_analysiscLcLBranch));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef analysis::Branch G__TanalysiscLcLBranch;
static int G__BranchesDict_174_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (analysis::Branch*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((analysis::Branch*) (soff+(sizeof(analysis::Branch)*i)))->~G__TanalysiscLcLBranch();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (analysis::Branch*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((analysis::Branch*) (soff))->~G__TanalysiscLcLBranch();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__BranchesDict_174_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   analysis::Branch* dest = (analysis::Branch*) G__getstructoffset();
   *dest = *(analysis::Branch*) libp->para[0].ref;
   const analysis::Branch& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* analysis::InfoBranch */
static int G__BranchesDict_175_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   analysis::InfoBranch* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new analysis::InfoBranch[n];
     } else {
       p = new((void*) gvp) analysis::InfoBranch[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new analysis::InfoBranch;
     } else {
       p = new((void*) gvp) analysis::InfoBranch;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__BranchesDictLN_analysiscLcLInfoBranch));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__BranchesDict_175_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) analysis::InfoBranch::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__BranchesDict_175_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) analysis::InfoBranch::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__BranchesDict_175_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) analysis::InfoBranch::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__BranchesDict_175_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      analysis::InfoBranch::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__BranchesDict_175_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((analysis::InfoBranch*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__BranchesDict_175_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) analysis::InfoBranch::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__BranchesDict_175_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) analysis::InfoBranch::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__BranchesDict_175_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) analysis::InfoBranch::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__BranchesDict_175_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) analysis::InfoBranch::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__BranchesDict_175_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   analysis::InfoBranch* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new analysis::InfoBranch(*(analysis::InfoBranch*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__BranchesDictLN_analysiscLcLInfoBranch));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef analysis::InfoBranch G__TanalysiscLcLInfoBranch;
static int G__BranchesDict_175_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (analysis::InfoBranch*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((analysis::InfoBranch*) (soff+(sizeof(analysis::InfoBranch)*i)))->~G__TanalysiscLcLInfoBranch();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (analysis::InfoBranch*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((analysis::InfoBranch*) (soff))->~G__TanalysiscLcLInfoBranch();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__BranchesDict_175_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   analysis::InfoBranch* dest = (analysis::InfoBranch*) G__getstructoffset();
   *dest = *(analysis::InfoBranch*) libp->para[0].ref;
   const analysis::InfoBranch& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* analysis::HResultBranch */
static int G__BranchesDict_176_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   analysis::HResultBranch* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new analysis::HResultBranch[n];
     } else {
       p = new((void*) gvp) analysis::HResultBranch[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new analysis::HResultBranch;
     } else {
       p = new((void*) gvp) analysis::HResultBranch;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__BranchesDictLN_analysiscLcLHResultBranch));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__BranchesDict_176_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) analysis::HResultBranch::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__BranchesDict_176_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) analysis::HResultBranch::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__BranchesDict_176_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) analysis::HResultBranch::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__BranchesDict_176_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      analysis::HResultBranch::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__BranchesDict_176_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((analysis::HResultBranch*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__BranchesDict_176_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) analysis::HResultBranch::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__BranchesDict_176_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) analysis::HResultBranch::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__BranchesDict_176_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) analysis::HResultBranch::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__BranchesDict_176_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) analysis::HResultBranch::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__BranchesDict_176_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   analysis::HResultBranch* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new analysis::HResultBranch(*(analysis::HResultBranch*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__BranchesDictLN_analysiscLcLHResultBranch));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef analysis::HResultBranch G__TanalysiscLcLHResultBranch;
static int G__BranchesDict_176_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (analysis::HResultBranch*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((analysis::HResultBranch*) (soff+(sizeof(analysis::HResultBranch)*i)))->~G__TanalysiscLcLHResultBranch();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (analysis::HResultBranch*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((analysis::HResultBranch*) (soff))->~G__TanalysiscLcLHResultBranch();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__BranchesDict_176_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   analysis::HResultBranch* dest = (analysis::HResultBranch*) G__getstructoffset();
   *dest = *(analysis::HResultBranch*) libp->para[0].ref;
   const analysis::HResultBranch& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* analysis::ParticleBranch */
static int G__BranchesDict_177_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   analysis::ParticleBranch* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new analysis::ParticleBranch[n];
     } else {
       p = new((void*) gvp) analysis::ParticleBranch[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new analysis::ParticleBranch;
     } else {
       p = new((void*) gvp) analysis::ParticleBranch;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__BranchesDictLN_analysiscLcLParticleBranch));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__BranchesDict_177_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         analysis::Observables* pobj;
         analysis::Observables xobj = ((analysis::ParticleBranch*) G__getstructoffset())->Variables();
         pobj = new analysis::Observables(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__BranchesDict_177_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) analysis::ParticleBranch::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__BranchesDict_177_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) analysis::ParticleBranch::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__BranchesDict_177_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) analysis::ParticleBranch::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__BranchesDict_177_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      analysis::ParticleBranch::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__BranchesDict_177_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((analysis::ParticleBranch*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__BranchesDict_177_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) analysis::ParticleBranch::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__BranchesDict_177_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) analysis::ParticleBranch::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__BranchesDict_177_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) analysis::ParticleBranch::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__BranchesDict_177_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) analysis::ParticleBranch::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__BranchesDict_177_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   analysis::ParticleBranch* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new analysis::ParticleBranch(*(analysis::ParticleBranch*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__BranchesDictLN_analysiscLcLParticleBranch));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef analysis::ParticleBranch G__TanalysiscLcLParticleBranch;
static int G__BranchesDict_177_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (analysis::ParticleBranch*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((analysis::ParticleBranch*) (soff+(sizeof(analysis::ParticleBranch)*i)))->~G__TanalysiscLcLParticleBranch();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (analysis::ParticleBranch*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((analysis::ParticleBranch*) (soff))->~G__TanalysiscLcLParticleBranch();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__BranchesDict_177_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   analysis::ParticleBranch* dest = (analysis::ParticleBranch*) G__getstructoffset();
   *dest = *(analysis::ParticleBranch*) libp->para[0].ref;
   const analysis::ParticleBranch& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* analysis::BottomBranch */
static int G__BranchesDict_178_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   analysis::BottomBranch* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new analysis::BottomBranch[n];
     } else {
       p = new((void*) gvp) analysis::BottomBranch[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new analysis::BottomBranch;
     } else {
       p = new((void*) gvp) analysis::BottomBranch;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__BranchesDictLN_analysiscLcLBottomBranch));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__BranchesDict_178_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         analysis::Observables* pobj;
         analysis::Observables xobj = ((analysis::BottomBranch*) G__getstructoffset())->Variables();
         pobj = new analysis::Observables(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__BranchesDict_178_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) analysis::BottomBranch::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__BranchesDict_178_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) analysis::BottomBranch::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__BranchesDict_178_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) analysis::BottomBranch::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__BranchesDict_178_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      analysis::BottomBranch::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__BranchesDict_178_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((analysis::BottomBranch*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__BranchesDict_178_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) analysis::BottomBranch::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__BranchesDict_178_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) analysis::BottomBranch::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__BranchesDict_178_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) analysis::BottomBranch::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__BranchesDict_178_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) analysis::BottomBranch::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__BranchesDict_178_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   analysis::BottomBranch* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new analysis::BottomBranch(*(analysis::BottomBranch*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__BranchesDictLN_analysiscLcLBottomBranch));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef analysis::BottomBranch G__TanalysiscLcLBottomBranch;
static int G__BranchesDict_178_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (analysis::BottomBranch*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((analysis::BottomBranch*) (soff+(sizeof(analysis::BottomBranch)*i)))->~G__TanalysiscLcLBottomBranch();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (analysis::BottomBranch*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((analysis::BottomBranch*) (soff))->~G__TanalysiscLcLBottomBranch();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__BranchesDict_178_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   analysis::BottomBranch* dest = (analysis::BottomBranch*) G__getstructoffset();
   *dest = *(analysis::BottomBranch*) libp->para[0].ref;
   const analysis::BottomBranch& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* analysis::TauBranch */
static int G__BranchesDict_179_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   analysis::TauBranch* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new analysis::TauBranch[n];
     } else {
       p = new((void*) gvp) analysis::TauBranch[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new analysis::TauBranch;
     } else {
       p = new((void*) gvp) analysis::TauBranch;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__BranchesDictLN_analysiscLcLTauBranch));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__BranchesDict_179_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) analysis::TauBranch::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__BranchesDict_179_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) analysis::TauBranch::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__BranchesDict_179_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) analysis::TauBranch::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__BranchesDict_179_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      analysis::TauBranch::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__BranchesDict_179_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((analysis::TauBranch*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__BranchesDict_179_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) analysis::TauBranch::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__BranchesDict_179_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) analysis::TauBranch::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__BranchesDict_179_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) analysis::TauBranch::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__BranchesDict_179_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) analysis::TauBranch::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__BranchesDict_179_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   analysis::TauBranch* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new analysis::TauBranch(*(analysis::TauBranch*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__BranchesDictLN_analysiscLcLTauBranch));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef analysis::TauBranch G__TanalysiscLcLTauBranch;
static int G__BranchesDict_179_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (analysis::TauBranch*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((analysis::TauBranch*) (soff+(sizeof(analysis::TauBranch)*i)))->~G__TanalysiscLcLTauBranch();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (analysis::TauBranch*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((analysis::TauBranch*) (soff))->~G__TanalysiscLcLTauBranch();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__BranchesDict_179_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   analysis::TauBranch* dest = (analysis::TauBranch*) G__getstructoffset();
   *dest = *(analysis::TauBranch*) libp->para[0].ref;
   const analysis::TauBranch& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* analysis::PairBranch */
static int G__BranchesDict_180_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   analysis::PairBranch* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new analysis::PairBranch[n];
     } else {
       p = new((void*) gvp) analysis::PairBranch[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new analysis::PairBranch;
     } else {
       p = new((void*) gvp) analysis::PairBranch;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__BranchesDictLN_analysiscLcLPairBranch));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__BranchesDict_180_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         analysis::Observables* pobj;
         analysis::Observables xobj = ((analysis::PairBranch*) G__getstructoffset())->Variables();
         pobj = new analysis::Observables(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__BranchesDict_180_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) analysis::PairBranch::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__BranchesDict_180_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) analysis::PairBranch::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__BranchesDict_180_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) analysis::PairBranch::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__BranchesDict_180_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      analysis::PairBranch::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__BranchesDict_180_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((analysis::PairBranch*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__BranchesDict_180_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) analysis::PairBranch::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__BranchesDict_180_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) analysis::PairBranch::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__BranchesDict_180_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) analysis::PairBranch::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__BranchesDict_180_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) analysis::PairBranch::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__BranchesDict_180_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   analysis::PairBranch* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new analysis::PairBranch(*(analysis::PairBranch*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__BranchesDictLN_analysiscLcLPairBranch));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef analysis::PairBranch G__TanalysiscLcLPairBranch;
static int G__BranchesDict_180_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (analysis::PairBranch*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((analysis::PairBranch*) (soff+(sizeof(analysis::PairBranch)*i)))->~G__TanalysiscLcLPairBranch();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (analysis::PairBranch*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((analysis::PairBranch*) (soff))->~G__TanalysiscLcLPairBranch();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__BranchesDict_180_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   analysis::PairBranch* dest = (analysis::PairBranch*) G__getstructoffset();
   *dest = *(analysis::PairBranch*) libp->para[0].ref;
   const analysis::PairBranch& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* analysis::MultiBranch */
static int G__BranchesDict_181_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   analysis::MultiBranch* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new analysis::MultiBranch[n];
     } else {
       p = new((void*) gvp) analysis::MultiBranch[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new analysis::MultiBranch;
     } else {
       p = new((void*) gvp) analysis::MultiBranch;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__BranchesDictLN_analysiscLcLMultiBranch));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__BranchesDict_181_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         analysis::Observables* pobj;
         analysis::Observables xobj = ((analysis::MultiBranch*) G__getstructoffset())->Variables();
         pobj = new analysis::Observables(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__BranchesDict_181_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) analysis::MultiBranch::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__BranchesDict_181_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) analysis::MultiBranch::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__BranchesDict_181_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) analysis::MultiBranch::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__BranchesDict_181_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      analysis::MultiBranch::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__BranchesDict_181_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((analysis::MultiBranch*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__BranchesDict_181_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) analysis::MultiBranch::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__BranchesDict_181_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) analysis::MultiBranch::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__BranchesDict_181_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) analysis::MultiBranch::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__BranchesDict_181_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) analysis::MultiBranch::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__BranchesDict_181_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   analysis::MultiBranch* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new analysis::MultiBranch(*(analysis::MultiBranch*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__BranchesDictLN_analysiscLcLMultiBranch));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef analysis::MultiBranch G__TanalysiscLcLMultiBranch;
static int G__BranchesDict_181_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (analysis::MultiBranch*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((analysis::MultiBranch*) (soff+(sizeof(analysis::MultiBranch)*i)))->~G__TanalysiscLcLMultiBranch();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (analysis::MultiBranch*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((analysis::MultiBranch*) (soff))->~G__TanalysiscLcLMultiBranch();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__BranchesDict_181_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   analysis::MultiBranch* dest = (analysis::MultiBranch*) G__getstructoffset();
   *dest = *(analysis::MultiBranch*) libp->para[0].ref;
   const analysis::MultiBranch& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* analysis::WHadronicBranch */
static int G__BranchesDict_182_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   analysis::WHadronicBranch* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new analysis::WHadronicBranch[n];
     } else {
       p = new((void*) gvp) analysis::WHadronicBranch[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new analysis::WHadronicBranch;
     } else {
       p = new((void*) gvp) analysis::WHadronicBranch;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__BranchesDictLN_analysiscLcLWHadronicBranch));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__BranchesDict_182_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) analysis::WHadronicBranch::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__BranchesDict_182_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) analysis::WHadronicBranch::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__BranchesDict_182_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) analysis::WHadronicBranch::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__BranchesDict_182_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      analysis::WHadronicBranch::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__BranchesDict_182_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((analysis::WHadronicBranch*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__BranchesDict_182_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) analysis::WHadronicBranch::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__BranchesDict_182_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) analysis::WHadronicBranch::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__BranchesDict_182_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) analysis::WHadronicBranch::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__BranchesDict_182_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) analysis::WHadronicBranch::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__BranchesDict_182_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   analysis::WHadronicBranch* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new analysis::WHadronicBranch(*(analysis::WHadronicBranch*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__BranchesDictLN_analysiscLcLWHadronicBranch));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef analysis::WHadronicBranch G__TanalysiscLcLWHadronicBranch;
static int G__BranchesDict_182_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (analysis::WHadronicBranch*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((analysis::WHadronicBranch*) (soff+(sizeof(analysis::WHadronicBranch)*i)))->~G__TanalysiscLcLWHadronicBranch();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (analysis::WHadronicBranch*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((analysis::WHadronicBranch*) (soff))->~G__TanalysiscLcLWHadronicBranch();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__BranchesDict_182_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   analysis::WHadronicBranch* dest = (analysis::WHadronicBranch*) G__getstructoffset();
   *dest = *(analysis::WHadronicBranch*) libp->para[0].ref;
   const analysis::WHadronicBranch& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* analysis::ZHadronicBranch */
static int G__BranchesDict_183_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   analysis::ZHadronicBranch* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new analysis::ZHadronicBranch[n];
     } else {
       p = new((void*) gvp) analysis::ZHadronicBranch[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new analysis::ZHadronicBranch;
     } else {
       p = new((void*) gvp) analysis::ZHadronicBranch;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__BranchesDictLN_analysiscLcLZHadronicBranch));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__BranchesDict_183_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) analysis::ZHadronicBranch::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__BranchesDict_183_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) analysis::ZHadronicBranch::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__BranchesDict_183_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) analysis::ZHadronicBranch::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__BranchesDict_183_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      analysis::ZHadronicBranch::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__BranchesDict_183_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((analysis::ZHadronicBranch*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__BranchesDict_183_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) analysis::ZHadronicBranch::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__BranchesDict_183_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) analysis::ZHadronicBranch::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__BranchesDict_183_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) analysis::ZHadronicBranch::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__BranchesDict_183_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) analysis::ZHadronicBranch::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__BranchesDict_183_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   analysis::ZHadronicBranch* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new analysis::ZHadronicBranch(*(analysis::ZHadronicBranch*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__BranchesDictLN_analysiscLcLZHadronicBranch));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef analysis::ZHadronicBranch G__TanalysiscLcLZHadronicBranch;
static int G__BranchesDict_183_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (analysis::ZHadronicBranch*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((analysis::ZHadronicBranch*) (soff+(sizeof(analysis::ZHadronicBranch)*i)))->~G__TanalysiscLcLZHadronicBranch();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (analysis::ZHadronicBranch*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((analysis::ZHadronicBranch*) (soff))->~G__TanalysiscLcLZHadronicBranch();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__BranchesDict_183_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   analysis::ZHadronicBranch* dest = (analysis::ZHadronicBranch*) G__getstructoffset();
   *dest = *(analysis::ZHadronicBranch*) libp->para[0].ref;
   const analysis::ZHadronicBranch& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* analysis::JetPairBranch */
static int G__BranchesDict_184_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   analysis::JetPairBranch* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new analysis::JetPairBranch[n];
     } else {
       p = new((void*) gvp) analysis::JetPairBranch[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new analysis::JetPairBranch;
     } else {
       p = new((void*) gvp) analysis::JetPairBranch;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__BranchesDictLN_analysiscLcLJetPairBranch));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__BranchesDict_184_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) analysis::JetPairBranch::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__BranchesDict_184_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) analysis::JetPairBranch::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__BranchesDict_184_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) analysis::JetPairBranch::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__BranchesDict_184_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      analysis::JetPairBranch::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__BranchesDict_184_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((analysis::JetPairBranch*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__BranchesDict_184_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) analysis::JetPairBranch::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__BranchesDict_184_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) analysis::JetPairBranch::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__BranchesDict_184_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) analysis::JetPairBranch::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__BranchesDict_184_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) analysis::JetPairBranch::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__BranchesDict_184_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   analysis::JetPairBranch* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new analysis::JetPairBranch(*(analysis::JetPairBranch*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__BranchesDictLN_analysiscLcLJetPairBranch));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef analysis::JetPairBranch G__TanalysiscLcLJetPairBranch;
static int G__BranchesDict_184_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (analysis::JetPairBranch*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((analysis::JetPairBranch*) (soff+(sizeof(analysis::JetPairBranch)*i)))->~G__TanalysiscLcLJetPairBranch();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (analysis::JetPairBranch*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((analysis::JetPairBranch*) (soff))->~G__TanalysiscLcLJetPairBranch();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__BranchesDict_184_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   analysis::JetPairBranch* dest = (analysis::JetPairBranch*) G__getstructoffset();
   *dest = *(analysis::JetPairBranch*) libp->para[0].ref;
   const analysis::JetPairBranch& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* analysis::TripletJetPairBranch */
static int G__BranchesDict_185_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   analysis::TripletJetPairBranch* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new analysis::TripletJetPairBranch[n];
     } else {
       p = new((void*) gvp) analysis::TripletJetPairBranch[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new analysis::TripletJetPairBranch;
     } else {
       p = new((void*) gvp) analysis::TripletJetPairBranch;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__BranchesDictLN_analysiscLcLTripletJetPairBranch));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__BranchesDict_185_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         analysis::Observables* pobj;
         analysis::Observables xobj = ((analysis::TripletJetPairBranch*) G__getstructoffset())->Variables();
         pobj = new analysis::Observables(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__BranchesDict_185_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) analysis::TripletJetPairBranch::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__BranchesDict_185_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) analysis::TripletJetPairBranch::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__BranchesDict_185_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) analysis::TripletJetPairBranch::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__BranchesDict_185_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      analysis::TripletJetPairBranch::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__BranchesDict_185_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((analysis::TripletJetPairBranch*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__BranchesDict_185_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) analysis::TripletJetPairBranch::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__BranchesDict_185_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) analysis::TripletJetPairBranch::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__BranchesDict_185_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) analysis::TripletJetPairBranch::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__BranchesDict_185_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) analysis::TripletJetPairBranch::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__BranchesDict_185_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   analysis::TripletJetPairBranch* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new analysis::TripletJetPairBranch(*(analysis::TripletJetPairBranch*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__BranchesDictLN_analysiscLcLTripletJetPairBranch));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef analysis::TripletJetPairBranch G__TanalysiscLcLTripletJetPairBranch;
static int G__BranchesDict_185_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (analysis::TripletJetPairBranch*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((analysis::TripletJetPairBranch*) (soff+(sizeof(analysis::TripletJetPairBranch)*i)))->~G__TanalysiscLcLTripletJetPairBranch();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (analysis::TripletJetPairBranch*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((analysis::TripletJetPairBranch*) (soff))->~G__TanalysiscLcLTripletJetPairBranch();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__BranchesDict_185_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   analysis::TripletJetPairBranch* dest = (analysis::TripletJetPairBranch*) G__getstructoffset();
   *dest = *(analysis::TripletJetPairBranch*) libp->para[0].ref;
   const analysis::TripletJetPairBranch& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* analysis::WSemiBranch */
static int G__BranchesDict_186_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   analysis::WSemiBranch* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new analysis::WSemiBranch[n];
     } else {
       p = new((void*) gvp) analysis::WSemiBranch[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new analysis::WSemiBranch;
     } else {
       p = new((void*) gvp) analysis::WSemiBranch;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__BranchesDictLN_analysiscLcLWSemiBranch));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__BranchesDict_186_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         analysis::Observables* pobj;
         analysis::Observables xobj = ((analysis::WSemiBranch*) G__getstructoffset())->Variables();
         pobj = new analysis::Observables(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__BranchesDict_186_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) analysis::WSemiBranch::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__BranchesDict_186_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) analysis::WSemiBranch::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__BranchesDict_186_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) analysis::WSemiBranch::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__BranchesDict_186_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      analysis::WSemiBranch::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__BranchesDict_186_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((analysis::WSemiBranch*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__BranchesDict_186_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) analysis::WSemiBranch::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__BranchesDict_186_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) analysis::WSemiBranch::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__BranchesDict_186_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) analysis::WSemiBranch::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__BranchesDict_186_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) analysis::WSemiBranch::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__BranchesDict_186_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   analysis::WSemiBranch* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new analysis::WSemiBranch(*(analysis::WSemiBranch*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__BranchesDictLN_analysiscLcLWSemiBranch));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef analysis::WSemiBranch G__TanalysiscLcLWSemiBranch;
static int G__BranchesDict_186_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (analysis::WSemiBranch*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((analysis::WSemiBranch*) (soff+(sizeof(analysis::WSemiBranch)*i)))->~G__TanalysiscLcLWSemiBranch();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (analysis::WSemiBranch*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((analysis::WSemiBranch*) (soff))->~G__TanalysiscLcLWSemiBranch();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__BranchesDict_186_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   analysis::WSemiBranch* dest = (analysis::WSemiBranch*) G__getstructoffset();
   *dest = *(analysis::WSemiBranch*) libp->para[0].ref;
   const analysis::WSemiBranch& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* analysis::TopHadronicBranch */
static int G__BranchesDict_187_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   analysis::TopHadronicBranch* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new analysis::TopHadronicBranch[n];
     } else {
       p = new((void*) gvp) analysis::TopHadronicBranch[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new analysis::TopHadronicBranch;
     } else {
       p = new((void*) gvp) analysis::TopHadronicBranch;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__BranchesDictLN_analysiscLcLTopHadronicBranch));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__BranchesDict_187_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) analysis::TopHadronicBranch::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__BranchesDict_187_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) analysis::TopHadronicBranch::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__BranchesDict_187_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) analysis::TopHadronicBranch::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__BranchesDict_187_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      analysis::TopHadronicBranch::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__BranchesDict_187_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((analysis::TopHadronicBranch*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__BranchesDict_187_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) analysis::TopHadronicBranch::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__BranchesDict_187_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) analysis::TopHadronicBranch::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__BranchesDict_187_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) analysis::TopHadronicBranch::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__BranchesDict_187_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) analysis::TopHadronicBranch::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__BranchesDict_187_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   analysis::TopHadronicBranch* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new analysis::TopHadronicBranch(*(analysis::TopHadronicBranch*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__BranchesDictLN_analysiscLcLTopHadronicBranch));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef analysis::TopHadronicBranch G__TanalysiscLcLTopHadronicBranch;
static int G__BranchesDict_187_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (analysis::TopHadronicBranch*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((analysis::TopHadronicBranch*) (soff+(sizeof(analysis::TopHadronicBranch)*i)))->~G__TanalysiscLcLTopHadronicBranch();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (analysis::TopHadronicBranch*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((analysis::TopHadronicBranch*) (soff))->~G__TanalysiscLcLTopHadronicBranch();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__BranchesDict_187_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   analysis::TopHadronicBranch* dest = (analysis::TopHadronicBranch*) G__getstructoffset();
   *dest = *(analysis::TopHadronicBranch*) libp->para[0].ref;
   const analysis::TopHadronicBranch& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* analysis::TopLeptonicBranch */
static int G__BranchesDict_188_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   analysis::TopLeptonicBranch* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new analysis::TopLeptonicBranch[n];
     } else {
       p = new((void*) gvp) analysis::TopLeptonicBranch[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new analysis::TopLeptonicBranch;
     } else {
       p = new((void*) gvp) analysis::TopLeptonicBranch;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__BranchesDictLN_analysiscLcLTopLeptonicBranch));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__BranchesDict_188_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         analysis::Observables* pobj;
         analysis::Observables xobj = ((analysis::TopLeptonicBranch*) G__getstructoffset())->Variables();
         pobj = new analysis::Observables(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__BranchesDict_188_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) analysis::TopLeptonicBranch::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__BranchesDict_188_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) analysis::TopLeptonicBranch::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__BranchesDict_188_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) analysis::TopLeptonicBranch::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__BranchesDict_188_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      analysis::TopLeptonicBranch::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__BranchesDict_188_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((analysis::TopLeptonicBranch*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__BranchesDict_188_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) analysis::TopLeptonicBranch::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__BranchesDict_188_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) analysis::TopLeptonicBranch::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__BranchesDict_188_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) analysis::TopLeptonicBranch::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__BranchesDict_188_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) analysis::TopLeptonicBranch::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__BranchesDict_188_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   analysis::TopLeptonicBranch* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new analysis::TopLeptonicBranch(*(analysis::TopLeptonicBranch*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__BranchesDictLN_analysiscLcLTopLeptonicBranch));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef analysis::TopLeptonicBranch G__TanalysiscLcLTopLeptonicBranch;
static int G__BranchesDict_188_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (analysis::TopLeptonicBranch*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((analysis::TopLeptonicBranch*) (soff+(sizeof(analysis::TopLeptonicBranch)*i)))->~G__TanalysiscLcLTopLeptonicBranch();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (analysis::TopLeptonicBranch*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((analysis::TopLeptonicBranch*) (soff))->~G__TanalysiscLcLTopLeptonicBranch();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__BranchesDict_188_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   analysis::TopLeptonicBranch* dest = (analysis::TopLeptonicBranch*) G__getstructoffset();
   *dest = *(analysis::TopLeptonicBranch*) libp->para[0].ref;
   const analysis::TopLeptonicBranch& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* analysis::TopSemiBranch */
static int G__BranchesDict_189_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   analysis::TopSemiBranch* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new analysis::TopSemiBranch[n];
     } else {
       p = new((void*) gvp) analysis::TopSemiBranch[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new analysis::TopSemiBranch;
     } else {
       p = new((void*) gvp) analysis::TopSemiBranch;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__BranchesDictLN_analysiscLcLTopSemiBranch));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__BranchesDict_189_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         analysis::Observables* pobj;
         analysis::Observables xobj = ((analysis::TopSemiBranch*) G__getstructoffset())->Variables();
         pobj = new analysis::Observables(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__BranchesDict_189_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) analysis::TopSemiBranch::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__BranchesDict_189_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) analysis::TopSemiBranch::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__BranchesDict_189_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) analysis::TopSemiBranch::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__BranchesDict_189_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      analysis::TopSemiBranch::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__BranchesDict_189_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((analysis::TopSemiBranch*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__BranchesDict_189_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) analysis::TopSemiBranch::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__BranchesDict_189_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) analysis::TopSemiBranch::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__BranchesDict_189_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) analysis::TopSemiBranch::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__BranchesDict_189_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) analysis::TopSemiBranch::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__BranchesDict_189_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   analysis::TopSemiBranch* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new analysis::TopSemiBranch(*(analysis::TopSemiBranch*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__BranchesDictLN_analysiscLcLTopSemiBranch));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef analysis::TopSemiBranch G__TanalysiscLcLTopSemiBranch;
static int G__BranchesDict_189_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (analysis::TopSemiBranch*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((analysis::TopSemiBranch*) (soff+(sizeof(analysis::TopSemiBranch)*i)))->~G__TanalysiscLcLTopSemiBranch();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (analysis::TopSemiBranch*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((analysis::TopSemiBranch*) (soff))->~G__TanalysiscLcLTopSemiBranch();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__BranchesDict_189_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   analysis::TopSemiBranch* dest = (analysis::TopSemiBranch*) G__getstructoffset();
   *dest = *(analysis::TopSemiBranch*) libp->para[0].ref;
   const analysis::TopSemiBranch& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* analysis::HiggsBranch */
static int G__BranchesDict_190_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   analysis::HiggsBranch* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new analysis::HiggsBranch[n];
     } else {
       p = new((void*) gvp) analysis::HiggsBranch[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new analysis::HiggsBranch;
     } else {
       p = new((void*) gvp) analysis::HiggsBranch;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__BranchesDictLN_analysiscLcLHiggsBranch));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__BranchesDict_190_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) analysis::HiggsBranch::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__BranchesDict_190_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) analysis::HiggsBranch::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__BranchesDict_190_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) analysis::HiggsBranch::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__BranchesDict_190_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      analysis::HiggsBranch::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__BranchesDict_190_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((analysis::HiggsBranch*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__BranchesDict_190_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) analysis::HiggsBranch::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__BranchesDict_190_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) analysis::HiggsBranch::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__BranchesDict_190_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) analysis::HiggsBranch::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__BranchesDict_190_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) analysis::HiggsBranch::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__BranchesDict_190_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   analysis::HiggsBranch* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new analysis::HiggsBranch(*(analysis::HiggsBranch*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__BranchesDictLN_analysiscLcLHiggsBranch));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef analysis::HiggsBranch G__TanalysiscLcLHiggsBranch;
static int G__BranchesDict_190_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (analysis::HiggsBranch*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((analysis::HiggsBranch*) (soff+(sizeof(analysis::HiggsBranch)*i)))->~G__TanalysiscLcLHiggsBranch();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (analysis::HiggsBranch*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((analysis::HiggsBranch*) (soff))->~G__TanalysiscLcLHiggsBranch();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__BranchesDict_190_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   analysis::HiggsBranch* dest = (analysis::HiggsBranch*) G__getstructoffset();
   *dest = *(analysis::HiggsBranch*) libp->para[0].ref;
   const analysis::HiggsBranch& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* analysis::EventBottomTaggerBranch */
static int G__BranchesDict_191_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   analysis::EventBottomTaggerBranch* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new analysis::EventBottomTaggerBranch[n];
     } else {
       p = new((void*) gvp) analysis::EventBottomTaggerBranch[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new analysis::EventBottomTaggerBranch;
     } else {
       p = new((void*) gvp) analysis::EventBottomTaggerBranch;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__BranchesDictLN_analysiscLcLEventBottomTaggerBranch));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__BranchesDict_191_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) analysis::EventBottomTaggerBranch::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__BranchesDict_191_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) analysis::EventBottomTaggerBranch::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__BranchesDict_191_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) analysis::EventBottomTaggerBranch::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__BranchesDict_191_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      analysis::EventBottomTaggerBranch::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__BranchesDict_191_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((analysis::EventBottomTaggerBranch*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__BranchesDict_191_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) analysis::EventBottomTaggerBranch::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__BranchesDict_191_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) analysis::EventBottomTaggerBranch::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__BranchesDict_191_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) analysis::EventBottomTaggerBranch::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__BranchesDict_191_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) analysis::EventBottomTaggerBranch::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__BranchesDict_191_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   analysis::EventBottomTaggerBranch* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new analysis::EventBottomTaggerBranch(*(analysis::EventBottomTaggerBranch*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__BranchesDictLN_analysiscLcLEventBottomTaggerBranch));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef analysis::EventBottomTaggerBranch G__TanalysiscLcLEventBottomTaggerBranch;
static int G__BranchesDict_191_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (analysis::EventBottomTaggerBranch*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((analysis::EventBottomTaggerBranch*) (soff+(sizeof(analysis::EventBottomTaggerBranch)*i)))->~G__TanalysiscLcLEventBottomTaggerBranch();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (analysis::EventBottomTaggerBranch*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((analysis::EventBottomTaggerBranch*) (soff))->~G__TanalysiscLcLEventBottomTaggerBranch();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__BranchesDict_191_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   analysis::EventBottomTaggerBranch* dest = (analysis::EventBottomTaggerBranch*) G__getstructoffset();
   *dest = *(analysis::EventBottomTaggerBranch*) libp->para[0].ref;
   const analysis::EventBottomTaggerBranch& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* analysis::HTopLeptonBranch */
static int G__BranchesDict_192_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   analysis::HTopLeptonBranch* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new analysis::HTopLeptonBranch[n];
     } else {
       p = new((void*) gvp) analysis::HTopLeptonBranch[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new analysis::HTopLeptonBranch;
     } else {
       p = new((void*) gvp) analysis::HTopLeptonBranch;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__BranchesDictLN_analysiscLcLHTopLeptonBranch));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__BranchesDict_192_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) analysis::HTopLeptonBranch::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__BranchesDict_192_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) analysis::HTopLeptonBranch::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__BranchesDict_192_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) analysis::HTopLeptonBranch::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__BranchesDict_192_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      analysis::HTopLeptonBranch::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__BranchesDict_192_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((analysis::HTopLeptonBranch*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__BranchesDict_192_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) analysis::HTopLeptonBranch::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__BranchesDict_192_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) analysis::HTopLeptonBranch::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__BranchesDict_192_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) analysis::HTopLeptonBranch::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__BranchesDict_192_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) analysis::HTopLeptonBranch::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__BranchesDict_192_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   analysis::HTopLeptonBranch* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new analysis::HTopLeptonBranch(*(analysis::HTopLeptonBranch*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__BranchesDictLN_analysiscLcLHTopLeptonBranch));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef analysis::HTopLeptonBranch G__TanalysiscLcLHTopLeptonBranch;
static int G__BranchesDict_192_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (analysis::HTopLeptonBranch*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((analysis::HTopLeptonBranch*) (soff+(sizeof(analysis::HTopLeptonBranch)*i)))->~G__TanalysiscLcLHTopLeptonBranch();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (analysis::HTopLeptonBranch*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((analysis::HTopLeptonBranch*) (soff))->~G__TanalysiscLcLHTopLeptonBranch();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__BranchesDict_192_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   analysis::HTopLeptonBranch* dest = (analysis::HTopLeptonBranch*) G__getstructoffset();
   *dest = *(analysis::HTopLeptonBranch*) libp->para[0].ref;
   const analysis::HTopLeptonBranch& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* analysis::EventBranch */
static int G__BranchesDict_193_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   analysis::EventBranch* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new analysis::EventBranch[n];
     } else {
       p = new((void*) gvp) analysis::EventBranch[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new analysis::EventBranch;
     } else {
       p = new((void*) gvp) analysis::EventBranch;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__BranchesDictLN_analysiscLcLEventBranch));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__BranchesDict_193_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         analysis::Observables* pobj;
         analysis::Observables xobj = ((analysis::EventBranch*) G__getstructoffset())->Variables();
         pobj = new analysis::Observables(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__BranchesDict_193_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) analysis::EventBranch::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__BranchesDict_193_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) analysis::EventBranch::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__BranchesDict_193_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) analysis::EventBranch::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__BranchesDict_193_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      analysis::EventBranch::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__BranchesDict_193_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((analysis::EventBranch*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__BranchesDict_193_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) analysis::EventBranch::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__BranchesDict_193_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) analysis::EventBranch::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__BranchesDict_193_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) analysis::EventBranch::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__BranchesDict_193_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) analysis::EventBranch::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__BranchesDict_193_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   analysis::EventBranch* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new analysis::EventBranch(*(analysis::EventBranch*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__BranchesDictLN_analysiscLcLEventBranch));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef analysis::EventBranch G__TanalysiscLcLEventBranch;
static int G__BranchesDict_193_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (analysis::EventBranch*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((analysis::EventBranch*) (soff+(sizeof(analysis::EventBranch)*i)))->~G__TanalysiscLcLEventBranch();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (analysis::EventBranch*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((analysis::EventBranch*) (soff))->~G__TanalysiscLcLEventBranch();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__BranchesDict_193_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   analysis::EventBranch* dest = (analysis::EventBranch*) G__getstructoffset();
   *dest = *(analysis::EventBranch*) libp->para[0].ref;
   const analysis::EventBranch& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* Setting up global function */

/*********************************************************
* Member function Stub
*********************************************************/

/* analysis */

/* analysis::Branch */

/* analysis::InfoBranch */

/* analysis::HResultBranch */

/* analysis::ParticleBranch */

/* analysis::BottomBranch */

/* analysis::TauBranch */

/* analysis::PairBranch */

/* analysis::MultiBranch */

/* analysis::WHadronicBranch */

/* analysis::ZHadronicBranch */

/* analysis::JetPairBranch */

/* analysis::TripletJetPairBranch */

/* analysis::WSemiBranch */

/* analysis::TopHadronicBranch */

/* analysis::TopLeptonicBranch */

/* analysis::TopSemiBranch */

/* analysis::HiggsBranch */

/* analysis::EventBottomTaggerBranch */

/* analysis::HTopLeptonBranch */

/* analysis::EventBranch */

/*********************************************************
* Global function Stub
*********************************************************/

/*********************************************************
* Get size of pointer to member function
*********************************************************/
class G__Sizep2memfuncBranchesDict {
 public:
  G__Sizep2memfuncBranchesDict(): p(&G__Sizep2memfuncBranchesDict::sizep2memfunc) {}
    size_t sizep2memfunc() { return(sizeof(p)); }
  private:
    size_t (G__Sizep2memfuncBranchesDict::*p)();
};

size_t G__get_sizep2memfuncBranchesDict()
{
  G__Sizep2memfuncBranchesDict a;
  G__setsizep2memfunc((int)a.sizep2memfunc());
  return((size_t)a.sizep2memfunc());
}


/*********************************************************
* virtual base class offset calculation interface
*********************************************************/

   /* Setting up class inheritance */

/*********************************************************
* Inheritance information setup/
*********************************************************/
extern "C" void G__cpp_setup_inheritanceBranchesDict() {

   /* Setting up class inheritance */
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__BranchesDictLN_analysiscLcLBranch))) {
     analysis::Branch *G__Lderived;
     G__Lderived=(analysis::Branch*)0x1000;
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__BranchesDictLN_analysiscLcLBranch),G__get_linked_tagnum(&G__BranchesDictLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__BranchesDictLN_analysiscLcLInfoBranch))) {
     analysis::InfoBranch *G__Lderived;
     G__Lderived=(analysis::InfoBranch*)0x1000;
     {
       analysis::Branch *G__Lpbase=(analysis::Branch*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__BranchesDictLN_analysiscLcLInfoBranch),G__get_linked_tagnum(&G__BranchesDictLN_analysiscLcLBranch),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__BranchesDictLN_analysiscLcLInfoBranch),G__get_linked_tagnum(&G__BranchesDictLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__BranchesDictLN_analysiscLcLHResultBranch))) {
     analysis::HResultBranch *G__Lderived;
     G__Lderived=(analysis::HResultBranch*)0x1000;
     {
       analysis::Branch *G__Lpbase=(analysis::Branch*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__BranchesDictLN_analysiscLcLHResultBranch),G__get_linked_tagnum(&G__BranchesDictLN_analysiscLcLBranch),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__BranchesDictLN_analysiscLcLHResultBranch),G__get_linked_tagnum(&G__BranchesDictLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__BranchesDictLN_analysiscLcLParticleBranch))) {
     analysis::ParticleBranch *G__Lderived;
     G__Lderived=(analysis::ParticleBranch*)0x1000;
     {
       analysis::Branch *G__Lpbase=(analysis::Branch*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__BranchesDictLN_analysiscLcLParticleBranch),G__get_linked_tagnum(&G__BranchesDictLN_analysiscLcLBranch),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__BranchesDictLN_analysiscLcLParticleBranch),G__get_linked_tagnum(&G__BranchesDictLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__BranchesDictLN_analysiscLcLBottomBranch))) {
     analysis::BottomBranch *G__Lderived;
     G__Lderived=(analysis::BottomBranch*)0x1000;
     {
       analysis::ParticleBranch *G__Lpbase=(analysis::ParticleBranch*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__BranchesDictLN_analysiscLcLBottomBranch),G__get_linked_tagnum(&G__BranchesDictLN_analysiscLcLParticleBranch),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
     {
       analysis::Branch *G__Lpbase=(analysis::Branch*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__BranchesDictLN_analysiscLcLBottomBranch),G__get_linked_tagnum(&G__BranchesDictLN_analysiscLcLBranch),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__BranchesDictLN_analysiscLcLBottomBranch),G__get_linked_tagnum(&G__BranchesDictLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__BranchesDictLN_analysiscLcLTauBranch))) {
     analysis::TauBranch *G__Lderived;
     G__Lderived=(analysis::TauBranch*)0x1000;
     {
       analysis::ParticleBranch *G__Lpbase=(analysis::ParticleBranch*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__BranchesDictLN_analysiscLcLTauBranch),G__get_linked_tagnum(&G__BranchesDictLN_analysiscLcLParticleBranch),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
     {
       analysis::Branch *G__Lpbase=(analysis::Branch*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__BranchesDictLN_analysiscLcLTauBranch),G__get_linked_tagnum(&G__BranchesDictLN_analysiscLcLBranch),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__BranchesDictLN_analysiscLcLTauBranch),G__get_linked_tagnum(&G__BranchesDictLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__BranchesDictLN_analysiscLcLPairBranch))) {
     analysis::PairBranch *G__Lderived;
     G__Lderived=(analysis::PairBranch*)0x1000;
     {
       analysis::ParticleBranch *G__Lpbase=(analysis::ParticleBranch*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__BranchesDictLN_analysiscLcLPairBranch),G__get_linked_tagnum(&G__BranchesDictLN_analysiscLcLParticleBranch),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
     {
       analysis::Branch *G__Lpbase=(analysis::Branch*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__BranchesDictLN_analysiscLcLPairBranch),G__get_linked_tagnum(&G__BranchesDictLN_analysiscLcLBranch),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__BranchesDictLN_analysiscLcLPairBranch),G__get_linked_tagnum(&G__BranchesDictLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__BranchesDictLN_analysiscLcLMultiBranch))) {
     analysis::MultiBranch *G__Lderived;
     G__Lderived=(analysis::MultiBranch*)0x1000;
     {
       analysis::PairBranch *G__Lpbase=(analysis::PairBranch*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__BranchesDictLN_analysiscLcLMultiBranch),G__get_linked_tagnum(&G__BranchesDictLN_analysiscLcLPairBranch),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
     {
       analysis::ParticleBranch *G__Lpbase=(analysis::ParticleBranch*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__BranchesDictLN_analysiscLcLMultiBranch),G__get_linked_tagnum(&G__BranchesDictLN_analysiscLcLParticleBranch),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       analysis::Branch *G__Lpbase=(analysis::Branch*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__BranchesDictLN_analysiscLcLMultiBranch),G__get_linked_tagnum(&G__BranchesDictLN_analysiscLcLBranch),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__BranchesDictLN_analysiscLcLMultiBranch),G__get_linked_tagnum(&G__BranchesDictLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__BranchesDictLN_analysiscLcLWHadronicBranch))) {
     analysis::WHadronicBranch *G__Lderived;
     G__Lderived=(analysis::WHadronicBranch*)0x1000;
     {
       analysis::PairBranch *G__Lpbase=(analysis::PairBranch*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__BranchesDictLN_analysiscLcLWHadronicBranch),G__get_linked_tagnum(&G__BranchesDictLN_analysiscLcLPairBranch),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
     {
       analysis::ParticleBranch *G__Lpbase=(analysis::ParticleBranch*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__BranchesDictLN_analysiscLcLWHadronicBranch),G__get_linked_tagnum(&G__BranchesDictLN_analysiscLcLParticleBranch),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       analysis::Branch *G__Lpbase=(analysis::Branch*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__BranchesDictLN_analysiscLcLWHadronicBranch),G__get_linked_tagnum(&G__BranchesDictLN_analysiscLcLBranch),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__BranchesDictLN_analysiscLcLWHadronicBranch),G__get_linked_tagnum(&G__BranchesDictLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__BranchesDictLN_analysiscLcLZHadronicBranch))) {
     analysis::ZHadronicBranch *G__Lderived;
     G__Lderived=(analysis::ZHadronicBranch*)0x1000;
     {
       analysis::PairBranch *G__Lpbase=(analysis::PairBranch*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__BranchesDictLN_analysiscLcLZHadronicBranch),G__get_linked_tagnum(&G__BranchesDictLN_analysiscLcLPairBranch),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
     {
       analysis::ParticleBranch *G__Lpbase=(analysis::ParticleBranch*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__BranchesDictLN_analysiscLcLZHadronicBranch),G__get_linked_tagnum(&G__BranchesDictLN_analysiscLcLParticleBranch),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       analysis::Branch *G__Lpbase=(analysis::Branch*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__BranchesDictLN_analysiscLcLZHadronicBranch),G__get_linked_tagnum(&G__BranchesDictLN_analysiscLcLBranch),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__BranchesDictLN_analysiscLcLZHadronicBranch),G__get_linked_tagnum(&G__BranchesDictLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__BranchesDictLN_analysiscLcLJetPairBranch))) {
     analysis::JetPairBranch *G__Lderived;
     G__Lderived=(analysis::JetPairBranch*)0x1000;
     {
       analysis::PairBranch *G__Lpbase=(analysis::PairBranch*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__BranchesDictLN_analysiscLcLJetPairBranch),G__get_linked_tagnum(&G__BranchesDictLN_analysiscLcLPairBranch),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
     {
       analysis::ParticleBranch *G__Lpbase=(analysis::ParticleBranch*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__BranchesDictLN_analysiscLcLJetPairBranch),G__get_linked_tagnum(&G__BranchesDictLN_analysiscLcLParticleBranch),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       analysis::Branch *G__Lpbase=(analysis::Branch*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__BranchesDictLN_analysiscLcLJetPairBranch),G__get_linked_tagnum(&G__BranchesDictLN_analysiscLcLBranch),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__BranchesDictLN_analysiscLcLJetPairBranch),G__get_linked_tagnum(&G__BranchesDictLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__BranchesDictLN_analysiscLcLTripletJetPairBranch))) {
     analysis::TripletJetPairBranch *G__Lderived;
     G__Lderived=(analysis::TripletJetPairBranch*)0x1000;
     {
       analysis::PairBranch *G__Lpbase=(analysis::PairBranch*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__BranchesDictLN_analysiscLcLTripletJetPairBranch),G__get_linked_tagnum(&G__BranchesDictLN_analysiscLcLPairBranch),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
     {
       analysis::ParticleBranch *G__Lpbase=(analysis::ParticleBranch*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__BranchesDictLN_analysiscLcLTripletJetPairBranch),G__get_linked_tagnum(&G__BranchesDictLN_analysiscLcLParticleBranch),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       analysis::Branch *G__Lpbase=(analysis::Branch*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__BranchesDictLN_analysiscLcLTripletJetPairBranch),G__get_linked_tagnum(&G__BranchesDictLN_analysiscLcLBranch),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__BranchesDictLN_analysiscLcLTripletJetPairBranch),G__get_linked_tagnum(&G__BranchesDictLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__BranchesDictLN_analysiscLcLWSemiBranch))) {
     analysis::WSemiBranch *G__Lderived;
     G__Lderived=(analysis::WSemiBranch*)0x1000;
     {
       analysis::PairBranch *G__Lpbase=(analysis::PairBranch*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__BranchesDictLN_analysiscLcLWSemiBranch),G__get_linked_tagnum(&G__BranchesDictLN_analysiscLcLPairBranch),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
     {
       analysis::ParticleBranch *G__Lpbase=(analysis::ParticleBranch*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__BranchesDictLN_analysiscLcLWSemiBranch),G__get_linked_tagnum(&G__BranchesDictLN_analysiscLcLParticleBranch),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       analysis::Branch *G__Lpbase=(analysis::Branch*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__BranchesDictLN_analysiscLcLWSemiBranch),G__get_linked_tagnum(&G__BranchesDictLN_analysiscLcLBranch),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__BranchesDictLN_analysiscLcLWSemiBranch),G__get_linked_tagnum(&G__BranchesDictLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__BranchesDictLN_analysiscLcLTopHadronicBranch))) {
     analysis::TopHadronicBranch *G__Lderived;
     G__Lderived=(analysis::TopHadronicBranch*)0x1000;
     {
       analysis::MultiBranch *G__Lpbase=(analysis::MultiBranch*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__BranchesDictLN_analysiscLcLTopHadronicBranch),G__get_linked_tagnum(&G__BranchesDictLN_analysiscLcLMultiBranch),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
     {
       analysis::PairBranch *G__Lpbase=(analysis::PairBranch*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__BranchesDictLN_analysiscLcLTopHadronicBranch),G__get_linked_tagnum(&G__BranchesDictLN_analysiscLcLPairBranch),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       analysis::ParticleBranch *G__Lpbase=(analysis::ParticleBranch*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__BranchesDictLN_analysiscLcLTopHadronicBranch),G__get_linked_tagnum(&G__BranchesDictLN_analysiscLcLParticleBranch),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       analysis::Branch *G__Lpbase=(analysis::Branch*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__BranchesDictLN_analysiscLcLTopHadronicBranch),G__get_linked_tagnum(&G__BranchesDictLN_analysiscLcLBranch),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__BranchesDictLN_analysiscLcLTopHadronicBranch),G__get_linked_tagnum(&G__BranchesDictLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__BranchesDictLN_analysiscLcLTopLeptonicBranch))) {
     analysis::TopLeptonicBranch *G__Lderived;
     G__Lderived=(analysis::TopLeptonicBranch*)0x1000;
     {
       analysis::PairBranch *G__Lpbase=(analysis::PairBranch*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__BranchesDictLN_analysiscLcLTopLeptonicBranch),G__get_linked_tagnum(&G__BranchesDictLN_analysiscLcLPairBranch),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
     {
       analysis::ParticleBranch *G__Lpbase=(analysis::ParticleBranch*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__BranchesDictLN_analysiscLcLTopLeptonicBranch),G__get_linked_tagnum(&G__BranchesDictLN_analysiscLcLParticleBranch),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       analysis::Branch *G__Lpbase=(analysis::Branch*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__BranchesDictLN_analysiscLcLTopLeptonicBranch),G__get_linked_tagnum(&G__BranchesDictLN_analysiscLcLBranch),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__BranchesDictLN_analysiscLcLTopLeptonicBranch),G__get_linked_tagnum(&G__BranchesDictLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__BranchesDictLN_analysiscLcLTopSemiBranch))) {
     analysis::TopSemiBranch *G__Lderived;
     G__Lderived=(analysis::TopSemiBranch*)0x1000;
     {
       analysis::MultiBranch *G__Lpbase=(analysis::MultiBranch*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__BranchesDictLN_analysiscLcLTopSemiBranch),G__get_linked_tagnum(&G__BranchesDictLN_analysiscLcLMultiBranch),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
     {
       analysis::PairBranch *G__Lpbase=(analysis::PairBranch*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__BranchesDictLN_analysiscLcLTopSemiBranch),G__get_linked_tagnum(&G__BranchesDictLN_analysiscLcLPairBranch),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       analysis::ParticleBranch *G__Lpbase=(analysis::ParticleBranch*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__BranchesDictLN_analysiscLcLTopSemiBranch),G__get_linked_tagnum(&G__BranchesDictLN_analysiscLcLParticleBranch),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       analysis::Branch *G__Lpbase=(analysis::Branch*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__BranchesDictLN_analysiscLcLTopSemiBranch),G__get_linked_tagnum(&G__BranchesDictLN_analysiscLcLBranch),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__BranchesDictLN_analysiscLcLTopSemiBranch),G__get_linked_tagnum(&G__BranchesDictLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__BranchesDictLN_analysiscLcLHiggsBranch))) {
     analysis::HiggsBranch *G__Lderived;
     G__Lderived=(analysis::HiggsBranch*)0x1000;
     {
       analysis::PairBranch *G__Lpbase=(analysis::PairBranch*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__BranchesDictLN_analysiscLcLHiggsBranch),G__get_linked_tagnum(&G__BranchesDictLN_analysiscLcLPairBranch),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
     {
       analysis::ParticleBranch *G__Lpbase=(analysis::ParticleBranch*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__BranchesDictLN_analysiscLcLHiggsBranch),G__get_linked_tagnum(&G__BranchesDictLN_analysiscLcLParticleBranch),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       analysis::Branch *G__Lpbase=(analysis::Branch*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__BranchesDictLN_analysiscLcLHiggsBranch),G__get_linked_tagnum(&G__BranchesDictLN_analysiscLcLBranch),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__BranchesDictLN_analysiscLcLHiggsBranch),G__get_linked_tagnum(&G__BranchesDictLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__BranchesDictLN_analysiscLcLEventBottomTaggerBranch))) {
     analysis::EventBottomTaggerBranch *G__Lderived;
     G__Lderived=(analysis::EventBottomTaggerBranch*)0x1000;
     {
       analysis::Branch *G__Lpbase=(analysis::Branch*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__BranchesDictLN_analysiscLcLEventBottomTaggerBranch),G__get_linked_tagnum(&G__BranchesDictLN_analysiscLcLBranch),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__BranchesDictLN_analysiscLcLEventBottomTaggerBranch),G__get_linked_tagnum(&G__BranchesDictLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__BranchesDictLN_analysiscLcLHTopLeptonBranch))) {
     analysis::HTopLeptonBranch *G__Lderived;
     G__Lderived=(analysis::HTopLeptonBranch*)0x1000;
     {
       analysis::PairBranch *G__Lpbase=(analysis::PairBranch*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__BranchesDictLN_analysiscLcLHTopLeptonBranch),G__get_linked_tagnum(&G__BranchesDictLN_analysiscLcLPairBranch),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
     {
       analysis::ParticleBranch *G__Lpbase=(analysis::ParticleBranch*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__BranchesDictLN_analysiscLcLHTopLeptonBranch),G__get_linked_tagnum(&G__BranchesDictLN_analysiscLcLParticleBranch),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       analysis::Branch *G__Lpbase=(analysis::Branch*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__BranchesDictLN_analysiscLcLHTopLeptonBranch),G__get_linked_tagnum(&G__BranchesDictLN_analysiscLcLBranch),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__BranchesDictLN_analysiscLcLHTopLeptonBranch),G__get_linked_tagnum(&G__BranchesDictLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__BranchesDictLN_analysiscLcLEventBranch))) {
     analysis::EventBranch *G__Lderived;
     G__Lderived=(analysis::EventBranch*)0x1000;
     {
       analysis::MultiBranch *G__Lpbase=(analysis::MultiBranch*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__BranchesDictLN_analysiscLcLEventBranch),G__get_linked_tagnum(&G__BranchesDictLN_analysiscLcLMultiBranch),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
     {
       analysis::PairBranch *G__Lpbase=(analysis::PairBranch*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__BranchesDictLN_analysiscLcLEventBranch),G__get_linked_tagnum(&G__BranchesDictLN_analysiscLcLPairBranch),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       analysis::ParticleBranch *G__Lpbase=(analysis::ParticleBranch*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__BranchesDictLN_analysiscLcLEventBranch),G__get_linked_tagnum(&G__BranchesDictLN_analysiscLcLParticleBranch),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       analysis::Branch *G__Lpbase=(analysis::Branch*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__BranchesDictLN_analysiscLcLEventBranch),G__get_linked_tagnum(&G__BranchesDictLN_analysiscLcLBranch),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__BranchesDictLN_analysiscLcLEventBranch),G__get_linked_tagnum(&G__BranchesDictLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
   }
}

/*********************************************************
* typedef information setup/
*********************************************************/
extern "C" void G__cpp_setup_typetableBranchesDict() {

   /* Setting up typedef entry */
   G__search_typename2("Version_t",115,-1,0,-1);
   G__setnewtype(-1,"Class version identifier (short)",0);
   G__search_typename2("vector<ROOT::TSchemaHelper>",117,G__get_linked_tagnum(&G__BranchesDictLN_vectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<const_iterator>",117,G__get_linked_tagnum(&G__BranchesDictLN_reverse_iteratorlEvectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__BranchesDictLN_vectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<iterator>",117,G__get_linked_tagnum(&G__BranchesDictLN_reverse_iteratorlEvectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__BranchesDictLN_vectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("vector<TVirtualArray*>",117,G__get_linked_tagnum(&G__BranchesDictLN_vectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<const_iterator>",117,G__get_linked_tagnum(&G__BranchesDictLN_reverse_iteratorlEvectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__BranchesDictLN_vectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<iterator>",117,G__get_linked_tagnum(&G__BranchesDictLN_reverse_iteratorlEvectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__BranchesDictLN_vectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("pair<float&,std::string>",117,G__get_linked_tagnum(&G__BranchesDictLN_pairlEfloataNcOstringgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("ObsPair",117,G__get_linked_tagnum(&G__BranchesDictLN_pairlEfloataNcOstringgR),0,G__get_linked_tagnum(&G__BranchesDictLN_analysis));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("vector<ObsPair>",117,G__get_linked_tagnum(&G__BranchesDictLN_vectorlEpairlEfloataNcOstringgRcOallocatorlEpairlEfloataNcOstringgRsPgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<const_iterator>",117,G__get_linked_tagnum(&G__BranchesDictLN_reverse_iteratorlEvectorlEpairlEfloataNcOstringgRcOallocatorlEpairlEfloataNcOstringgRsPgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__BranchesDictLN_vectorlEpairlEfloataNcOstringgRcOallocatorlEpairlEfloataNcOstringgRsPgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<iterator>",117,G__get_linked_tagnum(&G__BranchesDictLN_reverse_iteratorlEvectorlEpairlEfloataNcOstringgRcOallocatorlEpairlEfloataNcOstringgRsPgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__BranchesDictLN_vectorlEpairlEfloataNcOstringgRcOallocatorlEpairlEfloataNcOstringgRsPgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("vector<pair<float&,string> >",117,G__get_linked_tagnum(&G__BranchesDictLN_vectorlEpairlEfloataNcOstringgRcOallocatorlEpairlEfloataNcOstringgRsPgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("Observables",117,G__get_linked_tagnum(&G__BranchesDictLN_vectorlEpairlEfloataNcOstringgRcOallocatorlEpairlEfloataNcOstringgRsPgRsPgR),0,G__get_linked_tagnum(&G__BranchesDictLN_analysis));
   G__setnewtype(-1,NULL,0);
}

/*********************************************************
* Data Member information setup/
*********************************************************/

   /* Setting up class,struct,union tag member variable */

   /* analysis */
static void G__setup_memvaranalysis(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__BranchesDictLN_analysis));
   {
   }
   G__tag_memvar_reset();
}


   /* analysis::Branch */
static void G__setup_memvaranalysiscLcLBranch(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__BranchesDictLN_analysiscLcLBranch));
   { analysis::Branch *p; p=(analysis::Branch*)0x1000; if (p) { }
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__BranchesDictLN_TClass),-1,-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* analysis::InfoBranch */
static void G__setup_memvaranalysiscLcLInfoBranch(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__BranchesDictLN_analysiscLcLInfoBranch));
   { analysis::InfoBranch *p; p=(analysis::InfoBranch*)0x1000; if (p) { }
   G__memvar_setup((void*)((long)(&p->Crosssection)-(long)(p)),102,0,0,-1,-1,-1,1,"Crosssection=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->CrosssectionError)-(long)(p)),102,0,0,-1,-1,-1,1,"CrosssectionError=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->Mass)-(long)(p)),102,0,0,-1,-1,-1,1,"Mass=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->EventNumber)-(long)(p)),102,0,0,-1,-1,-1,1,"EventNumber=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->PreCutNumber)-(long)(p)),102,0,0,-1,-1,-1,1,"PreCutNumber=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->Name)-(long)(p)),117,0,0,G__get_linked_tagnum(&G__BranchesDictLN_string),-1,-1,1,"Name=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__BranchesDictLN_TClass),-1,-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* analysis::HResultBranch */
static void G__setup_memvaranalysiscLcLHResultBranch(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__BranchesDictLN_analysiscLcLHResultBranch));
   { analysis::HResultBranch *p; p=(analysis::HResultBranch*)0x1000; if (p) { }
   G__memvar_setup((void*)((long)(&p->Bdt)-(long)(p)),102,0,0,-1,-1,-1,1,"Bdt=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->Tag)-(long)(p)),102,0,0,-1,-1,-1,1,"Tag=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__BranchesDictLN_TClass),-1,-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* analysis::ParticleBranch */
static void G__setup_memvaranalysiscLcLParticleBranch(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__BranchesDictLN_analysiscLcLParticleBranch));
   { analysis::ParticleBranch *p; p=(analysis::ParticleBranch*)0x1000; if (p) { }
   G__memvar_setup((void*)((long)(&p->Mass)-(long)(p)),102,0,0,-1,-1,-1,1,"Mass=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->Pt)-(long)(p)),102,0,0,-1,-1,-1,1,"Pt=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->Rap)-(long)(p)),102,0,0,-1,-1,-1,1,"Rap=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->Phi)-(long)(p)),102,0,0,-1,-1,-1,1,"Phi=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->Charge)-(long)(p)),102,0,0,-1,-1,-1,1,"Charge=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__BranchesDictLN_TClass),-1,-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* analysis::BottomBranch */
static void G__setup_memvaranalysiscLcLBottomBranch(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__BranchesDictLN_analysiscLcLBottomBranch));
   { analysis::BottomBranch *p; p=(analysis::BottomBranch*)0x1000; if (p) { }
   G__memvar_setup((void*)((long)(&p->VertexMass)-(long)(p)),102,0,0,-1,-1,-1,1,"VertexMass=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->MaxDisplacement)-(long)(p)),102,0,0,-1,-1,-1,1,"MaxDisplacement=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->MeanDisplacement)-(long)(p)),102,0,0,-1,-1,-1,1,"MeanDisplacement=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->SumDisplacement)-(long)(p)),102,0,0,-1,-1,-1,1,"SumDisplacement=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->Multipliticity)-(long)(p)),102,0,0,-1,-1,-1,1,"Multipliticity=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->DeltaR)-(long)(p)),102,0,0,-1,-1,-1,1,"DeltaR=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->Spread)-(long)(p)),102,0,0,-1,-1,-1,1,"Spread=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->VertexDeltaR)-(long)(p)),102,0,0,-1,-1,-1,1,"VertexDeltaR=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->VertexSpread)-(long)(p)),102,0,0,-1,-1,-1,1,"VertexSpread=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->EnergyFraction)-(long)(p)),102,0,0,-1,-1,-1,1,"EnergyFraction=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->Tag)-(long)(p)),102,0,0,-1,-1,-1,1,"Tag=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->Bdt)-(long)(p)),102,0,0,-1,-1,-1,1,"Bdt=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__BranchesDictLN_TClass),-1,-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* analysis::TauBranch */
static void G__setup_memvaranalysiscLcLTauBranch(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__BranchesDictLN_analysiscLcLTauBranch));
   { analysis::TauBranch *p; p=(analysis::TauBranch*)0x1000; if (p) { }
   G__memvar_setup((void*)((long)(&p->EmRadius)-(long)(p)),102,0,0,-1,-1,-1,1,"EmRadius=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->TrackRadius)-(long)(p)),102,0,0,-1,-1,-1,1,"TrackRadius=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->MomentumFraction)-(long)(p)),102,0,0,-1,-1,-1,1,"MomentumFraction=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->CoreEnergyFraction)-(long)(p)),102,0,0,-1,-1,-1,1,"CoreEnergyFraction=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->EmFraction)-(long)(p)),102,0,0,-1,-1,-1,1,"EmFraction=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->ClusterMass)-(long)(p)),102,0,0,-1,-1,-1,1,"ClusterMass=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->TrackMass)-(long)(p)),102,0,0,-1,-1,-1,1,"TrackMass=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->FlightPath)-(long)(p)),102,0,0,-1,-1,-1,1,"FlightPath=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->TrtHtFraction)-(long)(p)),102,0,0,-1,-1,-1,1,"TrtHtFraction=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->Tag)-(long)(p)),102,0,0,-1,-1,-1,1,"Tag=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->Bdt)-(long)(p)),102,0,0,-1,-1,-1,1,"Bdt=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__BranchesDictLN_TClass),-1,-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* analysis::PairBranch */
static void G__setup_memvaranalysiscLcLPairBranch(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__BranchesDictLN_analysiscLcLPairBranch));
   { analysis::PairBranch *p; p=(analysis::PairBranch*)0x1000; if (p) { }
   G__memvar_setup((void*)((long)(&p->Ht)-(long)(p)),102,0,0,-1,-1,-1,1,"Ht=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->DeltaPt)-(long)(p)),102,0,0,-1,-1,-1,1,"DeltaPt=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->DeltaM)-(long)(p)),102,0,0,-1,-1,-1,1,"DeltaM=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->DeltaRap)-(long)(p)),102,0,0,-1,-1,-1,1,"DeltaRap=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->DeltaPhi)-(long)(p)),102,0,0,-1,-1,-1,1,"DeltaPhi=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->DeltaR)-(long)(p)),102,0,0,-1,-1,-1,1,"DeltaR=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->Rho)-(long)(p)),102,0,0,-1,-1,-1,1,"Rho=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->Bdt1)-(long)(p)),102,0,0,-1,-1,-1,1,"Bdt1=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->Bdt2)-(long)(p)),102,0,0,-1,-1,-1,1,"Bdt2=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->Bdt)-(long)(p)),102,0,0,-1,-1,-1,1,"Bdt=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->Tag)-(long)(p)),102,0,0,-1,-1,-1,1,"Tag=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__BranchesDictLN_TClass),-1,-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* analysis::MultiBranch */
static void G__setup_memvaranalysiscLcLMultiBranch(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__BranchesDictLN_analysiscLcLMultiBranch));
   { analysis::MultiBranch *p; p=(analysis::MultiBranch*)0x1000; if (p) { }
   G__memvar_setup((void*)((long)(&p->DeltaHt)-(long)(p)),102,0,0,-1,-1,-1,1,"DeltaHt=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__BranchesDictLN_TClass),-1,-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* analysis::WHadronicBranch */
static void G__setup_memvaranalysiscLcLWHadronicBranch(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__BranchesDictLN_analysiscLcLWHadronicBranch));
   { analysis::WHadronicBranch *p; p=(analysis::WHadronicBranch*)0x1000; if (p) { }
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__BranchesDictLN_TClass),-1,-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* analysis::ZHadronicBranch */
static void G__setup_memvaranalysiscLcLZHadronicBranch(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__BranchesDictLN_analysiscLcLZHadronicBranch));
   { analysis::ZHadronicBranch *p; p=(analysis::ZHadronicBranch*)0x1000; if (p) { }
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__BranchesDictLN_TClass),-1,-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* analysis::JetPairBranch */
static void G__setup_memvaranalysiscLcLJetPairBranch(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__BranchesDictLN_analysiscLcLJetPairBranch));
   { analysis::JetPairBranch *p; p=(analysis::JetPairBranch*)0x1000; if (p) { }
   G__memvar_setup((void*)((long)(&p->DeltaM)-(long)(p)),102,0,0,-1,-1,-1,1,"DeltaM=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->Jet1Mass)-(long)(p)),102,0,0,-1,-1,-1,1,"Jet1Mass=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->Jet1Pt)-(long)(p)),102,0,0,-1,-1,-1,1,"Jet1Pt=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->Jet1Rap)-(long)(p)),102,0,0,-1,-1,-1,1,"Jet1Rap=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->Jet1Phi)-(long)(p)),102,0,0,-1,-1,-1,1,"Jet1Phi=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->Jet1Bdt)-(long)(p)),102,0,0,-1,-1,-1,1,"Jet1Bdt=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->Jet1BTag)-(long)(p)),102,0,0,-1,-1,-1,1,"Jet1BTag=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->Jet2Mass)-(long)(p)),102,0,0,-1,-1,-1,1,"Jet2Mass=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->Jet2Pt)-(long)(p)),102,0,0,-1,-1,-1,1,"Jet2Pt=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->Jet2Rap)-(long)(p)),102,0,0,-1,-1,-1,1,"Jet2Rap=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->Jet2Phi)-(long)(p)),102,0,0,-1,-1,-1,1,"Jet2Phi=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->Jet2Bdt)-(long)(p)),102,0,0,-1,-1,-1,1,"Jet2Bdt=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->Jet2BTag)-(long)(p)),102,0,0,-1,-1,-1,1,"Jet2BTag=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->BdtRatio11)-(long)(p)),102,0,0,-1,-1,-1,1,"BdtRatio11=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->BdtRatio12)-(long)(p)),102,0,0,-1,-1,-1,1,"BdtRatio12=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->BdtRatio13)-(long)(p)),102,0,0,-1,-1,-1,1,"BdtRatio13=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->BdtRatio14)-(long)(p)),102,0,0,-1,-1,-1,1,"BdtRatio14=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->BdtRatio21)-(long)(p)),102,0,0,-1,-1,-1,1,"BdtRatio21=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->BdtRatio22)-(long)(p)),102,0,0,-1,-1,-1,1,"BdtRatio22=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->BdtRatio23)-(long)(p)),102,0,0,-1,-1,-1,1,"BdtRatio23=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->BdtRatio24)-(long)(p)),102,0,0,-1,-1,-1,1,"BdtRatio24=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__BranchesDictLN_TClass),-1,-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* analysis::TripletJetPairBranch */
static void G__setup_memvaranalysiscLcLTripletJetPairBranch(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__BranchesDictLN_analysiscLcLTripletJetPairBranch));
   { analysis::TripletJetPairBranch *p; p=(analysis::TripletJetPairBranch*)0x1000; if (p) { }
   G__memvar_setup((void*)((long)(&p->BottomMass)-(long)(p)),102,0,0,-1,-1,-1,1,"BottomMass=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->BottomPt)-(long)(p)),102,0,0,-1,-1,-1,1,"BottomPt=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->BottomRap)-(long)(p)),102,0,0,-1,-1,-1,1,"BottomRap=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->BottomPhi)-(long)(p)),102,0,0,-1,-1,-1,1,"BottomPhi=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->BottomBdt)-(long)(p)),102,0,0,-1,-1,-1,1,"BottomBdt=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->BottomBTag)-(long)(p)),102,0,0,-1,-1,-1,1,"BottomBTag=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->TopMass)-(long)(p)),102,0,0,-1,-1,-1,1,"TopMass=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->TopPt)-(long)(p)),102,0,0,-1,-1,-1,1,"TopPt=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->TopRap)-(long)(p)),102,0,0,-1,-1,-1,1,"TopRap=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->TopPhi)-(long)(p)),102,0,0,-1,-1,-1,1,"TopPhi=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->TopBdt)-(long)(p)),102,0,0,-1,-1,-1,1,"TopBdt=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->TopBTag)-(long)(p)),102,0,0,-1,-1,-1,1,"TopBTag=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__BranchesDictLN_TClass),-1,-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* analysis::WSemiBranch */
static void G__setup_memvaranalysiscLcLWSemiBranch(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__BranchesDictLN_analysiscLcLWSemiBranch));
   { analysis::WSemiBranch *p; p=(analysis::WSemiBranch*)0x1000; if (p) { }
   G__memvar_setup((void*)((long)(&p->LeptonPt)-(long)(p)),102,0,0,-1,-1,-1,1,"LeptonPt=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->NeutrinoPt)-(long)(p)),102,0,0,-1,-1,-1,1,"NeutrinoPt=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__BranchesDictLN_TClass),-1,-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* analysis::TopHadronicBranch */
static void G__setup_memvaranalysiscLcLTopHadronicBranch(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__BranchesDictLN_analysiscLcLTopHadronicBranch));
   { analysis::TopHadronicBranch *p; p=(analysis::TopHadronicBranch*)0x1000; if (p) { }
   G__memvar_setup((void*)((long)(&p->BottomPt)-(long)(p)),102,0,0,-1,-1,-1,1,"BottomPt=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->WPt)-(long)(p)),102,0,0,-1,-1,-1,1,"WPt=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->WBdt)-(long)(p)),102,0,0,-1,-1,-1,1,"WBdt=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->BBdt)-(long)(p)),102,0,0,-1,-1,-1,1,"BBdt=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->Tau1_1)-(long)(p)),102,0,0,-1,-1,-1,1,"Tau1_1=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->Tau2_1)-(long)(p)),102,0,0,-1,-1,-1,1,"Tau2_1=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->Tau3_1)-(long)(p)),102,0,0,-1,-1,-1,1,"Tau3_1=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->Tau21_1)-(long)(p)),102,0,0,-1,-1,-1,1,"Tau21_1=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->Tau32_1)-(long)(p)),102,0,0,-1,-1,-1,1,"Tau32_1=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->Tau1_2)-(long)(p)),102,0,0,-1,-1,-1,1,"Tau1_2=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->Tau2_2)-(long)(p)),102,0,0,-1,-1,-1,1,"Tau2_2=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->Tau3_2)-(long)(p)),102,0,0,-1,-1,-1,1,"Tau3_2=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->Tau21_2)-(long)(p)),102,0,0,-1,-1,-1,1,"Tau21_2=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->Tau32_2)-(long)(p)),102,0,0,-1,-1,-1,1,"Tau32_2=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__BranchesDictLN_TClass),-1,-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* analysis::TopLeptonicBranch */
static void G__setup_memvaranalysiscLcLTopLeptonicBranch(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__BranchesDictLN_analysiscLcLTopLeptonicBranch));
   { analysis::TopLeptonicBranch *p; p=(analysis::TopLeptonicBranch*)0x1000; if (p) { }
   G__memvar_setup((void*)((long)(&p->BottomPt)-(long)(p)),102,0,0,-1,-1,-1,1,"BottomPt=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->LeptonPt)-(long)(p)),102,0,0,-1,-1,-1,1,"LeptonPt=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__BranchesDictLN_TClass),-1,-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* analysis::TopSemiBranch */
static void G__setup_memvaranalysiscLcLTopSemiBranch(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__BranchesDictLN_analysiscLcLTopSemiBranch));
   { analysis::TopSemiBranch *p; p=(analysis::TopSemiBranch*)0x1000; if (p) { }
   G__memvar_setup((void*)((long)(&p->BottomPt)-(long)(p)),102,0,0,-1,-1,-1,1,"BottomPt=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->WPt)-(long)(p)),102,0,0,-1,-1,-1,1,"WPt=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__BranchesDictLN_TClass),-1,-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* analysis::HiggsBranch */
static void G__setup_memvaranalysiscLcLHiggsBranch(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__BranchesDictLN_analysiscLcLHiggsBranch));
   { analysis::HiggsBranch *p; p=(analysis::HiggsBranch*)0x1000; if (p) { }
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__BranchesDictLN_TClass),-1,-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* analysis::EventBottomTaggerBranch */
static void G__setup_memvaranalysiscLcLEventBottomTaggerBranch(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__BranchesDictLN_analysiscLcLEventBottomTaggerBranch));
   { analysis::EventBottomTaggerBranch *p; p=(analysis::EventBottomTaggerBranch*)0x1000; if (p) { }
   G__memvar_setup((void*)((long)(&p->Bdt)-(long)(p)),102,0,0,-1,-1,-1,1,"Bdt=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->Tag)-(long)(p)),102,0,0,-1,-1,-1,1,"Tag=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->BottomBdt1)-(long)(p)),102,0,0,-1,-1,-1,1,"BottomBdt1=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->BottomBdt2)-(long)(p)),102,0,0,-1,-1,-1,1,"BottomBdt2=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->BottomBdt3)-(long)(p)),102,0,0,-1,-1,-1,1,"BottomBdt3=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->BottomBdt4)-(long)(p)),102,0,0,-1,-1,-1,1,"BottomBdt4=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->BottomBdt5)-(long)(p)),102,0,0,-1,-1,-1,1,"BottomBdt5=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->BottomBdt6)-(long)(p)),102,0,0,-1,-1,-1,1,"BottomBdt6=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->BottomBdt7)-(long)(p)),102,0,0,-1,-1,-1,1,"BottomBdt7=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->BottomBdt12)-(long)(p)),102,0,0,-1,-1,-1,1,"BottomBdt12=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->BottomBdt34)-(long)(p)),102,0,0,-1,-1,-1,1,"BottomBdt34=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->BottomBdt56)-(long)(p)),102,0,0,-1,-1,-1,1,"BottomBdt56=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->BottomBdt123)-(long)(p)),102,0,0,-1,-1,-1,1,"BottomBdt123=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->BottomBdt1234)-(long)(p)),102,0,0,-1,-1,-1,1,"BottomBdt1234=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__BranchesDictLN_TClass),-1,-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* analysis::HTopLeptonBranch */
static void G__setup_memvaranalysiscLcLHTopLeptonBranch(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__BranchesDictLN_analysiscLcLHTopLeptonBranch));
   { analysis::HTopLeptonBranch *p; p=(analysis::HTopLeptonBranch*)0x1000; if (p) { }
   G__memvar_setup((void*)((long)(&p->VertexMass)-(long)(p)),102,0,0,-1,-1,-1,1,"VertexMass=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->MaxDisplacement)-(long)(p)),102,0,0,-1,-1,-1,1,"MaxDisplacement=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->MeanDisplacement)-(long)(p)),102,0,0,-1,-1,-1,1,"MeanDisplacement=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->SumDisplacement)-(long)(p)),102,0,0,-1,-1,-1,1,"SumDisplacement=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->Multipliticity)-(long)(p)),102,0,0,-1,-1,-1,1,"Multipliticity=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->DeltaR)-(long)(p)),102,0,0,-1,-1,-1,1,"DeltaR=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->Spread)-(long)(p)),102,0,0,-1,-1,-1,1,"Spread=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->VertexDeltaR)-(long)(p)),102,0,0,-1,-1,-1,1,"VertexDeltaR=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->VertexSpread)-(long)(p)),102,0,0,-1,-1,-1,1,"VertexSpread=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->EnergyFraction)-(long)(p)),102,0,0,-1,-1,-1,1,"EnergyFraction=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->JetMass)-(long)(p)),102,0,0,-1,-1,-1,1,"JetMass=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->LeptonPt)-(long)(p)),102,0,0,-1,-1,-1,1,"LeptonPt=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->WBdt)-(long)(p)),102,0,0,-1,-1,-1,1,"WBdt=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->BBdt)-(long)(p)),102,0,0,-1,-1,-1,1,"BBdt=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__BranchesDictLN_TClass),-1,-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* analysis::EventBranch */
static void G__setup_memvaranalysiscLcLEventBranch(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__BranchesDictLN_analysiscLcLEventBranch));
   { analysis::EventBranch *p; p=(analysis::EventBranch*)0x1000; if (p) { }
   G__memvar_setup((void*)((long)(&p->LeptonNumber)-(long)(p)),102,0,0,-1,-1,-1,1,"LeptonNumber=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->JetNumber)-(long)(p)),102,0,0,-1,-1,-1,1,"JetNumber=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->BottomNumber)-(long)(p)),102,0,0,-1,-1,-1,1,"BottomNumber=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->MissingEt)-(long)(p)),102,0,0,-1,-1,-1,1,"MissingEt=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->ScalarHt)-(long)(p)),102,0,0,-1,-1,-1,1,"ScalarHt=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->LeptonHt)-(long)(p)),102,0,0,-1,-1,-1,1,"LeptonHt=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->JetMass)-(long)(p)),102,0,0,-1,-1,-1,1,"JetMass=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->JetPt)-(long)(p)),102,0,0,-1,-1,-1,1,"JetPt=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->JetHt)-(long)(p)),102,0,0,-1,-1,-1,1,"JetHt=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->JetRap)-(long)(p)),102,0,0,-1,-1,-1,1,"JetRap=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->JetPhi)-(long)(p)),102,0,0,-1,-1,-1,1,"JetPhi=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__BranchesDictLN_TClass),-1,-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}

extern "C" void G__cpp_setup_memvarBranchesDict() {
}
/***********************************************************
************************************************************
************************************************************
************************************************************
************************************************************
************************************************************
************************************************************
***********************************************************/

/*********************************************************
* Member function information setup for each class
*********************************************************/
static void G__setup_memfuncanalysis(void) {
   /* analysis */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__BranchesDictLN_analysis));
   G__tag_memfunc_reset();
}

static void G__setup_memfuncanalysiscLcLBranch(void) {
   /* analysis::Branch */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__BranchesDictLN_analysiscLcLBranch));
   G__memfunc_setup("Branch",590,G__BranchesDict_174_0_1, 105, G__get_linked_tagnum(&G__BranchesDictLN_analysiscLcLBranch), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Variables",921,G__BranchesDict_174_0_2, 117, G__get_linked_tagnum(&G__BranchesDictLN_vectorlEpairlEfloataNcOstringgRcOallocatorlEpairlEfloataNcOstringgRsPgRsPgR), G__defined_typename("analysis::Observables"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Spectators",1064,G__BranchesDict_174_0_3, 117, G__get_linked_tagnum(&G__BranchesDictLN_vectorlEpairlEfloataNcOstringgRcOallocatorlEpairlEfloataNcOstringgRsPgRsPgR), G__defined_typename("analysis::Observables"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("InitialValue",1223,(G__InterfaceMethod) NULL, 102, -1, -1, 0, 0, 1, 2, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__BranchesDict_174_0_5, 85, G__get_linked_tagnum(&G__BranchesDictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&analysis::Branch::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__BranchesDict_174_0_6, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&analysis::Branch::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__BranchesDict_174_0_7, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&analysis::Branch::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__BranchesDict_174_0_8, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&analysis::Branch::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__BranchesDictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__BranchesDict_174_0_12, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__BranchesDict_174_0_13, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&analysis::Branch::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__BranchesDict_174_0_14, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&analysis::Branch::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__BranchesDict_174_0_15, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&analysis::Branch::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__BranchesDict_174_0_16, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&analysis::Branch::DeclFileLine) ), 0);
   // automatic copy constructor
   G__memfunc_setup("Branch", 590, G__BranchesDict_174_0_17, (int) ('i'), G__get_linked_tagnum(&G__BranchesDictLN_analysiscLcLBranch), -1, 0, 1, 1, 1, 0, "u 'analysis::Branch' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~Branch", 716, G__BranchesDict_174_0_18, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__BranchesDict_174_0_19, (int) ('u'), G__get_linked_tagnum(&G__BranchesDictLN_analysiscLcLBranch), -1, 1, 1, 1, 1, 0, "u 'analysis::Branch' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncanalysiscLcLInfoBranch(void) {
   /* analysis::InfoBranch */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__BranchesDictLN_analysiscLcLInfoBranch));
   G__memfunc_setup("InfoBranch",986,G__BranchesDict_175_0_1, 105, G__get_linked_tagnum(&G__BranchesDictLN_analysiscLcLInfoBranch), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__BranchesDict_175_0_2, 85, G__get_linked_tagnum(&G__BranchesDictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&analysis::InfoBranch::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__BranchesDict_175_0_3, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&analysis::InfoBranch::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__BranchesDict_175_0_4, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&analysis::InfoBranch::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__BranchesDict_175_0_5, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&analysis::InfoBranch::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__BranchesDictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__BranchesDict_175_0_9, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__BranchesDict_175_0_10, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&analysis::InfoBranch::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__BranchesDict_175_0_11, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&analysis::InfoBranch::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__BranchesDict_175_0_12, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&analysis::InfoBranch::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__BranchesDict_175_0_13, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&analysis::InfoBranch::DeclFileLine) ), 0);
   // automatic copy constructor
   G__memfunc_setup("InfoBranch", 986, G__BranchesDict_175_0_14, (int) ('i'), G__get_linked_tagnum(&G__BranchesDictLN_analysiscLcLInfoBranch), -1, 0, 1, 1, 1, 0, "u 'analysis::InfoBranch' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~InfoBranch", 1112, G__BranchesDict_175_0_15, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 0);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__BranchesDict_175_0_16, (int) ('u'), G__get_linked_tagnum(&G__BranchesDictLN_analysiscLcLInfoBranch), -1, 1, 1, 1, 1, 0, "u 'analysis::InfoBranch' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncanalysiscLcLHResultBranch(void) {
   /* analysis::HResultBranch */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__BranchesDictLN_analysiscLcLHResultBranch));
   G__memfunc_setup("HResultBranch",1301,G__BranchesDict_176_0_1, 105, G__get_linked_tagnum(&G__BranchesDictLN_analysiscLcLHResultBranch), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__BranchesDict_176_0_2, 85, G__get_linked_tagnum(&G__BranchesDictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&analysis::HResultBranch::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__BranchesDict_176_0_3, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&analysis::HResultBranch::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__BranchesDict_176_0_4, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&analysis::HResultBranch::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__BranchesDict_176_0_5, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&analysis::HResultBranch::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__BranchesDictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__BranchesDict_176_0_9, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__BranchesDict_176_0_10, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&analysis::HResultBranch::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__BranchesDict_176_0_11, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&analysis::HResultBranch::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__BranchesDict_176_0_12, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&analysis::HResultBranch::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__BranchesDict_176_0_13, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&analysis::HResultBranch::DeclFileLine) ), 0);
   // automatic copy constructor
   G__memfunc_setup("HResultBranch", 1301, G__BranchesDict_176_0_14, (int) ('i'), G__get_linked_tagnum(&G__BranchesDictLN_analysiscLcLHResultBranch), -1, 0, 1, 1, 1, 0, "u 'analysis::HResultBranch' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~HResultBranch", 1427, G__BranchesDict_176_0_15, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 0);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__BranchesDict_176_0_16, (int) ('u'), G__get_linked_tagnum(&G__BranchesDictLN_analysiscLcLHResultBranch), -1, 1, 1, 1, 1, 0, "u 'analysis::HResultBranch' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncanalysiscLcLParticleBranch(void) {
   /* analysis::ParticleBranch */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__BranchesDictLN_analysiscLcLParticleBranch));
   G__memfunc_setup("ParticleBranch",1410,G__BranchesDict_177_0_1, 105, G__get_linked_tagnum(&G__BranchesDictLN_analysiscLcLParticleBranch), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Variables",921,G__BranchesDict_177_0_2, 117, G__get_linked_tagnum(&G__BranchesDictLN_vectorlEpairlEfloataNcOstringgRcOallocatorlEpairlEfloataNcOstringgRsPgRsPgR), G__defined_typename("analysis::Observables"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Spectators",1064,(G__InterfaceMethod) NULL,117, G__get_linked_tagnum(&G__BranchesDictLN_vectorlEpairlEfloataNcOstringgRcOallocatorlEpairlEfloataNcOstringgRsPgRsPgR), G__defined_typename("analysis::Observables"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Class",502,G__BranchesDict_177_0_4, 85, G__get_linked_tagnum(&G__BranchesDictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&analysis::ParticleBranch::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__BranchesDict_177_0_5, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&analysis::ParticleBranch::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__BranchesDict_177_0_6, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&analysis::ParticleBranch::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__BranchesDict_177_0_7, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&analysis::ParticleBranch::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__BranchesDictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__BranchesDict_177_0_11, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__BranchesDict_177_0_12, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&analysis::ParticleBranch::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__BranchesDict_177_0_13, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&analysis::ParticleBranch::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__BranchesDict_177_0_14, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&analysis::ParticleBranch::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__BranchesDict_177_0_15, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&analysis::ParticleBranch::DeclFileLine) ), 0);
   // automatic copy constructor
   G__memfunc_setup("ParticleBranch", 1410, G__BranchesDict_177_0_16, (int) ('i'), G__get_linked_tagnum(&G__BranchesDictLN_analysiscLcLParticleBranch), -1, 0, 1, 1, 1, 0, "u 'analysis::ParticleBranch' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~ParticleBranch", 1536, G__BranchesDict_177_0_17, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 0);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__BranchesDict_177_0_18, (int) ('u'), G__get_linked_tagnum(&G__BranchesDictLN_analysiscLcLParticleBranch), -1, 1, 1, 1, 1, 0, "u 'analysis::ParticleBranch' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncanalysiscLcLBottomBranch(void) {
   /* analysis::BottomBranch */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__BranchesDictLN_analysiscLcLBottomBranch));
   G__memfunc_setup("BottomBranch",1219,G__BranchesDict_178_0_1, 105, G__get_linked_tagnum(&G__BranchesDictLN_analysiscLcLBottomBranch), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Variables",921,G__BranchesDict_178_0_2, 117, G__get_linked_tagnum(&G__BranchesDictLN_vectorlEpairlEfloataNcOstringgRcOallocatorlEpairlEfloataNcOstringgRsPgRsPgR), G__defined_typename("analysis::Observables"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Spectators",1064,(G__InterfaceMethod) NULL,117, G__get_linked_tagnum(&G__BranchesDictLN_vectorlEpairlEfloataNcOstringgRcOallocatorlEpairlEfloataNcOstringgRsPgRsPgR), G__defined_typename("analysis::Observables"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Class",502,G__BranchesDict_178_0_4, 85, G__get_linked_tagnum(&G__BranchesDictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&analysis::BottomBranch::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__BranchesDict_178_0_5, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&analysis::BottomBranch::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__BranchesDict_178_0_6, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&analysis::BottomBranch::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__BranchesDict_178_0_7, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&analysis::BottomBranch::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__BranchesDictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__BranchesDict_178_0_11, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__BranchesDict_178_0_12, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&analysis::BottomBranch::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__BranchesDict_178_0_13, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&analysis::BottomBranch::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__BranchesDict_178_0_14, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&analysis::BottomBranch::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__BranchesDict_178_0_15, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&analysis::BottomBranch::DeclFileLine) ), 0);
   // automatic copy constructor
   G__memfunc_setup("BottomBranch", 1219, G__BranchesDict_178_0_16, (int) ('i'), G__get_linked_tagnum(&G__BranchesDictLN_analysiscLcLBottomBranch), -1, 0, 1, 1, 1, 0, "u 'analysis::BottomBranch' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~BottomBranch", 1345, G__BranchesDict_178_0_17, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 0);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__BranchesDict_178_0_18, (int) ('u'), G__get_linked_tagnum(&G__BranchesDictLN_analysiscLcLBottomBranch), -1, 1, 1, 1, 1, 0, "u 'analysis::BottomBranch' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncanalysiscLcLTauBranch(void) {
   /* analysis::TauBranch */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__BranchesDictLN_analysiscLcLTauBranch));
   G__memfunc_setup("TauBranch",888,G__BranchesDict_179_0_1, 105, G__get_linked_tagnum(&G__BranchesDictLN_analysiscLcLTauBranch), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__BranchesDict_179_0_2, 85, G__get_linked_tagnum(&G__BranchesDictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&analysis::TauBranch::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__BranchesDict_179_0_3, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&analysis::TauBranch::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__BranchesDict_179_0_4, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&analysis::TauBranch::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__BranchesDict_179_0_5, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&analysis::TauBranch::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__BranchesDictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__BranchesDict_179_0_9, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__BranchesDict_179_0_10, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&analysis::TauBranch::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__BranchesDict_179_0_11, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&analysis::TauBranch::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__BranchesDict_179_0_12, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&analysis::TauBranch::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__BranchesDict_179_0_13, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&analysis::TauBranch::DeclFileLine) ), 0);
   // automatic copy constructor
   G__memfunc_setup("TauBranch", 888, G__BranchesDict_179_0_14, (int) ('i'), G__get_linked_tagnum(&G__BranchesDictLN_analysiscLcLTauBranch), -1, 0, 1, 1, 1, 0, "u 'analysis::TauBranch' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~TauBranch", 1014, G__BranchesDict_179_0_15, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 0);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__BranchesDict_179_0_16, (int) ('u'), G__get_linked_tagnum(&G__BranchesDictLN_analysiscLcLTauBranch), -1, 1, 1, 1, 1, 0, "u 'analysis::TauBranch' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncanalysiscLcLPairBranch(void) {
   /* analysis::PairBranch */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__BranchesDictLN_analysiscLcLPairBranch));
   G__memfunc_setup("PairBranch",986,G__BranchesDict_180_0_1, 105, G__get_linked_tagnum(&G__BranchesDictLN_analysiscLcLPairBranch), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Variables",921,G__BranchesDict_180_0_2, 117, G__get_linked_tagnum(&G__BranchesDictLN_vectorlEpairlEfloataNcOstringgRcOallocatorlEpairlEfloataNcOstringgRsPgRsPgR), G__defined_typename("analysis::Observables"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Spectators",1064,(G__InterfaceMethod) NULL,117, G__get_linked_tagnum(&G__BranchesDictLN_vectorlEpairlEfloataNcOstringgRcOallocatorlEpairlEfloataNcOstringgRsPgRsPgR), G__defined_typename("analysis::Observables"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Class",502,G__BranchesDict_180_0_4, 85, G__get_linked_tagnum(&G__BranchesDictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&analysis::PairBranch::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__BranchesDict_180_0_5, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&analysis::PairBranch::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__BranchesDict_180_0_6, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&analysis::PairBranch::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__BranchesDict_180_0_7, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&analysis::PairBranch::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__BranchesDictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__BranchesDict_180_0_11, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__BranchesDict_180_0_12, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&analysis::PairBranch::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__BranchesDict_180_0_13, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&analysis::PairBranch::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__BranchesDict_180_0_14, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&analysis::PairBranch::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__BranchesDict_180_0_15, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&analysis::PairBranch::DeclFileLine) ), 0);
   // automatic copy constructor
   G__memfunc_setup("PairBranch", 986, G__BranchesDict_180_0_16, (int) ('i'), G__get_linked_tagnum(&G__BranchesDictLN_analysiscLcLPairBranch), -1, 0, 1, 1, 1, 0, "u 'analysis::PairBranch' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~PairBranch", 1112, G__BranchesDict_180_0_17, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 0);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__BranchesDict_180_0_18, (int) ('u'), G__get_linked_tagnum(&G__BranchesDictLN_analysiscLcLPairBranch), -1, 1, 1, 1, 1, 0, "u 'analysis::PairBranch' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncanalysiscLcLMultiBranch(void) {
   /* analysis::MultiBranch */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__BranchesDictLN_analysiscLcLMultiBranch));
   G__memfunc_setup("MultiBranch",1113,G__BranchesDict_181_0_1, 105, G__get_linked_tagnum(&G__BranchesDictLN_analysiscLcLMultiBranch), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Variables",921,G__BranchesDict_181_0_2, 117, G__get_linked_tagnum(&G__BranchesDictLN_vectorlEpairlEfloataNcOstringgRcOallocatorlEpairlEfloataNcOstringgRsPgRsPgR), G__defined_typename("analysis::Observables"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__BranchesDict_181_0_3, 85, G__get_linked_tagnum(&G__BranchesDictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&analysis::MultiBranch::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__BranchesDict_181_0_4, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&analysis::MultiBranch::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__BranchesDict_181_0_5, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&analysis::MultiBranch::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__BranchesDict_181_0_6, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&analysis::MultiBranch::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__BranchesDictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__BranchesDict_181_0_10, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__BranchesDict_181_0_11, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&analysis::MultiBranch::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__BranchesDict_181_0_12, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&analysis::MultiBranch::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__BranchesDict_181_0_13, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&analysis::MultiBranch::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__BranchesDict_181_0_14, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&analysis::MultiBranch::DeclFileLine) ), 0);
   // automatic copy constructor
   G__memfunc_setup("MultiBranch", 1113, G__BranchesDict_181_0_15, (int) ('i'), G__get_linked_tagnum(&G__BranchesDictLN_analysiscLcLMultiBranch), -1, 0, 1, 1, 1, 0, "u 'analysis::MultiBranch' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~MultiBranch", 1239, G__BranchesDict_181_0_16, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 0);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__BranchesDict_181_0_17, (int) ('u'), G__get_linked_tagnum(&G__BranchesDictLN_analysiscLcLMultiBranch), -1, 1, 1, 1, 1, 0, "u 'analysis::MultiBranch' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncanalysiscLcLWHadronicBranch(void) {
   /* analysis::WHadronicBranch */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__BranchesDictLN_analysiscLcLWHadronicBranch));
   G__memfunc_setup("WHadronicBranch",1485,G__BranchesDict_182_0_1, 105, G__get_linked_tagnum(&G__BranchesDictLN_analysiscLcLWHadronicBranch), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__BranchesDict_182_0_2, 85, G__get_linked_tagnum(&G__BranchesDictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&analysis::WHadronicBranch::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__BranchesDict_182_0_3, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&analysis::WHadronicBranch::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__BranchesDict_182_0_4, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&analysis::WHadronicBranch::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__BranchesDict_182_0_5, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&analysis::WHadronicBranch::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__BranchesDictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__BranchesDict_182_0_9, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__BranchesDict_182_0_10, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&analysis::WHadronicBranch::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__BranchesDict_182_0_11, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&analysis::WHadronicBranch::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__BranchesDict_182_0_12, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&analysis::WHadronicBranch::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__BranchesDict_182_0_13, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&analysis::WHadronicBranch::DeclFileLine) ), 0);
   // automatic copy constructor
   G__memfunc_setup("WHadronicBranch", 1485, G__BranchesDict_182_0_14, (int) ('i'), G__get_linked_tagnum(&G__BranchesDictLN_analysiscLcLWHadronicBranch), -1, 0, 1, 1, 1, 0, "u 'analysis::WHadronicBranch' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~WHadronicBranch", 1611, G__BranchesDict_182_0_15, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 0);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__BranchesDict_182_0_16, (int) ('u'), G__get_linked_tagnum(&G__BranchesDictLN_analysiscLcLWHadronicBranch), -1, 1, 1, 1, 1, 0, "u 'analysis::WHadronicBranch' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncanalysiscLcLZHadronicBranch(void) {
   /* analysis::ZHadronicBranch */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__BranchesDictLN_analysiscLcLZHadronicBranch));
   G__memfunc_setup("ZHadronicBranch",1488,G__BranchesDict_183_0_1, 105, G__get_linked_tagnum(&G__BranchesDictLN_analysiscLcLZHadronicBranch), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__BranchesDict_183_0_2, 85, G__get_linked_tagnum(&G__BranchesDictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&analysis::ZHadronicBranch::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__BranchesDict_183_0_3, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&analysis::ZHadronicBranch::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__BranchesDict_183_0_4, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&analysis::ZHadronicBranch::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__BranchesDict_183_0_5, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&analysis::ZHadronicBranch::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__BranchesDictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__BranchesDict_183_0_9, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__BranchesDict_183_0_10, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&analysis::ZHadronicBranch::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__BranchesDict_183_0_11, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&analysis::ZHadronicBranch::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__BranchesDict_183_0_12, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&analysis::ZHadronicBranch::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__BranchesDict_183_0_13, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&analysis::ZHadronicBranch::DeclFileLine) ), 0);
   // automatic copy constructor
   G__memfunc_setup("ZHadronicBranch", 1488, G__BranchesDict_183_0_14, (int) ('i'), G__get_linked_tagnum(&G__BranchesDictLN_analysiscLcLZHadronicBranch), -1, 0, 1, 1, 1, 0, "u 'analysis::ZHadronicBranch' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~ZHadronicBranch", 1614, G__BranchesDict_183_0_15, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 0);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__BranchesDict_183_0_16, (int) ('u'), G__get_linked_tagnum(&G__BranchesDictLN_analysiscLcLZHadronicBranch), -1, 1, 1, 1, 1, 0, "u 'analysis::ZHadronicBranch' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncanalysiscLcLJetPairBranch(void) {
   /* analysis::JetPairBranch */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__BranchesDictLN_analysiscLcLJetPairBranch));
   G__memfunc_setup("JetPairBranch",1277,G__BranchesDict_184_0_1, 105, G__get_linked_tagnum(&G__BranchesDictLN_analysiscLcLJetPairBranch), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__BranchesDict_184_0_2, 85, G__get_linked_tagnum(&G__BranchesDictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&analysis::JetPairBranch::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__BranchesDict_184_0_3, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&analysis::JetPairBranch::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__BranchesDict_184_0_4, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&analysis::JetPairBranch::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__BranchesDict_184_0_5, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&analysis::JetPairBranch::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__BranchesDictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__BranchesDict_184_0_9, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__BranchesDict_184_0_10, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&analysis::JetPairBranch::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__BranchesDict_184_0_11, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&analysis::JetPairBranch::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__BranchesDict_184_0_12, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&analysis::JetPairBranch::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__BranchesDict_184_0_13, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&analysis::JetPairBranch::DeclFileLine) ), 0);
   // automatic copy constructor
   G__memfunc_setup("JetPairBranch", 1277, G__BranchesDict_184_0_14, (int) ('i'), G__get_linked_tagnum(&G__BranchesDictLN_analysiscLcLJetPairBranch), -1, 0, 1, 1, 1, 0, "u 'analysis::JetPairBranch' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~JetPairBranch", 1403, G__BranchesDict_184_0_15, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 0);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__BranchesDict_184_0_16, (int) ('u'), G__get_linked_tagnum(&G__BranchesDictLN_analysiscLcLJetPairBranch), -1, 1, 1, 1, 1, 0, "u 'analysis::JetPairBranch' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncanalysiscLcLTripletJetPairBranch(void) {
   /* analysis::TripletJetPairBranch */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__BranchesDictLN_analysiscLcLTripletJetPairBranch));
   G__memfunc_setup("TripletJetPairBranch",2017,G__BranchesDict_185_0_1, 105, G__get_linked_tagnum(&G__BranchesDictLN_analysiscLcLTripletJetPairBranch), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Variables",921,G__BranchesDict_185_0_2, 117, G__get_linked_tagnum(&G__BranchesDictLN_vectorlEpairlEfloataNcOstringgRcOallocatorlEpairlEfloataNcOstringgRsPgRsPgR), G__defined_typename("analysis::Observables"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__BranchesDict_185_0_3, 85, G__get_linked_tagnum(&G__BranchesDictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&analysis::TripletJetPairBranch::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__BranchesDict_185_0_4, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&analysis::TripletJetPairBranch::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__BranchesDict_185_0_5, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&analysis::TripletJetPairBranch::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__BranchesDict_185_0_6, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&analysis::TripletJetPairBranch::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__BranchesDictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__BranchesDict_185_0_10, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__BranchesDict_185_0_11, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&analysis::TripletJetPairBranch::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__BranchesDict_185_0_12, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&analysis::TripletJetPairBranch::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__BranchesDict_185_0_13, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&analysis::TripletJetPairBranch::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__BranchesDict_185_0_14, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&analysis::TripletJetPairBranch::DeclFileLine) ), 0);
   // automatic copy constructor
   G__memfunc_setup("TripletJetPairBranch", 2017, G__BranchesDict_185_0_15, (int) ('i'), G__get_linked_tagnum(&G__BranchesDictLN_analysiscLcLTripletJetPairBranch), -1, 0, 1, 1, 1, 0, "u 'analysis::TripletJetPairBranch' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~TripletJetPairBranch", 2143, G__BranchesDict_185_0_16, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 0);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__BranchesDict_185_0_17, (int) ('u'), G__get_linked_tagnum(&G__BranchesDictLN_analysiscLcLTripletJetPairBranch), -1, 1, 1, 1, 1, 0, "u 'analysis::TripletJetPairBranch' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncanalysiscLcLWSemiBranch(void) {
   /* analysis::WSemiBranch */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__BranchesDictLN_analysiscLcLWSemiBranch));
   G__memfunc_setup("WSemiBranch",1075,G__BranchesDict_186_0_1, 105, G__get_linked_tagnum(&G__BranchesDictLN_analysiscLcLWSemiBranch), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Variables",921,G__BranchesDict_186_0_2, 117, G__get_linked_tagnum(&G__BranchesDictLN_vectorlEpairlEfloataNcOstringgRcOallocatorlEpairlEfloataNcOstringgRsPgRsPgR), G__defined_typename("analysis::Observables"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__BranchesDict_186_0_3, 85, G__get_linked_tagnum(&G__BranchesDictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&analysis::WSemiBranch::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__BranchesDict_186_0_4, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&analysis::WSemiBranch::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__BranchesDict_186_0_5, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&analysis::WSemiBranch::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__BranchesDict_186_0_6, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&analysis::WSemiBranch::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__BranchesDictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__BranchesDict_186_0_10, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__BranchesDict_186_0_11, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&analysis::WSemiBranch::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__BranchesDict_186_0_12, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&analysis::WSemiBranch::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__BranchesDict_186_0_13, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&analysis::WSemiBranch::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__BranchesDict_186_0_14, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&analysis::WSemiBranch::DeclFileLine) ), 0);
   // automatic copy constructor
   G__memfunc_setup("WSemiBranch", 1075, G__BranchesDict_186_0_15, (int) ('i'), G__get_linked_tagnum(&G__BranchesDictLN_analysiscLcLWSemiBranch), -1, 0, 1, 1, 1, 0, "u 'analysis::WSemiBranch' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~WSemiBranch", 1201, G__BranchesDict_186_0_16, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 0);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__BranchesDict_186_0_17, (int) ('u'), G__get_linked_tagnum(&G__BranchesDictLN_analysiscLcLWSemiBranch), -1, 1, 1, 1, 1, 0, "u 'analysis::WSemiBranch' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncanalysiscLcLTopHadronicBranch(void) {
   /* analysis::TopHadronicBranch */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__BranchesDictLN_analysiscLcLTopHadronicBranch));
   G__memfunc_setup("TopHadronicBranch",1705,G__BranchesDict_187_0_1, 105, G__get_linked_tagnum(&G__BranchesDictLN_analysiscLcLTopHadronicBranch), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__BranchesDict_187_0_2, 85, G__get_linked_tagnum(&G__BranchesDictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&analysis::TopHadronicBranch::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__BranchesDict_187_0_3, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&analysis::TopHadronicBranch::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__BranchesDict_187_0_4, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&analysis::TopHadronicBranch::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__BranchesDict_187_0_5, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&analysis::TopHadronicBranch::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__BranchesDictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__BranchesDict_187_0_9, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__BranchesDict_187_0_10, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&analysis::TopHadronicBranch::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__BranchesDict_187_0_11, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&analysis::TopHadronicBranch::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__BranchesDict_187_0_12, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&analysis::TopHadronicBranch::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__BranchesDict_187_0_13, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&analysis::TopHadronicBranch::DeclFileLine) ), 0);
   // automatic copy constructor
   G__memfunc_setup("TopHadronicBranch", 1705, G__BranchesDict_187_0_14, (int) ('i'), G__get_linked_tagnum(&G__BranchesDictLN_analysiscLcLTopHadronicBranch), -1, 0, 1, 1, 1, 0, "u 'analysis::TopHadronicBranch' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~TopHadronicBranch", 1831, G__BranchesDict_187_0_15, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 0);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__BranchesDict_187_0_16, (int) ('u'), G__get_linked_tagnum(&G__BranchesDictLN_analysiscLcLTopHadronicBranch), -1, 1, 1, 1, 1, 0, "u 'analysis::TopHadronicBranch' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncanalysiscLcLTopLeptonicBranch(void) {
   /* analysis::TopLeptonicBranch */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__BranchesDictLN_analysiscLcLTopLeptonicBranch));
   G__memfunc_setup("TopLeptonicBranch",1727,G__BranchesDict_188_0_1, 105, G__get_linked_tagnum(&G__BranchesDictLN_analysiscLcLTopLeptonicBranch), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Variables",921,G__BranchesDict_188_0_2, 117, G__get_linked_tagnum(&G__BranchesDictLN_vectorlEpairlEfloataNcOstringgRcOallocatorlEpairlEfloataNcOstringgRsPgRsPgR), G__defined_typename("analysis::Observables"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__BranchesDict_188_0_3, 85, G__get_linked_tagnum(&G__BranchesDictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&analysis::TopLeptonicBranch::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__BranchesDict_188_0_4, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&analysis::TopLeptonicBranch::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__BranchesDict_188_0_5, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&analysis::TopLeptonicBranch::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__BranchesDict_188_0_6, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&analysis::TopLeptonicBranch::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__BranchesDictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__BranchesDict_188_0_10, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__BranchesDict_188_0_11, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&analysis::TopLeptonicBranch::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__BranchesDict_188_0_12, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&analysis::TopLeptonicBranch::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__BranchesDict_188_0_13, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&analysis::TopLeptonicBranch::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__BranchesDict_188_0_14, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&analysis::TopLeptonicBranch::DeclFileLine) ), 0);
   // automatic copy constructor
   G__memfunc_setup("TopLeptonicBranch", 1727, G__BranchesDict_188_0_15, (int) ('i'), G__get_linked_tagnum(&G__BranchesDictLN_analysiscLcLTopLeptonicBranch), -1, 0, 1, 1, 1, 0, "u 'analysis::TopLeptonicBranch' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~TopLeptonicBranch", 1853, G__BranchesDict_188_0_16, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 0);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__BranchesDict_188_0_17, (int) ('u'), G__get_linked_tagnum(&G__BranchesDictLN_analysiscLcLTopLeptonicBranch), -1, 1, 1, 1, 1, 0, "u 'analysis::TopLeptonicBranch' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncanalysiscLcLTopSemiBranch(void) {
   /* analysis::TopSemiBranch */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__BranchesDictLN_analysiscLcLTopSemiBranch));
   G__memfunc_setup("TopSemiBranch",1295,G__BranchesDict_189_0_1, 105, G__get_linked_tagnum(&G__BranchesDictLN_analysiscLcLTopSemiBranch), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Variables",921,G__BranchesDict_189_0_2, 117, G__get_linked_tagnum(&G__BranchesDictLN_vectorlEpairlEfloataNcOstringgRcOallocatorlEpairlEfloataNcOstringgRsPgRsPgR), G__defined_typename("analysis::Observables"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__BranchesDict_189_0_3, 85, G__get_linked_tagnum(&G__BranchesDictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&analysis::TopSemiBranch::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__BranchesDict_189_0_4, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&analysis::TopSemiBranch::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__BranchesDict_189_0_5, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&analysis::TopSemiBranch::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__BranchesDict_189_0_6, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&analysis::TopSemiBranch::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__BranchesDictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__BranchesDict_189_0_10, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__BranchesDict_189_0_11, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&analysis::TopSemiBranch::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__BranchesDict_189_0_12, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&analysis::TopSemiBranch::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__BranchesDict_189_0_13, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&analysis::TopSemiBranch::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__BranchesDict_189_0_14, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&analysis::TopSemiBranch::DeclFileLine) ), 0);
   // automatic copy constructor
   G__memfunc_setup("TopSemiBranch", 1295, G__BranchesDict_189_0_15, (int) ('i'), G__get_linked_tagnum(&G__BranchesDictLN_analysiscLcLTopSemiBranch), -1, 0, 1, 1, 1, 0, "u 'analysis::TopSemiBranch' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~TopSemiBranch", 1421, G__BranchesDict_189_0_16, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 0);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__BranchesDict_189_0_17, (int) ('u'), G__get_linked_tagnum(&G__BranchesDictLN_analysiscLcLTopSemiBranch), -1, 1, 1, 1, 1, 0, "u 'analysis::TopSemiBranch' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncanalysiscLcLHiggsBranch(void) {
   /* analysis::HiggsBranch */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__BranchesDictLN_analysiscLcLHiggsBranch));
   G__memfunc_setup("HiggsBranch",1088,G__BranchesDict_190_0_1, 105, G__get_linked_tagnum(&G__BranchesDictLN_analysiscLcLHiggsBranch), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__BranchesDict_190_0_2, 85, G__get_linked_tagnum(&G__BranchesDictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&analysis::HiggsBranch::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__BranchesDict_190_0_3, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&analysis::HiggsBranch::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__BranchesDict_190_0_4, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&analysis::HiggsBranch::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__BranchesDict_190_0_5, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&analysis::HiggsBranch::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__BranchesDictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__BranchesDict_190_0_9, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__BranchesDict_190_0_10, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&analysis::HiggsBranch::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__BranchesDict_190_0_11, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&analysis::HiggsBranch::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__BranchesDict_190_0_12, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&analysis::HiggsBranch::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__BranchesDict_190_0_13, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&analysis::HiggsBranch::DeclFileLine) ), 0);
   // automatic copy constructor
   G__memfunc_setup("HiggsBranch", 1088, G__BranchesDict_190_0_14, (int) ('i'), G__get_linked_tagnum(&G__BranchesDictLN_analysiscLcLHiggsBranch), -1, 0, 1, 1, 1, 0, "u 'analysis::HiggsBranch' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~HiggsBranch", 1214, G__BranchesDict_190_0_15, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 0);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__BranchesDict_190_0_16, (int) ('u'), G__get_linked_tagnum(&G__BranchesDictLN_analysiscLcLHiggsBranch), -1, 1, 1, 1, 1, 0, "u 'analysis::HiggsBranch' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncanalysiscLcLEventBottomTaggerBranch(void) {
   /* analysis::EventBottomTaggerBranch */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__BranchesDictLN_analysiscLcLEventBottomTaggerBranch));
   G__memfunc_setup("EventBottomTaggerBranch",2335,G__BranchesDict_191_0_1, 105, G__get_linked_tagnum(&G__BranchesDictLN_analysiscLcLEventBottomTaggerBranch), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__BranchesDict_191_0_2, 85, G__get_linked_tagnum(&G__BranchesDictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&analysis::EventBottomTaggerBranch::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__BranchesDict_191_0_3, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&analysis::EventBottomTaggerBranch::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__BranchesDict_191_0_4, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&analysis::EventBottomTaggerBranch::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__BranchesDict_191_0_5, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&analysis::EventBottomTaggerBranch::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__BranchesDictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__BranchesDict_191_0_9, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__BranchesDict_191_0_10, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&analysis::EventBottomTaggerBranch::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__BranchesDict_191_0_11, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&analysis::EventBottomTaggerBranch::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__BranchesDict_191_0_12, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&analysis::EventBottomTaggerBranch::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__BranchesDict_191_0_13, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&analysis::EventBottomTaggerBranch::DeclFileLine) ), 0);
   // automatic copy constructor
   G__memfunc_setup("EventBottomTaggerBranch", 2335, G__BranchesDict_191_0_14, (int) ('i'), 
G__get_linked_tagnum(&G__BranchesDictLN_analysiscLcLEventBottomTaggerBranch), -1, 0, 1, 1, 1, 0, "u 'analysis::EventBottomTaggerBranch' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~EventBottomTaggerBranch", 2461, G__BranchesDict_191_0_15, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 0);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__BranchesDict_191_0_16, (int) ('u'), G__get_linked_tagnum(&G__BranchesDictLN_analysiscLcLEventBottomTaggerBranch), -1, 1, 1, 1, 1, 0, "u 'analysis::EventBottomTaggerBranch' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncanalysiscLcLHTopLeptonBranch(void) {
   /* analysis::HTopLeptonBranch */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__BranchesDictLN_analysiscLcLHTopLeptonBranch));
   G__memfunc_setup("HTopLeptonBranch",1595,G__BranchesDict_192_0_1, 105, G__get_linked_tagnum(&G__BranchesDictLN_analysiscLcLHTopLeptonBranch), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__BranchesDict_192_0_2, 85, G__get_linked_tagnum(&G__BranchesDictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&analysis::HTopLeptonBranch::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__BranchesDict_192_0_3, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&analysis::HTopLeptonBranch::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__BranchesDict_192_0_4, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&analysis::HTopLeptonBranch::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__BranchesDict_192_0_5, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&analysis::HTopLeptonBranch::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__BranchesDictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__BranchesDict_192_0_9, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__BranchesDict_192_0_10, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&analysis::HTopLeptonBranch::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__BranchesDict_192_0_11, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&analysis::HTopLeptonBranch::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__BranchesDict_192_0_12, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&analysis::HTopLeptonBranch::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__BranchesDict_192_0_13, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&analysis::HTopLeptonBranch::DeclFileLine) ), 0);
   // automatic copy constructor
   G__memfunc_setup("HTopLeptonBranch", 1595, G__BranchesDict_192_0_14, (int) ('i'), G__get_linked_tagnum(&G__BranchesDictLN_analysiscLcLHTopLeptonBranch), -1, 0, 1, 1, 1, 0, "u 'analysis::HTopLeptonBranch' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~HTopLeptonBranch", 1721, G__BranchesDict_192_0_15, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 0);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__BranchesDict_192_0_16, (int) ('u'), G__get_linked_tagnum(&G__BranchesDictLN_analysiscLcLHTopLeptonBranch), -1, 1, 1, 1, 1, 0, "u 'analysis::HTopLeptonBranch' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncanalysiscLcLEventBranch(void) {
   /* analysis::EventBranch */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__BranchesDictLN_analysiscLcLEventBranch));
   G__memfunc_setup("EventBranch",1104,G__BranchesDict_193_0_1, 105, G__get_linked_tagnum(&G__BranchesDictLN_analysiscLcLEventBranch), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Variables",921,G__BranchesDict_193_0_2, 117, G__get_linked_tagnum(&G__BranchesDictLN_vectorlEpairlEfloataNcOstringgRcOallocatorlEpairlEfloataNcOstringgRsPgRsPgR), G__defined_typename("analysis::Observables"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__BranchesDict_193_0_3, 85, G__get_linked_tagnum(&G__BranchesDictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&analysis::EventBranch::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__BranchesDict_193_0_4, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&analysis::EventBranch::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__BranchesDict_193_0_5, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&analysis::EventBranch::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__BranchesDict_193_0_6, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&analysis::EventBranch::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__BranchesDictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__BranchesDict_193_0_10, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__BranchesDict_193_0_11, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&analysis::EventBranch::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__BranchesDict_193_0_12, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&analysis::EventBranch::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__BranchesDict_193_0_13, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&analysis::EventBranch::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__BranchesDict_193_0_14, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&analysis::EventBranch::DeclFileLine) ), 0);
   // automatic copy constructor
   G__memfunc_setup("EventBranch", 1104, G__BranchesDict_193_0_15, (int) ('i'), G__get_linked_tagnum(&G__BranchesDictLN_analysiscLcLEventBranch), -1, 0, 1, 1, 1, 0, "u 'analysis::EventBranch' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~EventBranch", 1230, G__BranchesDict_193_0_16, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 0);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__BranchesDict_193_0_17, (int) ('u'), G__get_linked_tagnum(&G__BranchesDictLN_analysiscLcLEventBranch), -1, 1, 1, 1, 1, 0, "u 'analysis::EventBranch' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}


/*********************************************************
* Member function information setup
*********************************************************/
extern "C" void G__cpp_setup_memfuncBranchesDict() {
}

/*********************************************************
* Global variable information setup for each class
*********************************************************/
static void G__cpp_setup_global0() {

   /* Setting up global variables */
   G__resetplocal();

}

static void G__cpp_setup_global1() {

   G__resetglobalenv();
}
extern "C" void G__cpp_setup_globalBranchesDict() {
  G__cpp_setup_global0();
  G__cpp_setup_global1();
}

/*********************************************************
* Global function information setup for each class
*********************************************************/
static void G__cpp_setup_func0() {
   G__lastifuncposition();

}

static void G__cpp_setup_func1() {
}

static void G__cpp_setup_func2() {
}

static void G__cpp_setup_func3() {
}

static void G__cpp_setup_func4() {
}

static void G__cpp_setup_func5() {
}

static void G__cpp_setup_func6() {
}

static void G__cpp_setup_func7() {
}

static void G__cpp_setup_func8() {
}

static void G__cpp_setup_func9() {
}

static void G__cpp_setup_func10() {
}

static void G__cpp_setup_func11() {
}

static void G__cpp_setup_func12() {
}

static void G__cpp_setup_func13() {

   G__resetifuncposition();
}

extern "C" void G__cpp_setup_funcBranchesDict() {
  G__cpp_setup_func0();
  G__cpp_setup_func1();
  G__cpp_setup_func2();
  G__cpp_setup_func3();
  G__cpp_setup_func4();
  G__cpp_setup_func5();
  G__cpp_setup_func6();
  G__cpp_setup_func7();
  G__cpp_setup_func8();
  G__cpp_setup_func9();
  G__cpp_setup_func10();
  G__cpp_setup_func11();
  G__cpp_setup_func12();
  G__cpp_setup_func13();
}

/*********************************************************
* Class,struct,union,enum tag information setup
*********************************************************/
/* Setup class/struct taginfo */
G__linked_taginfo G__BranchesDictLN_TClass = { "TClass" , 99 , -1 };
G__linked_taginfo G__BranchesDictLN_TBuffer = { "TBuffer" , 99 , -1 };
G__linked_taginfo G__BranchesDictLN_TMemberInspector = { "TMemberInspector" , 99 , -1 };
G__linked_taginfo G__BranchesDictLN_TObject = { "TObject" , 99 , -1 };
G__linked_taginfo G__BranchesDictLN_string = { "string" , 99 , -1 };
G__linked_taginfo G__BranchesDictLN_vectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgR = { "vector<ROOT::TSchemaHelper,allocator<ROOT::TSchemaHelper> >" , 99 , -1 };
G__linked_taginfo G__BranchesDictLN_reverse_iteratorlEvectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgRcLcLiteratorgR = { "reverse_iterator<vector<ROOT::TSchemaHelper,allocator<ROOT::TSchemaHelper> >::iterator>" , 99 , -1 };
G__linked_taginfo G__BranchesDictLN_vectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgR = { "vector<TVirtualArray*,allocator<TVirtualArray*> >" , 99 , -1 };
G__linked_taginfo G__BranchesDictLN_reverse_iteratorlEvectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgRcLcLiteratorgR = { "reverse_iterator<vector<TVirtualArray*,allocator<TVirtualArray*> >::iterator>" , 99 , -1 };
G__linked_taginfo G__BranchesDictLN_analysis = { "analysis" , 110 , -1 };
G__linked_taginfo G__BranchesDictLN_pairlEfloataNcOstringgR = { "pair<float&,string>" , 115 , -1 };
G__linked_taginfo G__BranchesDictLN_vectorlEpairlEfloataNcOstringgRcOallocatorlEpairlEfloataNcOstringgRsPgRsPgR = { "vector<pair<float&,string>,allocator<pair<float&,string> > >" , 99 , -1 };
G__linked_taginfo G__BranchesDictLN_reverse_iteratorlEvectorlEpairlEfloataNcOstringgRcOallocatorlEpairlEfloataNcOstringgRsPgRsPgRcLcLiteratorgR = { "reverse_iterator<vector<pair<float&,string>,allocator<pair<float&,string> > >::iterator>" , 99 , -1 };
G__linked_taginfo G__BranchesDictLN_analysiscLcLBranch = { "analysis::Branch" , 99 , -1 };
G__linked_taginfo G__BranchesDictLN_analysiscLcLInfoBranch = { "analysis::InfoBranch" , 99 , -1 };
G__linked_taginfo G__BranchesDictLN_analysiscLcLHResultBranch = { "analysis::HResultBranch" , 99 , -1 };
G__linked_taginfo G__BranchesDictLN_analysiscLcLParticleBranch = { "analysis::ParticleBranch" , 99 , -1 };
G__linked_taginfo G__BranchesDictLN_analysiscLcLBottomBranch = { "analysis::BottomBranch" , 99 , -1 };
G__linked_taginfo G__BranchesDictLN_analysiscLcLTauBranch = { "analysis::TauBranch" , 99 , -1 };
G__linked_taginfo G__BranchesDictLN_analysiscLcLPairBranch = { "analysis::PairBranch" , 99 , -1 };
G__linked_taginfo G__BranchesDictLN_analysiscLcLMultiBranch = { "analysis::MultiBranch" , 99 , -1 };
G__linked_taginfo G__BranchesDictLN_analysiscLcLWHadronicBranch = { "analysis::WHadronicBranch" , 99 , -1 };
G__linked_taginfo G__BranchesDictLN_analysiscLcLZHadronicBranch = { "analysis::ZHadronicBranch" , 99 , -1 };
G__linked_taginfo G__BranchesDictLN_analysiscLcLJetPairBranch = { "analysis::JetPairBranch" , 99 , -1 };
G__linked_taginfo G__BranchesDictLN_analysiscLcLTripletJetPairBranch = { "analysis::TripletJetPairBranch" , 99 , -1 };
G__linked_taginfo G__BranchesDictLN_analysiscLcLWSemiBranch = { "analysis::WSemiBranch" , 99 , -1 };
G__linked_taginfo G__BranchesDictLN_analysiscLcLTopHadronicBranch = { "analysis::TopHadronicBranch" , 99 , -1 };
G__linked_taginfo G__BranchesDictLN_analysiscLcLTopLeptonicBranch = { "analysis::TopLeptonicBranch" , 99 , -1 };
G__linked_taginfo G__BranchesDictLN_analysiscLcLTopSemiBranch = { "analysis::TopSemiBranch" , 99 , -1 };
G__linked_taginfo G__BranchesDictLN_analysiscLcLHiggsBranch = { "analysis::HiggsBranch" , 99 , -1 };
G__linked_taginfo G__BranchesDictLN_analysiscLcLEventBottomTaggerBranch = { "analysis::EventBottomTaggerBranch" , 99 , -1 };
G__linked_taginfo G__BranchesDictLN_analysiscLcLHTopLeptonBranch = { "analysis::HTopLeptonBranch" , 99 , -1 };
G__linked_taginfo G__BranchesDictLN_analysiscLcLEventBranch = { "analysis::EventBranch" , 99 , -1 };

/* Reset class/struct taginfo */
extern "C" void G__cpp_reset_tagtableBranchesDict() {
  G__BranchesDictLN_TClass.tagnum = -1 ;
  G__BranchesDictLN_TBuffer.tagnum = -1 ;
  G__BranchesDictLN_TMemberInspector.tagnum = -1 ;
  G__BranchesDictLN_TObject.tagnum = -1 ;
  G__BranchesDictLN_string.tagnum = -1 ;
  G__BranchesDictLN_vectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgR.tagnum = -1 ;
  G__BranchesDictLN_reverse_iteratorlEvectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgRcLcLiteratorgR.tagnum = -1 ;
  G__BranchesDictLN_vectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgR.tagnum = -1 ;
  G__BranchesDictLN_reverse_iteratorlEvectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgRcLcLiteratorgR.tagnum = -1 ;
  G__BranchesDictLN_analysis.tagnum = -1 ;
  G__BranchesDictLN_pairlEfloataNcOstringgR.tagnum = -1 ;
  G__BranchesDictLN_vectorlEpairlEfloataNcOstringgRcOallocatorlEpairlEfloataNcOstringgRsPgRsPgR.tagnum = -1 ;
  G__BranchesDictLN_reverse_iteratorlEvectorlEpairlEfloataNcOstringgRcOallocatorlEpairlEfloataNcOstringgRsPgRsPgRcLcLiteratorgR.tagnum = -1 ;
  G__BranchesDictLN_analysiscLcLBranch.tagnum = -1 ;
  G__BranchesDictLN_analysiscLcLInfoBranch.tagnum = -1 ;
  G__BranchesDictLN_analysiscLcLHResultBranch.tagnum = -1 ;
  G__BranchesDictLN_analysiscLcLParticleBranch.tagnum = -1 ;
  G__BranchesDictLN_analysiscLcLBottomBranch.tagnum = -1 ;
  G__BranchesDictLN_analysiscLcLTauBranch.tagnum = -1 ;
  G__BranchesDictLN_analysiscLcLPairBranch.tagnum = -1 ;
  G__BranchesDictLN_analysiscLcLMultiBranch.tagnum = -1 ;
  G__BranchesDictLN_analysiscLcLWHadronicBranch.tagnum = -1 ;
  G__BranchesDictLN_analysiscLcLZHadronicBranch.tagnum = -1 ;
  G__BranchesDictLN_analysiscLcLJetPairBranch.tagnum = -1 ;
  G__BranchesDictLN_analysiscLcLTripletJetPairBranch.tagnum = -1 ;
  G__BranchesDictLN_analysiscLcLWSemiBranch.tagnum = -1 ;
  G__BranchesDictLN_analysiscLcLTopHadronicBranch.tagnum = -1 ;
  G__BranchesDictLN_analysiscLcLTopLeptonicBranch.tagnum = -1 ;
  G__BranchesDictLN_analysiscLcLTopSemiBranch.tagnum = -1 ;
  G__BranchesDictLN_analysiscLcLHiggsBranch.tagnum = -1 ;
  G__BranchesDictLN_analysiscLcLEventBottomTaggerBranch.tagnum = -1 ;
  G__BranchesDictLN_analysiscLcLHTopLeptonBranch.tagnum = -1 ;
  G__BranchesDictLN_analysiscLcLEventBranch.tagnum = -1 ;
}


extern "C" void G__cpp_setup_tagtableBranchesDict() {

   /* Setting up class,struct,union tag entry */
   G__get_linked_tagnum_fwd(&G__BranchesDictLN_TClass);
   G__get_linked_tagnum_fwd(&G__BranchesDictLN_TBuffer);
   G__get_linked_tagnum_fwd(&G__BranchesDictLN_TMemberInspector);
   G__get_linked_tagnum_fwd(&G__BranchesDictLN_TObject);
   G__get_linked_tagnum_fwd(&G__BranchesDictLN_string);
   G__get_linked_tagnum_fwd(&G__BranchesDictLN_vectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgR);
   G__get_linked_tagnum_fwd(&G__BranchesDictLN_reverse_iteratorlEvectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgRcLcLiteratorgR);
   G__get_linked_tagnum_fwd(&G__BranchesDictLN_vectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgR);
   G__get_linked_tagnum_fwd(&G__BranchesDictLN_reverse_iteratorlEvectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgRcLcLiteratorgR);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__BranchesDictLN_analysis),0,-1,262144,(char*)NULL,G__setup_memvaranalysis,G__setup_memfuncanalysis);
   G__get_linked_tagnum_fwd(&G__BranchesDictLN_pairlEfloataNcOstringgR);
   G__get_linked_tagnum_fwd(&G__BranchesDictLN_vectorlEpairlEfloataNcOstringgRcOallocatorlEpairlEfloataNcOstringgRsPgRsPgR);
   G__get_linked_tagnum_fwd(&G__BranchesDictLN_reverse_iteratorlEvectorlEpairlEfloataNcOstringgRcOallocatorlEpairlEfloataNcOstringgRsPgRsPgRcLcLiteratorgR);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__BranchesDictLN_analysiscLcLBranch),sizeof(analysis::Branch),-1,292096,(char*)NULL,G__setup_memvaranalysiscLcLBranch,G__setup_memfuncanalysiscLcLBranch);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__BranchesDictLN_analysiscLcLInfoBranch),sizeof(analysis::InfoBranch),-1,291072,(char*)NULL,G__setup_memvaranalysiscLcLInfoBranch,G__setup_memfuncanalysiscLcLInfoBranch);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__BranchesDictLN_analysiscLcLHResultBranch),sizeof(analysis::HResultBranch),-1,291072,(char*)NULL,G__setup_memvaranalysiscLcLHResultBranch,G__setup_memfuncanalysiscLcLHResultBranch);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__BranchesDictLN_analysiscLcLParticleBranch),sizeof(analysis::ParticleBranch),-1,291072,(char*)NULL,G__setup_memvaranalysiscLcLParticleBranch,G__setup_memfuncanalysiscLcLParticleBranch);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__BranchesDictLN_analysiscLcLBottomBranch),sizeof(analysis::BottomBranch),-1,291072,(char*)NULL,G__setup_memvaranalysiscLcLBottomBranch,G__setup_memfuncanalysiscLcLBottomBranch);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__BranchesDictLN_analysiscLcLTauBranch),sizeof(analysis::TauBranch),-1,291072,(char*)NULL,G__setup_memvaranalysiscLcLTauBranch,G__setup_memfuncanalysiscLcLTauBranch);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__BranchesDictLN_analysiscLcLPairBranch),sizeof(analysis::PairBranch),-1,291072,(char*)NULL,G__setup_memvaranalysiscLcLPairBranch,G__setup_memfuncanalysiscLcLPairBranch);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__BranchesDictLN_analysiscLcLMultiBranch),sizeof(analysis::MultiBranch),-1,291072,(char*)NULL,G__setup_memvaranalysiscLcLMultiBranch,G__setup_memfuncanalysiscLcLMultiBranch);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__BranchesDictLN_analysiscLcLWHadronicBranch),sizeof(analysis::WHadronicBranch),-1,291072,(char*)NULL,G__setup_memvaranalysiscLcLWHadronicBranch,G__setup_memfuncanalysiscLcLWHadronicBranch);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__BranchesDictLN_analysiscLcLZHadronicBranch),sizeof(analysis::ZHadronicBranch),-1,291072,(char*)NULL,G__setup_memvaranalysiscLcLZHadronicBranch,G__setup_memfuncanalysiscLcLZHadronicBranch);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__BranchesDictLN_analysiscLcLJetPairBranch),sizeof(analysis::JetPairBranch),-1,291072,(char*)NULL,G__setup_memvaranalysiscLcLJetPairBranch,G__setup_memfuncanalysiscLcLJetPairBranch);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__BranchesDictLN_analysiscLcLTripletJetPairBranch),sizeof(analysis::TripletJetPairBranch),-1,291072,(char*)NULL,G__setup_memvaranalysiscLcLTripletJetPairBranch,G__setup_memfuncanalysiscLcLTripletJetPairBranch);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__BranchesDictLN_analysiscLcLWSemiBranch),sizeof(analysis::WSemiBranch),-1,291072,(char*)NULL,G__setup_memvaranalysiscLcLWSemiBranch,G__setup_memfuncanalysiscLcLWSemiBranch);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__BranchesDictLN_analysiscLcLTopHadronicBranch),sizeof(analysis::TopHadronicBranch),-1,291072,(char*)NULL,G__setup_memvaranalysiscLcLTopHadronicBranch,G__setup_memfuncanalysiscLcLTopHadronicBranch);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__BranchesDictLN_analysiscLcLTopLeptonicBranch),sizeof(analysis::TopLeptonicBranch),-1,291072,(char*)NULL,G__setup_memvaranalysiscLcLTopLeptonicBranch,G__setup_memfuncanalysiscLcLTopLeptonicBranch);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__BranchesDictLN_analysiscLcLTopSemiBranch),sizeof(analysis::TopSemiBranch),-1,291072,(char*)NULL,G__setup_memvaranalysiscLcLTopSemiBranch,G__setup_memfuncanalysiscLcLTopSemiBranch);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__BranchesDictLN_analysiscLcLHiggsBranch),sizeof(analysis::HiggsBranch),-1,291072,(char*)NULL,G__setup_memvaranalysiscLcLHiggsBranch,G__setup_memfuncanalysiscLcLHiggsBranch);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__BranchesDictLN_analysiscLcLEventBottomTaggerBranch),sizeof(analysis::EventBottomTaggerBranch),-1,291072,(char*)NULL,G__setup_memvaranalysiscLcLEventBottomTaggerBranch,G__setup_memfuncanalysiscLcLEventBottomTaggerBranch);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__BranchesDictLN_analysiscLcLHTopLeptonBranch),sizeof(analysis::HTopLeptonBranch),-1,291072,(char*)NULL,G__setup_memvaranalysiscLcLHTopLeptonBranch,G__setup_memfuncanalysiscLcLHTopLeptonBranch);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__BranchesDictLN_analysiscLcLEventBranch),sizeof(analysis::EventBranch),-1,291072,(char*)NULL,G__setup_memvaranalysiscLcLEventBranch,G__setup_memfuncanalysiscLcLEventBranch);
}
extern "C" void G__cpp_setupBranchesDict(void) {
  G__check_setup_version(30051515,"G__cpp_setupBranchesDict()");
  G__set_cpp_environmentBranchesDict();
  G__cpp_setup_tagtableBranchesDict();

  G__cpp_setup_inheritanceBranchesDict();

  G__cpp_setup_typetableBranchesDict();

  G__cpp_setup_memvarBranchesDict();

  G__cpp_setup_memfuncBranchesDict();
  G__cpp_setup_globalBranchesDict();
  G__cpp_setup_funcBranchesDict();

   if(0==G__getsizep2memfunc()) G__get_sizep2memfuncBranchesDict();
  return;
}
class G__cpp_setup_initBranchesDict {
  public:
    G__cpp_setup_initBranchesDict() { G__add_setup_func("BranchesDict",(G__incsetup)(&G__cpp_setupBranchesDict)); G__call_setup_funcs(); }
   ~G__cpp_setup_initBranchesDict() { G__remove_setup_func("BranchesDict"); }
};
G__cpp_setup_initBranchesDict G__cpp_setup_initializerBranchesDict;

