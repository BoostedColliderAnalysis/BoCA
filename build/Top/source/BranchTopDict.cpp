//
// File generated by /usr/bin/rootcint at Sat Jun 20 20:44:35 2015

// Do NOT change. Changes will be lost next time file is generated
//

#define R__DICTIONARY_FILENAME BranchTopDict
#include "RConfig.h" //rootcint 4834
#if !defined(R__ACCESS_IN_SYMBOL)
//Break the privacy of classes -- Disabled for the moment
#define private public
#define protected public
#endif

// Since CINT ignores the std namespace, we need to do so in this file.
namespace std {} using namespace std;
#include "BranchTopDict.h"

#include "TClass.h"
#include "TBuffer.h"
#include "TMemberInspector.h"
#include "TError.h"

#ifndef G__ROOT
#define G__ROOT
#endif

#include "RtypesImp.h"
#include "TIsAProxy.h"
#include "TFileMergeInfo.h"

// Direct notice to TROOT of the dictionary's loading.
namespace {
   static struct DictInit {
      DictInit() {
         ROOT::RegisterModule();
      }
   } __TheDictionaryInitializer;
}

// START OF SHADOWS

namespace ROOT {
   namespace Shadow {
   } // of namespace Shadow
} // of namespace ROOT
// END OF SHADOWS

namespace analysis {
   namespace ROOT {
      inline ::ROOT::TGenericClassInfo *GenerateInitInstance();
      static void analysis_Dictionary();

      // Function generating the singleton type initializer
      inline ::ROOT::TGenericClassInfo *GenerateInitInstance()
      {
         static ::ROOT::TGenericClassInfo 
            instance("analysis", 0 /*version*/, "/home/toodles/madness/analysis/Top/include/BranchTop.hh", 7,
                     ::ROOT::DefineBehavior((void*)0,(void*)0),
                     &analysis_Dictionary, 4);
         return &instance;
      }
      // Insure that the inline function is _not_ optimized away by the compiler
      ::ROOT::TGenericClassInfo *(*_R__UNIQUE_(InitFunctionKeeper))() = &GenerateInitInstance;  
      // Static variable to force the class initialization
      static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstance(); R__UseDummy(_R__UNIQUE_(Init));

      // Dictionary for non-ClassDef classes
      static void analysis_Dictionary() {
         GenerateInitInstance()->GetClass();
      }

   }
}

namespace analysis {
namespace top {
   namespace ROOT {
      inline ::ROOT::TGenericClassInfo *GenerateInitInstance();
      static void analysiscLcLtop_Dictionary();

      // Function generating the singleton type initializer
      inline ::ROOT::TGenericClassInfo *GenerateInitInstance()
      {
         static ::ROOT::TGenericClassInfo 
            instance("analysis::top", 0 /*version*/, "/home/toodles/madness/analysis/Top/include/BranchTop.hh", 10,
                     ::ROOT::DefineBehavior((void*)0,(void*)0),
                     &analysiscLcLtop_Dictionary, 4);
         return &instance;
      }
      // Insure that the inline function is _not_ optimized away by the compiler
      ::ROOT::TGenericClassInfo *(*_R__UNIQUE_(InitFunctionKeeper))() = &GenerateInitInstance;  
      // Static variable to force the class initialization
      static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstance(); R__UseDummy(_R__UNIQUE_(Init));

      // Dictionary for non-ClassDef classes
      static void analysiscLcLtop_Dictionary() {
         GenerateInitInstance()->GetClass();
      }

   }
}
}

namespace ROOT {
   void analysiscLcLtopcLcLHCandidateBranch_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_analysiscLcLtopcLcLHCandidateBranch(void *p = 0);
   static void *newArray_analysiscLcLtopcLcLHCandidateBranch(Long_t size, void *p);
   static void delete_analysiscLcLtopcLcLHCandidateBranch(void *p);
   static void deleteArray_analysiscLcLtopcLcLHCandidateBranch(void *p);
   static void destruct_analysiscLcLtopcLcLHCandidateBranch(void *p);

   // Function generating the singleton type initializer
   static TGenericClassInfo *GenerateInitInstanceLocal(const ::analysis::top::HCandidateBranch*)
   {
      ::analysis::top::HCandidateBranch *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::analysis::top::HCandidateBranch >(0);
      static ::ROOT::TGenericClassInfo 
         instance("analysis::top::HCandidateBranch", ::analysis::top::HCandidateBranch::Class_Version(), "/home/toodles/madness/analysis/Top/include/BranchTop.hh", 18,
                  typeid(::analysis::top::HCandidateBranch), DefineBehavior(ptr, ptr),
                  &::analysis::top::HCandidateBranch::Dictionary, isa_proxy, 4,
                  sizeof(::analysis::top::HCandidateBranch) );
      instance.SetNew(&new_analysiscLcLtopcLcLHCandidateBranch);
      instance.SetNewArray(&newArray_analysiscLcLtopcLcLHCandidateBranch);
      instance.SetDelete(&delete_analysiscLcLtopcLcLHCandidateBranch);
      instance.SetDeleteArray(&deleteArray_analysiscLcLtopcLcLHCandidateBranch);
      instance.SetDestructor(&destruct_analysiscLcLtopcLcLHCandidateBranch);
      return &instance;
   }
   TGenericClassInfo *GenerateInitInstance(const ::analysis::top::HCandidateBranch*)
   {
      return GenerateInitInstanceLocal((::analysis::top::HCandidateBranch*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::analysis::top::HCandidateBranch*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOT

namespace ROOT {
   void analysiscLcLtopcLcLHTopHadronBranch_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_analysiscLcLtopcLcLHTopHadronBranch(void *p = 0);
   static void *newArray_analysiscLcLtopcLcLHTopHadronBranch(Long_t size, void *p);
   static void delete_analysiscLcLtopcLcLHTopHadronBranch(void *p);
   static void deleteArray_analysiscLcLtopcLcLHTopHadronBranch(void *p);
   static void destruct_analysiscLcLtopcLcLHTopHadronBranch(void *p);

   // Function generating the singleton type initializer
   static TGenericClassInfo *GenerateInitInstanceLocal(const ::analysis::top::HTopHadronBranch*)
   {
      ::analysis::top::HTopHadronBranch *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::analysis::top::HTopHadronBranch >(0);
      static ::ROOT::TGenericClassInfo 
         instance("analysis::top::HTopHadronBranch", ::analysis::top::HTopHadronBranch::Class_Version(), "/home/toodles/madness/analysis/Top/include/BranchTop.hh", 70,
                  typeid(::analysis::top::HTopHadronBranch), DefineBehavior(ptr, ptr),
                  &::analysis::top::HTopHadronBranch::Dictionary, isa_proxy, 4,
                  sizeof(::analysis::top::HTopHadronBranch) );
      instance.SetNew(&new_analysiscLcLtopcLcLHTopHadronBranch);
      instance.SetNewArray(&newArray_analysiscLcLtopcLcLHTopHadronBranch);
      instance.SetDelete(&delete_analysiscLcLtopcLcLHTopHadronBranch);
      instance.SetDeleteArray(&deleteArray_analysiscLcLtopcLcLHTopHadronBranch);
      instance.SetDestructor(&destruct_analysiscLcLtopcLcLHTopHadronBranch);
      return &instance;
   }
   TGenericClassInfo *GenerateInitInstance(const ::analysis::top::HTopHadronBranch*)
   {
      return GenerateInitInstanceLocal((::analysis::top::HTopHadronBranch*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::analysis::top::HTopHadronBranch*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOT

      namespace analysis {
         namespace top {
//______________________________________________________________________________
TClass *HCandidateBranch::fgIsA = 0;  // static to hold class pointer

//______________________________________________________________________________
const char *HCandidateBranch::Class_Name()
{
   return "analysis::top::HCandidateBranch";
}

//______________________________________________________________________________
const char *HCandidateBranch::ImplFileName()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::analysis::top::HCandidateBranch*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int HCandidateBranch::ImplFileLine()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::analysis::top::HCandidateBranch*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void HCandidateBranch::Dictionary()
{
   fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::analysis::top::HCandidateBranch*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *HCandidateBranch::Class()
{
   if (!fgIsA) fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::analysis::top::HCandidateBranch*)0x0)->GetClass();
   return fgIsA;
}

} // namespace analysis::top
} // namespace analysis::top
      namespace analysis {
         namespace top {
//______________________________________________________________________________
TClass *HTopHadronBranch::fgIsA = 0;  // static to hold class pointer

//______________________________________________________________________________
const char *HTopHadronBranch::Class_Name()
{
   return "analysis::top::HTopHadronBranch";
}

//______________________________________________________________________________
const char *HTopHadronBranch::ImplFileName()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::analysis::top::HTopHadronBranch*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int HTopHadronBranch::ImplFileLine()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::analysis::top::HTopHadronBranch*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void HTopHadronBranch::Dictionary()
{
   fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::analysis::top::HTopHadronBranch*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *HTopHadronBranch::Class()
{
   if (!fgIsA) fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::analysis::top::HTopHadronBranch*)0x0)->GetClass();
   return fgIsA;
}

} // namespace analysis::top
} // namespace analysis::top
      namespace analysis {
         namespace top {
//______________________________________________________________________________
void HCandidateBranch::Streamer(TBuffer &R__b)
{
   // Stream an object of class analysis::top::HCandidateBranch.

   if (R__b.IsReading()) {
      R__b.ReadClassBuffer(analysis::top::HCandidateBranch::Class(),this);
   } else {
      R__b.WriteClassBuffer(analysis::top::HCandidateBranch::Class(),this);
   }
}

} // namespace analysis::top
} // namespace analysis::top
//______________________________________________________________________________
      namespace analysis {
         namespace top {
void HCandidateBranch::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class analysis::top::HCandidateBranch.
      TClass *R__cl = ::analysis::top::HCandidateBranch::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "Mass", &Mass);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "Pt", &Pt);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "Rap", &Rap);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "Phi", &Phi);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "DeltaR", &DeltaR);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "SubJetsDeltaR", &SubJetsDeltaR);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "Asymmetry", &Asymmetry);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "DiPolarity", &DiPolarity);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "SubJet1Mass", &SubJet1Mass);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "SubJet1DeltaR", &SubJet1DeltaR);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "SubJet1Pt", &SubJet1Pt);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "SubJet2Mass", &SubJet2Mass);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "SubJet2Pt", &SubJet2Pt);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "SubJet2DeltaR", &SubJet2DeltaR);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "ConstRap", &ConstRap);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "ConstPhi", &ConstPhi);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "ConstDeltaR", &ConstDeltaR);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "ConstAngle", &ConstAngle);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "IsolationRap", &IsolationRap);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "IsolationPhi", &IsolationPhi);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "IsolationDeltaR", &IsolationDeltaR);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "IsolationAngle", &IsolationAngle);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "IsolationPt", &IsolationPt);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "HiggsTag", &HiggsTag);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "TopTag", &TopTag);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "TopBdtTag", &TopBdtTag);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "JetBdtTag", &JetBdtTag);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "TopCutSigEff", &TopCutSigEff);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "JetCutSigEff", &JetCutSigEff);
      //This works around a msvc bug and should be harmless on other platforms
      typedef analysis::Branch baseClass1;
      baseClass1::ShowMembers(R__insp);
}

} // namespace analysis::top
} // namespace analysis::top
namespace ROOT {
   // Wrappers around operator new
   static void *new_analysiscLcLtopcLcLHCandidateBranch(void *p) {
      return  p ? new(p) ::analysis::top::HCandidateBranch : new ::analysis::top::HCandidateBranch;
   }
   static void *newArray_analysiscLcLtopcLcLHCandidateBranch(Long_t nElements, void *p) {
      return p ? new(p) ::analysis::top::HCandidateBranch[nElements] : new ::analysis::top::HCandidateBranch[nElements];
   }
   // Wrapper around operator delete
   static void delete_analysiscLcLtopcLcLHCandidateBranch(void *p) {
      delete ((::analysis::top::HCandidateBranch*)p);
   }
   static void deleteArray_analysiscLcLtopcLcLHCandidateBranch(void *p) {
      delete [] ((::analysis::top::HCandidateBranch*)p);
   }
   static void destruct_analysiscLcLtopcLcLHCandidateBranch(void *p) {
      typedef ::analysis::top::HCandidateBranch current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOT for class ::analysis::top::HCandidateBranch

      namespace analysis {
         namespace top {
//______________________________________________________________________________
void HTopHadronBranch::Streamer(TBuffer &R__b)
{
   // Stream an object of class analysis::top::HTopHadronBranch.

   if (R__b.IsReading()) {
      R__b.ReadClassBuffer(analysis::top::HTopHadronBranch::Class(),this);
   } else {
      R__b.WriteClassBuffer(analysis::top::HTopHadronBranch::Class(),this);
   }
}

} // namespace analysis::top
} // namespace analysis::top
//______________________________________________________________________________
      namespace analysis {
         namespace top {
void HTopHadronBranch::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class analysis::top::HTopHadronBranch.
      TClass *R__cl = ::analysis::top::HTopHadronBranch::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "BottomPt", &BottomPt);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "WPt", &WPt);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "BBdt", &BBdt);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "WBdt", &WBdt);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "Tau1_1", &Tau1_1);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "Tau2_1", &Tau2_1);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "Tau3_1", &Tau3_1);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "Tau21_1", &Tau21_1);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "Tau32_1", &Tau32_1);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "Tau1_2", &Tau1_2);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "Tau2_2", &Tau2_2);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "Tau3_2", &Tau3_2);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "Tau21_2", &Tau21_2);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "Tau32_2", &Tau32_2);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "VertexMass", &VertexMass);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "MaxDisplacement", &MaxDisplacement);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "MeanDisplacement", &MeanDisplacement);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "SumDisplacement", &SumDisplacement);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "Multipliticity", &Multipliticity);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "Spread", &Spread);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "VertexDeltaR", &VertexDeltaR);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "VertexSpread", &VertexSpread);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "EnergyFraction", &EnergyFraction);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "LeptonPt", &LeptonPt);
      //This works around a msvc bug and should be harmless on other platforms
      typedef analysis::MultiBranch baseClass1;
      baseClass1::ShowMembers(R__insp);
}

} // namespace analysis::top
} // namespace analysis::top
namespace ROOT {
   // Wrappers around operator new
   static void *new_analysiscLcLtopcLcLHTopHadronBranch(void *p) {
      return  p ? new(p) ::analysis::top::HTopHadronBranch : new ::analysis::top::HTopHadronBranch;
   }
   static void *newArray_analysiscLcLtopcLcLHTopHadronBranch(Long_t nElements, void *p) {
      return p ? new(p) ::analysis::top::HTopHadronBranch[nElements] : new ::analysis::top::HTopHadronBranch[nElements];
   }
   // Wrapper around operator delete
   static void delete_analysiscLcLtopcLcLHTopHadronBranch(void *p) {
      delete ((::analysis::top::HTopHadronBranch*)p);
   }
   static void deleteArray_analysiscLcLtopcLcLHTopHadronBranch(void *p) {
      delete [] ((::analysis::top::HTopHadronBranch*)p);
   }
   static void destruct_analysiscLcLtopcLcLHTopHadronBranch(void *p) {
      typedef ::analysis::top::HTopHadronBranch current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOT for class ::analysis::top::HTopHadronBranch

/********************************************************
* BranchTopDict.cpp
* CAUTION: DON'T CHANGE THIS FILE. THIS FILE IS AUTOMATICALLY GENERATED
*          FROM HEADER FILES LISTED IN G__setup_cpp_environmentXXX().
*          CHANGE THOSE HEADER FILES AND REGENERATE THIS FILE.
********************************************************/

#ifdef G__MEMTEST
#undef malloc
#undef free
#endif

#if defined(__GNUC__) && __GNUC__ >= 4 && ((__GNUC_MINOR__ == 2 && __GNUC_PATCHLEVEL__ >= 1) || (__GNUC_MINOR__ >= 3))
#pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif

extern "C" void G__cpp_reset_tagtableBranchTopDict();

extern "C" void G__set_cpp_environmentBranchTopDict() {
  G__add_compiledheader("TObject.h");
  G__add_compiledheader("TMemberInspector.h");
  G__add_compiledheader("BranchTop.cpp");
  G__cpp_reset_tagtableBranchTopDict();
}
#include <new>
extern "C" int G__cpp_dllrevBranchTopDict() { return(30051515); }

/*********************************************************
* Member function Interface Method
*********************************************************/

/* analysis */

/* analysis::top */

/* analysis::top::HCandidateBranch */
static int G__BranchTopDict_195_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   analysis::top::HCandidateBranch* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new analysis::top::HCandidateBranch[n];
     } else {
       p = new((void*) gvp) analysis::top::HCandidateBranch[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new analysis::top::HCandidateBranch;
     } else {
       p = new((void*) gvp) analysis::top::HCandidateBranch;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__BranchTopDictLN_analysiscLcLtopcLcLHCandidateBranch));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__BranchTopDict_195_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) analysis::top::HCandidateBranch::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__BranchTopDict_195_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) analysis::top::HCandidateBranch::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__BranchTopDict_195_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) analysis::top::HCandidateBranch::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__BranchTopDict_195_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      analysis::top::HCandidateBranch::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__BranchTopDict_195_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((analysis::top::HCandidateBranch*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__BranchTopDict_195_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) analysis::top::HCandidateBranch::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__BranchTopDict_195_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) analysis::top::HCandidateBranch::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__BranchTopDict_195_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) analysis::top::HCandidateBranch::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__BranchTopDict_195_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) analysis::top::HCandidateBranch::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__BranchTopDict_195_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   analysis::top::HCandidateBranch* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new analysis::top::HCandidateBranch(*(analysis::top::HCandidateBranch*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__BranchTopDictLN_analysiscLcLtopcLcLHCandidateBranch));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef analysis::top::HCandidateBranch G__TanalysiscLcLtopcLcLHCandidateBranch;
static int G__BranchTopDict_195_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (analysis::top::HCandidateBranch*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((analysis::top::HCandidateBranch*) (soff+(sizeof(analysis::top::HCandidateBranch)*i)))->~G__TanalysiscLcLtopcLcLHCandidateBranch();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (analysis::top::HCandidateBranch*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((analysis::top::HCandidateBranch*) (soff))->~G__TanalysiscLcLtopcLcLHCandidateBranch();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__BranchTopDict_195_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   analysis::top::HCandidateBranch* dest = (analysis::top::HCandidateBranch*) G__getstructoffset();
   *dest = *(analysis::top::HCandidateBranch*) libp->para[0].ref;
   const analysis::top::HCandidateBranch& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* analysis::top::HTopHadronBranch */
static int G__BranchTopDict_196_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   analysis::top::HTopHadronBranch* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new analysis::top::HTopHadronBranch[n];
     } else {
       p = new((void*) gvp) analysis::top::HTopHadronBranch[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new analysis::top::HTopHadronBranch;
     } else {
       p = new((void*) gvp) analysis::top::HTopHadronBranch;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__BranchTopDictLN_analysiscLcLtopcLcLHTopHadronBranch));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__BranchTopDict_196_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) analysis::top::HTopHadronBranch::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__BranchTopDict_196_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) analysis::top::HTopHadronBranch::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__BranchTopDict_196_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) analysis::top::HTopHadronBranch::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__BranchTopDict_196_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      analysis::top::HTopHadronBranch::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__BranchTopDict_196_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((analysis::top::HTopHadronBranch*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__BranchTopDict_196_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) analysis::top::HTopHadronBranch::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__BranchTopDict_196_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) analysis::top::HTopHadronBranch::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__BranchTopDict_196_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) analysis::top::HTopHadronBranch::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__BranchTopDict_196_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) analysis::top::HTopHadronBranch::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__BranchTopDict_196_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   analysis::top::HTopHadronBranch* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new analysis::top::HTopHadronBranch(*(analysis::top::HTopHadronBranch*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__BranchTopDictLN_analysiscLcLtopcLcLHTopHadronBranch));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef analysis::top::HTopHadronBranch G__TanalysiscLcLtopcLcLHTopHadronBranch;
static int G__BranchTopDict_196_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (analysis::top::HTopHadronBranch*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((analysis::top::HTopHadronBranch*) (soff+(sizeof(analysis::top::HTopHadronBranch)*i)))->~G__TanalysiscLcLtopcLcLHTopHadronBranch();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (analysis::top::HTopHadronBranch*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((analysis::top::HTopHadronBranch*) (soff))->~G__TanalysiscLcLtopcLcLHTopHadronBranch();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__BranchTopDict_196_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   analysis::top::HTopHadronBranch* dest = (analysis::top::HTopHadronBranch*) G__getstructoffset();
   *dest = *(analysis::top::HTopHadronBranch*) libp->para[0].ref;
   const analysis::top::HTopHadronBranch& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* Setting up global function */

/*********************************************************
* Member function Stub
*********************************************************/

/* analysis */

/* analysis::top */

/* analysis::top::HCandidateBranch */

/* analysis::top::HTopHadronBranch */

/*********************************************************
* Global function Stub
*********************************************************/

/*********************************************************
* Get size of pointer to member function
*********************************************************/
class G__Sizep2memfuncBranchTopDict {
 public:
  G__Sizep2memfuncBranchTopDict(): p(&G__Sizep2memfuncBranchTopDict::sizep2memfunc) {}
    size_t sizep2memfunc() { return(sizeof(p)); }
  private:
    size_t (G__Sizep2memfuncBranchTopDict::*p)();
};

size_t G__get_sizep2memfuncBranchTopDict()
{
  G__Sizep2memfuncBranchTopDict a;
  G__setsizep2memfunc((int)a.sizep2memfunc());
  return((size_t)a.sizep2memfunc());
}


/*********************************************************
* virtual base class offset calculation interface
*********************************************************/

   /* Setting up class inheritance */

/*********************************************************
* Inheritance information setup/
*********************************************************/
extern "C" void G__cpp_setup_inheritanceBranchTopDict() {

   /* Setting up class inheritance */
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__BranchTopDictLN_analysiscLcLtopcLcLHCandidateBranch))) {
     analysis::top::HCandidateBranch *G__Lderived;
     G__Lderived=(analysis::top::HCandidateBranch*)0x1000;
     {
       analysis::Branch *G__Lpbase=(analysis::Branch*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__BranchTopDictLN_analysiscLcLtopcLcLHCandidateBranch),G__get_linked_tagnum(&G__BranchTopDictLN_analysiscLcLBranch),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__BranchTopDictLN_analysiscLcLtopcLcLHCandidateBranch),G__get_linked_tagnum(&G__BranchTopDictLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__BranchTopDictLN_analysiscLcLtopcLcLHTopHadronBranch))) {
     analysis::top::HTopHadronBranch *G__Lderived;
     G__Lderived=(analysis::top::HTopHadronBranch*)0x1000;
     {
       analysis::MultiBranch *G__Lpbase=(analysis::MultiBranch*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__BranchTopDictLN_analysiscLcLtopcLcLHTopHadronBranch),G__get_linked_tagnum(&G__BranchTopDictLN_analysiscLcLMultiBranch),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
     {
       analysis::PairBranch *G__Lpbase=(analysis::PairBranch*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__BranchTopDictLN_analysiscLcLtopcLcLHTopHadronBranch),G__get_linked_tagnum(&G__BranchTopDictLN_analysiscLcLPairBranch),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       analysis::ParticleBranch *G__Lpbase=(analysis::ParticleBranch*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__BranchTopDictLN_analysiscLcLtopcLcLHTopHadronBranch),G__get_linked_tagnum(&G__BranchTopDictLN_analysiscLcLParticleBranch),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       analysis::Branch *G__Lpbase=(analysis::Branch*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__BranchTopDictLN_analysiscLcLtopcLcLHTopHadronBranch),G__get_linked_tagnum(&G__BranchTopDictLN_analysiscLcLBranch),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__BranchTopDictLN_analysiscLcLtopcLcLHTopHadronBranch),G__get_linked_tagnum(&G__BranchTopDictLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
   }
}

/*********************************************************
* typedef information setup/
*********************************************************/
extern "C" void G__cpp_setup_typetableBranchTopDict() {

   /* Setting up typedef entry */
   G__search_typename2("Version_t",115,-1,0,-1);
   G__setnewtype(-1,"Class version identifier (short)",0);
   G__search_typename2("vector<ROOT::TSchemaHelper>",117,G__get_linked_tagnum(&G__BranchTopDictLN_vectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<const_iterator>",117,G__get_linked_tagnum(&G__BranchTopDictLN_reverse_iteratorlEvectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__BranchTopDictLN_vectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<iterator>",117,G__get_linked_tagnum(&G__BranchTopDictLN_reverse_iteratorlEvectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__BranchTopDictLN_vectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("vector<TVirtualArray*>",117,G__get_linked_tagnum(&G__BranchTopDictLN_vectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<const_iterator>",117,G__get_linked_tagnum(&G__BranchTopDictLN_reverse_iteratorlEvectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__BranchTopDictLN_vectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<iterator>",117,G__get_linked_tagnum(&G__BranchTopDictLN_reverse_iteratorlEvectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__BranchTopDictLN_vectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("pair<float&,std::string>",117,G__get_linked_tagnum(&G__BranchTopDictLN_pairlEfloataNcOstringgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("vector<ObsPair>",117,G__get_linked_tagnum(&G__BranchTopDictLN_vectorlEpairlEfloataNcOstringgRcOallocatorlEpairlEfloataNcOstringgRsPgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<const_iterator>",117,G__get_linked_tagnum(&G__BranchTopDictLN_reverse_iteratorlEvectorlEpairlEfloataNcOstringgRcOallocatorlEpairlEfloataNcOstringgRsPgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__BranchTopDictLN_vectorlEpairlEfloataNcOstringgRcOallocatorlEpairlEfloataNcOstringgRsPgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<iterator>",117,G__get_linked_tagnum(&G__BranchTopDictLN_reverse_iteratorlEvectorlEpairlEfloataNcOstringgRcOallocatorlEpairlEfloataNcOstringgRsPgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__BranchTopDictLN_vectorlEpairlEfloataNcOstringgRcOallocatorlEpairlEfloataNcOstringgRsPgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("vector<pair<float&,string> >",117,G__get_linked_tagnum(&G__BranchTopDictLN_vectorlEpairlEfloataNcOstringgRcOallocatorlEpairlEfloataNcOstringgRsPgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
}

/*********************************************************
* Data Member information setup/
*********************************************************/

   /* Setting up class,struct,union tag member variable */

   /* analysis */
static void G__setup_memvaranalysis(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__BranchTopDictLN_analysis));
   {
   }
   G__tag_memvar_reset();
}


   /* analysis::top */
static void G__setup_memvaranalysiscLcLtop(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__BranchTopDictLN_analysiscLcLtop));
   {
   }
   G__tag_memvar_reset();
}


   /* analysis::top::HCandidateBranch */
static void G__setup_memvaranalysiscLcLtopcLcLHCandidateBranch(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__BranchTopDictLN_analysiscLcLtopcLcLHCandidateBranch));
   { analysis::top::HCandidateBranch *p; p=(analysis::top::HCandidateBranch*)0x1000; if (p) { }
   G__memvar_setup((void*)((long)(&p->Mass)-(long)(p)),102,0,0,-1,-1,-1,1,"Mass=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->Pt)-(long)(p)),102,0,0,-1,-1,-1,1,"Pt=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->Rap)-(long)(p)),102,0,0,-1,-1,-1,1,"Rap=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->Phi)-(long)(p)),102,0,0,-1,-1,-1,1,"Phi=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->DeltaR)-(long)(p)),102,0,0,-1,-1,-1,1,"DeltaR=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->SubJetsDeltaR)-(long)(p)),102,0,0,-1,-1,-1,1,"SubJetsDeltaR=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->Asymmetry)-(long)(p)),102,0,0,-1,-1,-1,1,"Asymmetry=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->DiPolarity)-(long)(p)),102,0,0,-1,-1,-1,1,"DiPolarity=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->SubJet1Mass)-(long)(p)),102,0,0,-1,-1,-1,1,"SubJet1Mass=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->SubJet1DeltaR)-(long)(p)),102,0,0,-1,-1,-1,1,"SubJet1DeltaR=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->SubJet1Pt)-(long)(p)),102,0,0,-1,-1,-1,1,"SubJet1Pt=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->SubJet2Mass)-(long)(p)),102,0,0,-1,-1,-1,1,"SubJet2Mass=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->SubJet2Pt)-(long)(p)),102,0,0,-1,-1,-1,1,"SubJet2Pt=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->SubJet2DeltaR)-(long)(p)),102,0,0,-1,-1,-1,1,"SubJet2DeltaR=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->ConstRap)-(long)(p)),102,0,0,-1,-1,-1,1,"ConstRap=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->ConstPhi)-(long)(p)),102,0,0,-1,-1,-1,1,"ConstPhi=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->ConstDeltaR)-(long)(p)),102,0,0,-1,-1,-1,1,"ConstDeltaR=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->ConstAngle)-(long)(p)),102,0,0,-1,-1,-1,1,"ConstAngle=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->IsolationRap)-(long)(p)),102,0,0,-1,-1,-1,1,"IsolationRap=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->IsolationPhi)-(long)(p)),102,0,0,-1,-1,-1,1,"IsolationPhi=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->IsolationDeltaR)-(long)(p)),102,0,0,-1,-1,-1,1,"IsolationDeltaR=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->IsolationAngle)-(long)(p)),102,0,0,-1,-1,-1,1,"IsolationAngle=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->IsolationPt)-(long)(p)),102,0,0,-1,-1,-1,1,"IsolationPt=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->HiggsTag)-(long)(p)),102,0,0,-1,-1,-1,1,"HiggsTag=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->TopTag)-(long)(p)),102,0,0,-1,-1,-1,1,"TopTag=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->TopBdtTag)-(long)(p)),102,0,0,-1,-1,-1,1,"TopBdtTag=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->JetBdtTag)-(long)(p)),102,0,0,-1,-1,-1,1,"JetBdtTag=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->TopCutSigEff)-(long)(p)),102,0,0,-1,-1,-1,1,"TopCutSigEff=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->JetCutSigEff)-(long)(p)),102,0,0,-1,-1,-1,1,"JetCutSigEff=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__BranchTopDictLN_TClass),-1,-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* analysis::top::HTopHadronBranch */
static void G__setup_memvaranalysiscLcLtopcLcLHTopHadronBranch(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__BranchTopDictLN_analysiscLcLtopcLcLHTopHadronBranch));
   { analysis::top::HTopHadronBranch *p; p=(analysis::top::HTopHadronBranch*)0x1000; if (p) { }
   G__memvar_setup((void*)((long)(&p->BottomPt)-(long)(p)),102,0,0,-1,-1,-1,1,"BottomPt=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->WPt)-(long)(p)),102,0,0,-1,-1,-1,1,"WPt=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->BBdt)-(long)(p)),102,0,0,-1,-1,-1,1,"BBdt=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->WBdt)-(long)(p)),102,0,0,-1,-1,-1,1,"WBdt=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->Tau1_1)-(long)(p)),102,0,0,-1,-1,-1,1,"Tau1_1=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->Tau2_1)-(long)(p)),102,0,0,-1,-1,-1,1,"Tau2_1=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->Tau3_1)-(long)(p)),102,0,0,-1,-1,-1,1,"Tau3_1=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->Tau21_1)-(long)(p)),102,0,0,-1,-1,-1,1,"Tau21_1=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->Tau32_1)-(long)(p)),102,0,0,-1,-1,-1,1,"Tau32_1=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->Tau1_2)-(long)(p)),102,0,0,-1,-1,-1,1,"Tau1_2=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->Tau2_2)-(long)(p)),102,0,0,-1,-1,-1,1,"Tau2_2=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->Tau3_2)-(long)(p)),102,0,0,-1,-1,-1,1,"Tau3_2=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->Tau21_2)-(long)(p)),102,0,0,-1,-1,-1,1,"Tau21_2=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->Tau32_2)-(long)(p)),102,0,0,-1,-1,-1,1,"Tau32_2=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->VertexMass)-(long)(p)),102,0,0,-1,-1,-1,1,"VertexMass=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->MaxDisplacement)-(long)(p)),102,0,0,-1,-1,-1,1,"MaxDisplacement=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->MeanDisplacement)-(long)(p)),102,0,0,-1,-1,-1,1,"MeanDisplacement=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->SumDisplacement)-(long)(p)),102,0,0,-1,-1,-1,1,"SumDisplacement=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->Multipliticity)-(long)(p)),102,0,0,-1,-1,-1,1,"Multipliticity=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->Spread)-(long)(p)),102,0,0,-1,-1,-1,1,"Spread=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->VertexDeltaR)-(long)(p)),102,0,0,-1,-1,-1,1,"VertexDeltaR=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->VertexSpread)-(long)(p)),102,0,0,-1,-1,-1,1,"VertexSpread=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->EnergyFraction)-(long)(p)),102,0,0,-1,-1,-1,1,"EnergyFraction=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->LeptonPt)-(long)(p)),102,0,0,-1,-1,-1,1,"LeptonPt=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__BranchTopDictLN_TClass),-1,-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}

extern "C" void G__cpp_setup_memvarBranchTopDict() {
}
/***********************************************************
************************************************************
************************************************************
************************************************************
************************************************************
************************************************************
************************************************************
***********************************************************/

/*********************************************************
* Member function information setup for each class
*********************************************************/
static void G__setup_memfuncanalysis(void) {
   /* analysis */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__BranchTopDictLN_analysis));
   G__tag_memfunc_reset();
}

static void G__setup_memfuncanalysiscLcLtop(void) {
   /* analysis::top */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__BranchTopDictLN_analysiscLcLtop));
   G__tag_memfunc_reset();
}

static void G__setup_memfuncanalysiscLcLtopcLcLHCandidateBranch(void) {
   /* analysis::top::HCandidateBranch */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__BranchTopDictLN_analysiscLcLtopcLcLHCandidateBranch));
   G__memfunc_setup("HCandidateBranch",1555,G__BranchTopDict_195_0_1, 105, G__get_linked_tagnum(&G__BranchTopDictLN_analysiscLcLtopcLcLHCandidateBranch), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__BranchTopDict_195_0_2, 85, G__get_linked_tagnum(&G__BranchTopDictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&analysis::top::HCandidateBranch::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__BranchTopDict_195_0_3, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&analysis::top::HCandidateBranch::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__BranchTopDict_195_0_4, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&analysis::top::HCandidateBranch::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__BranchTopDict_195_0_5, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&analysis::top::HCandidateBranch::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__BranchTopDictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__BranchTopDict_195_0_9, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__BranchTopDict_195_0_10, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&analysis::top::HCandidateBranch::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__BranchTopDict_195_0_11, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&analysis::top::HCandidateBranch::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__BranchTopDict_195_0_12, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&analysis::top::HCandidateBranch::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__BranchTopDict_195_0_13, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&analysis::top::HCandidateBranch::DeclFileLine) ), 0);
   // automatic copy constructor
   G__memfunc_setup("HCandidateBranch", 1555, G__BranchTopDict_195_0_14, (int) ('i'), G__get_linked_tagnum(&G__BranchTopDictLN_analysiscLcLtopcLcLHCandidateBranch), -1, 0, 1, 1, 1, 0, "u 'analysis::top::HCandidateBranch' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~HCandidateBranch", 1681, G__BranchTopDict_195_0_15, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 0);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__BranchTopDict_195_0_16, (int) ('u'), G__get_linked_tagnum(&G__BranchTopDictLN_analysiscLcLtopcLcLHCandidateBranch), -1, 1, 1, 1, 1, 0, "u 'analysis::top::HCandidateBranch' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncanalysiscLcLtopcLcLHTopHadronBranch(void) {
   /* analysis::top::HTopHadronBranch */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__BranchTopDictLN_analysiscLcLtopcLcLHTopHadronBranch));
   G__memfunc_setup("HTopHadronBranch",1573,G__BranchTopDict_196_0_1, 105, G__get_linked_tagnum(&G__BranchTopDictLN_analysiscLcLtopcLcLHTopHadronBranch), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__BranchTopDict_196_0_2, 85, G__get_linked_tagnum(&G__BranchTopDictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&analysis::top::HTopHadronBranch::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__BranchTopDict_196_0_3, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&analysis::top::HTopHadronBranch::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__BranchTopDict_196_0_4, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&analysis::top::HTopHadronBranch::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__BranchTopDict_196_0_5, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&analysis::top::HTopHadronBranch::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__BranchTopDictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__BranchTopDict_196_0_9, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__BranchTopDict_196_0_10, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&analysis::top::HTopHadronBranch::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__BranchTopDict_196_0_11, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&analysis::top::HTopHadronBranch::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__BranchTopDict_196_0_12, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&analysis::top::HTopHadronBranch::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__BranchTopDict_196_0_13, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&analysis::top::HTopHadronBranch::DeclFileLine) ), 0);
   // automatic copy constructor
   G__memfunc_setup("HTopHadronBranch", 1573, G__BranchTopDict_196_0_14, (int) ('i'), G__get_linked_tagnum(&G__BranchTopDictLN_analysiscLcLtopcLcLHTopHadronBranch), -1, 0, 1, 1, 1, 0, "u 'analysis::top::HTopHadronBranch' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~HTopHadronBranch", 1699, G__BranchTopDict_196_0_15, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 0);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__BranchTopDict_196_0_16, (int) ('u'), G__get_linked_tagnum(&G__BranchTopDictLN_analysiscLcLtopcLcLHTopHadronBranch), -1, 1, 1, 1, 1, 0, "u 'analysis::top::HTopHadronBranch' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}


/*********************************************************
* Member function information setup
*********************************************************/
extern "C" void G__cpp_setup_memfuncBranchTopDict() {
}

/*********************************************************
* Global variable information setup for each class
*********************************************************/
static void G__cpp_setup_global0() {

   /* Setting up global variables */
   G__resetplocal();

}

static void G__cpp_setup_global1() {

   G__resetglobalenv();
}
extern "C" void G__cpp_setup_globalBranchTopDict() {
  G__cpp_setup_global0();
  G__cpp_setup_global1();
}

/*********************************************************
* Global function information setup for each class
*********************************************************/
static void G__cpp_setup_func0() {
   G__lastifuncposition();

}

static void G__cpp_setup_func1() {
}

static void G__cpp_setup_func2() {
}

static void G__cpp_setup_func3() {
}

static void G__cpp_setup_func4() {
}

static void G__cpp_setup_func5() {
}

static void G__cpp_setup_func6() {
}

static void G__cpp_setup_func7() {
}

static void G__cpp_setup_func8() {
}

static void G__cpp_setup_func9() {
}

static void G__cpp_setup_func10() {
}

static void G__cpp_setup_func11() {
}

static void G__cpp_setup_func12() {
}

static void G__cpp_setup_func13() {

   G__resetifuncposition();
}

extern "C" void G__cpp_setup_funcBranchTopDict() {
  G__cpp_setup_func0();
  G__cpp_setup_func1();
  G__cpp_setup_func2();
  G__cpp_setup_func3();
  G__cpp_setup_func4();
  G__cpp_setup_func5();
  G__cpp_setup_func6();
  G__cpp_setup_func7();
  G__cpp_setup_func8();
  G__cpp_setup_func9();
  G__cpp_setup_func10();
  G__cpp_setup_func11();
  G__cpp_setup_func12();
  G__cpp_setup_func13();
}

/*********************************************************
* Class,struct,union,enum tag information setup
*********************************************************/
/* Setup class/struct taginfo */
G__linked_taginfo G__BranchTopDictLN_TClass = { "TClass" , 99 , -1 };
G__linked_taginfo G__BranchTopDictLN_TBuffer = { "TBuffer" , 99 , -1 };
G__linked_taginfo G__BranchTopDictLN_TMemberInspector = { "TMemberInspector" , 99 , -1 };
G__linked_taginfo G__BranchTopDictLN_TObject = { "TObject" , 99 , -1 };
G__linked_taginfo G__BranchTopDictLN_vectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgR = { "vector<ROOT::TSchemaHelper,allocator<ROOT::TSchemaHelper> >" , 99 , -1 };
G__linked_taginfo G__BranchTopDictLN_reverse_iteratorlEvectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgRcLcLiteratorgR = { "reverse_iterator<vector<ROOT::TSchemaHelper,allocator<ROOT::TSchemaHelper> >::iterator>" , 99 , -1 };
G__linked_taginfo G__BranchTopDictLN_vectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgR = { "vector<TVirtualArray*,allocator<TVirtualArray*> >" , 99 , -1 };
G__linked_taginfo G__BranchTopDictLN_reverse_iteratorlEvectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgRcLcLiteratorgR = { "reverse_iterator<vector<TVirtualArray*,allocator<TVirtualArray*> >::iterator>" , 99 , -1 };
G__linked_taginfo G__BranchTopDictLN_analysis = { "analysis" , 110 , -1 };
G__linked_taginfo G__BranchTopDictLN_pairlEfloataNcOstringgR = { "pair<float&,string>" , 115 , -1 };
G__linked_taginfo G__BranchTopDictLN_vectorlEpairlEfloataNcOstringgRcOallocatorlEpairlEfloataNcOstringgRsPgRsPgR = { "vector<pair<float&,string>,allocator<pair<float&,string> > >" , 99 , -1 };
G__linked_taginfo G__BranchTopDictLN_reverse_iteratorlEvectorlEpairlEfloataNcOstringgRcOallocatorlEpairlEfloataNcOstringgRsPgRsPgRcLcLiteratorgR = { "reverse_iterator<vector<pair<float&,string>,allocator<pair<float&,string> > >::iterator>" , 99 , -1 };
G__linked_taginfo G__BranchTopDictLN_analysiscLcLBranch = { "analysis::Branch" , 99 , -1 };
G__linked_taginfo G__BranchTopDictLN_analysiscLcLParticleBranch = { "analysis::ParticleBranch" , 99 , -1 };
G__linked_taginfo G__BranchTopDictLN_analysiscLcLPairBranch = { "analysis::PairBranch" , 99 , -1 };
G__linked_taginfo G__BranchTopDictLN_analysiscLcLMultiBranch = { "analysis::MultiBranch" , 99 , -1 };
G__linked_taginfo G__BranchTopDictLN_analysiscLcLtop = { "analysis::top" , 110 , -1 };
G__linked_taginfo G__BranchTopDictLN_analysiscLcLtopcLcLHCandidateBranch = { "analysis::top::HCandidateBranch" , 99 , -1 };
G__linked_taginfo G__BranchTopDictLN_analysiscLcLtopcLcLHTopHadronBranch = { "analysis::top::HTopHadronBranch" , 99 , -1 };

/* Reset class/struct taginfo */
extern "C" void G__cpp_reset_tagtableBranchTopDict() {
  G__BranchTopDictLN_TClass.tagnum = -1 ;
  G__BranchTopDictLN_TBuffer.tagnum = -1 ;
  G__BranchTopDictLN_TMemberInspector.tagnum = -1 ;
  G__BranchTopDictLN_TObject.tagnum = -1 ;
  G__BranchTopDictLN_vectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgR.tagnum = -1 ;
  G__BranchTopDictLN_reverse_iteratorlEvectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgRcLcLiteratorgR.tagnum = -1 ;
  G__BranchTopDictLN_vectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgR.tagnum = -1 ;
  G__BranchTopDictLN_reverse_iteratorlEvectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgRcLcLiteratorgR.tagnum = -1 ;
  G__BranchTopDictLN_analysis.tagnum = -1 ;
  G__BranchTopDictLN_pairlEfloataNcOstringgR.tagnum = -1 ;
  G__BranchTopDictLN_vectorlEpairlEfloataNcOstringgRcOallocatorlEpairlEfloataNcOstringgRsPgRsPgR.tagnum = -1 ;
  G__BranchTopDictLN_reverse_iteratorlEvectorlEpairlEfloataNcOstringgRcOallocatorlEpairlEfloataNcOstringgRsPgRsPgRcLcLiteratorgR.tagnum = -1 ;
  G__BranchTopDictLN_analysiscLcLBranch.tagnum = -1 ;
  G__BranchTopDictLN_analysiscLcLParticleBranch.tagnum = -1 ;
  G__BranchTopDictLN_analysiscLcLPairBranch.tagnum = -1 ;
  G__BranchTopDictLN_analysiscLcLMultiBranch.tagnum = -1 ;
  G__BranchTopDictLN_analysiscLcLtop.tagnum = -1 ;
  G__BranchTopDictLN_analysiscLcLtopcLcLHCandidateBranch.tagnum = -1 ;
  G__BranchTopDictLN_analysiscLcLtopcLcLHTopHadronBranch.tagnum = -1 ;
}


extern "C" void G__cpp_setup_tagtableBranchTopDict() {

   /* Setting up class,struct,union tag entry */
   G__get_linked_tagnum_fwd(&G__BranchTopDictLN_TClass);
   G__get_linked_tagnum_fwd(&G__BranchTopDictLN_TBuffer);
   G__get_linked_tagnum_fwd(&G__BranchTopDictLN_TMemberInspector);
   G__get_linked_tagnum_fwd(&G__BranchTopDictLN_TObject);
   G__get_linked_tagnum_fwd(&G__BranchTopDictLN_vectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgR);
   G__get_linked_tagnum_fwd(&G__BranchTopDictLN_reverse_iteratorlEvectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgRcLcLiteratorgR);
   G__get_linked_tagnum_fwd(&G__BranchTopDictLN_vectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgR);
   G__get_linked_tagnum_fwd(&G__BranchTopDictLN_reverse_iteratorlEvectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgRcLcLiteratorgR);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__BranchTopDictLN_analysis),0,-1,262144,(char*)NULL,G__setup_memvaranalysis,G__setup_memfuncanalysis);
   G__get_linked_tagnum_fwd(&G__BranchTopDictLN_pairlEfloataNcOstringgR);
   G__get_linked_tagnum_fwd(&G__BranchTopDictLN_vectorlEpairlEfloataNcOstringgRcOallocatorlEpairlEfloataNcOstringgRsPgRsPgR);
   G__get_linked_tagnum_fwd(&G__BranchTopDictLN_reverse_iteratorlEvectorlEpairlEfloataNcOstringgRcOallocatorlEpairlEfloataNcOstringgRsPgRsPgRcLcLiteratorgR);
   G__get_linked_tagnum_fwd(&G__BranchTopDictLN_analysiscLcLBranch);
   G__get_linked_tagnum_fwd(&G__BranchTopDictLN_analysiscLcLParticleBranch);
   G__get_linked_tagnum_fwd(&G__BranchTopDictLN_analysiscLcLPairBranch);
   G__get_linked_tagnum_fwd(&G__BranchTopDictLN_analysiscLcLMultiBranch);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__BranchTopDictLN_analysiscLcLtop),0,-1,262144,(char*)NULL,G__setup_memvaranalysiscLcLtop,G__setup_memfuncanalysiscLcLtop);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__BranchTopDictLN_analysiscLcLtopcLcLHCandidateBranch),sizeof(analysis::top::HCandidateBranch),-1,291072,(char*)NULL,G__setup_memvaranalysiscLcLtopcLcLHCandidateBranch,G__setup_memfuncanalysiscLcLtopcLcLHCandidateBranch);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__BranchTopDictLN_analysiscLcLtopcLcLHTopHadronBranch),sizeof(analysis::top::HTopHadronBranch),-1,291072,(char*)NULL,G__setup_memvaranalysiscLcLtopcLcLHTopHadronBranch,G__setup_memfuncanalysiscLcLtopcLcLHTopHadronBranch);
}
extern "C" void G__cpp_setupBranchTopDict(void) {
  G__check_setup_version(30051515,"G__cpp_setupBranchTopDict()");
  G__set_cpp_environmentBranchTopDict();
  G__cpp_setup_tagtableBranchTopDict();

  G__cpp_setup_inheritanceBranchTopDict();

  G__cpp_setup_typetableBranchTopDict();

  G__cpp_setup_memvarBranchTopDict();

  G__cpp_setup_memfuncBranchTopDict();
  G__cpp_setup_globalBranchTopDict();
  G__cpp_setup_funcBranchTopDict();

   if(0==G__getsizep2memfunc()) G__get_sizep2memfuncBranchTopDict();
  return;
}
class G__cpp_setup_initBranchTopDict {
  public:
    G__cpp_setup_initBranchTopDict() { G__add_setup_func("BranchTopDict",(G__incsetup)(&G__cpp_setupBranchTopDict)); G__call_setup_funcs(); }
   ~G__cpp_setup_initBranchTopDict() { G__remove_setup_func("BranchTopDict"); }
};
G__cpp_setup_initBranchTopDict G__cpp_setup_initializerBranchTopDict;

